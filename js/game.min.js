print("loading game.min.js started");
var _0x33a76c = {},
    _0x26de58 = {
        'make': function(_0x9b9cda, _0x4101d1) {
            return {
                'x': _0x9b9cda,
                'y': _0x4101d1
            };
        },
        'random': function() {
            return _0x26de58.normalize({
                'x': 0x2 * Math.random() - 0x1,
                'y': 0x2 * Math.random() - 0x1
            });
        },
        'copy': function(_0x513bb8) {
            return {
                'x': _0x513bb8.x,
                'y': _0x513bb8.y
            };
        },
        'add': function(_0x40c387, _0x41408a) {
            return {
                'x': _0x40c387.x + _0x41408a.x,
                'y': _0x40c387.y + _0x41408a.y
            };
        },
        'subtract': function(_0x477a20, _0x45244f) {
            return {
                'x': _0x477a20.x - _0x45244f.x,
                'y': _0x477a20.y - _0x45244f.y
            };
        },
        'scale': function(_0xe64009, _0x7568ac) {
            return {
                'x': _0xe64009.x * _0x7568ac,
                'y': _0xe64009.y * _0x7568ac
            };
        },
        'multiply': function(_0x45f1bb, _0x61bd5d) {
            return {
                'x': _0x45f1bb.x * _0x61bd5d.x,
                'y': _0x45f1bb.y * _0x61bd5d.y
            };
        },
        'divide': function(_0xa37714, _0x505587) {
            return {
                'x': _0xa37714.x / _0x505587.x,
                'y': _0xa37714.y / _0x505587.y
            };
        },
        'magnitude': function(_0xbb06f8) {
            return Math.sqrt(_0xbb06f8.x * _0xbb06f8.x + _0xbb06f8.y * _0xbb06f8.y);
        },
        'normalize': function(_0x95577d) {
            var _0x345de2 = _0x26de58.magnitude(_0x95577d);
            return 0x0 !== _0x345de2 ? {
                'x': _0x95577d.x / _0x345de2,
                'y': _0x95577d.y / _0x345de2
            } : {
                'x': 0x0,
                'y': 0x1
            };
        },
        'distance': function(_0x438721, _0x20692a) {
            return _0x26de58.magnitude(_0x26de58.subtract(_0x438721, _0x20692a));
        },
        'dot': function(_0x1a1c3f, _0x5d048a) {
            return _0x1a1c3f.x * _0x5d048a.x + _0x1a1c3f.y * _0x5d048a.y;
        },
        'inverse': function(_0x6e038) {
            return {
                'x': -0x1 * _0x6e038.x,
                'y': -0x1 * _0x6e038.y
            };
        },
        'lerp': function(_0x449c3f, _0x9a844a, _0x47869e) {
            return _0x26de58.add(_0x26de58.scale(_0x449c3f, 0x1 - _0x47869e), _0x26de58.scale(_0x9a844a, _0x47869e));
        },
        'rotate': function(_0x5177b0, _0x45a0e4) {
            var _0x315ef4 = Math.cos(_0x45a0e4);
            _0x45a0e4 = Math.sin(_0x45a0e4);
            return {
                'x': _0x5177b0.x * _0x315ef4 + _0x5177b0.y * _0x45a0e4,
                'y': _0x5177b0.x * -_0x45a0e4 + _0x5177b0.y * _0x315ef4
            };
        },
        'angle': function(_0x3f22f3, _0x362da6) {
            var _0x3138d2 = _0x26de58.dot(_0x3f22f3, _0x362da6);
            return Math.acos(_0x3138d2 / (Math.sqrt(_0x3f22f3.x * _0x3f22f3.x + _0x3f22f3.y * _0x3f22f3.y) * Math.sqrt(_0x362da6.x * _0x362da6.x + _0x362da6.y * _0x362da6.y)));
        },
        'average': function(_0x8aecc1) {
            for (var _0x506ec6 = _0x26de58.create(), _0x466cf6 = 0x0; _0x466cf6 < _0x8aecc1.length; _0x466cf6++) _0x506ec6 = _0x26de58.add(_0x506ec6, _0x8aecc1[_0x466cf6]);
            return _0x26de58.scale(_0x506ec6, 0x1 / _0x8aecc1.length);
        },
        'chop': function(_0x4413bf) {
            return _0x26de58.make(parseInt(_0x4413bf.x), parseInt(_0x4413bf.y));
        },
        'equals': function(_0x102b7d, _0x20a20c) {
            return _0x102b7d.x === _0x20a20c.x && _0x102b7d.y === _0x20a20c.y;
        },
        'toArray': function(_0xfa2c05) {
            return [_0xfa2c05.x, _0xfa2c05.y];
        }
    },
    _0x4c74f9 = {};
_0x4c74f9.make = function(_0x352992, _0x589705, _0x474312, _0x28bc34) {
    return {
        x: _0x352992,
        y: _0x589705,
        z: _0x474312,
        w: _0x28bc34
    };
};
_0x4c74f9.copy = function(_0x26ffa4) {
    return {
        x: _0x26ffa4.x,
        y: _0x26ffa4.y,
        z: _0x26ffa4.z,
        w: _0x26ffa4.w
    };
};
_0x4c74f9.add = function(_0x5453a6, _0x3ad8f6) {
    return {
        x: _0x5453a6.x + _0x3ad8f6.x,
        y: _0x5453a6.y + _0x3ad8f6.y,
        z: _0x5453a6.z + _0x3ad8f6.z,
        w: _0x5453a6.w + _0x3ad8f6.w
    };
};
_0x4c74f9.subtract = function(_0xdcb7eb, _0x309cab) {
    return {
        x: _0xdcb7eb.x - _0x309cab.x,
        y: _0xdcb7eb.y - _0x309cab.y,
        z: _0xdcb7eb.z - _0x309cab.z,
        w: _0xdcb7eb.w - _0x309cab.w
    };
};
_0x4c74f9.scale = function(_0x1413b9, _0x48339f) {
    return {
        x: _0x1413b9.x * _0x48339f,
        y: _0x1413b9.y * _0x48339f,
        z: _0x1413b9.z * _0x48339f,
        w: _0x1413b9.w * _0x48339f
    };
};
_0x4c74f9.multiply = function(_0x181caa, _0x1d5e43) {
    return {
        x: _0x181caa.x * _0x1d5e43.x,
        y: _0x181caa.y * _0x1d5e43.y,
        z: _0x181caa.z * _0x1d5e43.z,
        w: _0x181caa.w * _0x1d5e43.w
    };
};
_0x4c74f9.lerp = function(_0x98c2ee, _0x2014a1, _0x21e83c) {
    return _0x4c74f9.add(_0x4c74f9.scale(_0x98c2ee, 0x1 - _0x21e83c), _0x4c74f9.scale(_0x2014a1, _0x21e83c));
};
_0x4c74f9.toArray = function(_0x583eb8) {
    return [_0x583eb8.x, _0x583eb8.y, _0x583eb8.z, _0x583eb8.w];
};
_0x33a76c.line2 = {};
_0x33a76c.intersection = {};
_0x33a76c.time = {};
_0x33a76c.sprite = {};
_0x33a76c.line2.normal = function(_0x542843) {
    return _0x26de58.normalize({
        'x': _0x542843.b.y - _0x542843.a.y,
        'y': -0x1 * (_0x542843.b.x - _0x542843.a.x)
    });
};
_0x33a76c.intersection.pointRectangle = function(_0x1f2e5d, _0x4fb4f3, _0x195e9a) {
    return _0x4fb4f3.x <= _0x1f2e5d.x && _0x4fb4f3.x + _0x195e9a.x > _0x1f2e5d.x && _0x4fb4f3.y <= _0x1f2e5d.y && _0x4fb4f3.y + _0x195e9a.y > _0x1f2e5d.y;
};
_0x33a76c.intersection.pointPoly = function(_0x3050fe, _0x3fb4ac) {
    var _0x315951, _0x3d41ed, _0x3833a5 = !0x1,
        _0x33ce75 = _0x3fb4ac.length;
    _0x315951 = 0x0;
    for (_0x3d41ed = _0x33ce75 - 0x1; _0x315951 < _0x33ce75; _0x3d41ed = _0x315951++) _0x3fb4ac[_0x315951].y > _0x3050fe.y !== _0x3fb4ac[_0x3d41ed].y > _0x3050fe.y && _0x3050fe.x < (_0x3fb4ac[_0x3d41ed].x - _0x3fb4ac[_0x315951].x) * (_0x3050fe.y - _0x3fb4ac[_0x315951].y) / (_0x3fb4ac[_0x3d41ed].y - _0x3fb4ac[_0x315951].y) + _0x3fb4ac[_0x315951].x && (_0x3833a5 = !_0x3833a5);
    return _0x3833a5;
};
_0x33a76c.intersection.lineLine = function(_0x19d86f, _0x3c89c8) {
    var _0x1f1a11, _0x5c28c9, _0x2b1fa9, _0x9c8117;
    _0x1f1a11 = _0x19d86f.b.x - _0x19d86f.a.x;
    _0x5c28c9 = _0x19d86f.b.y - _0x19d86f.a.y;
    _0x2b1fa9 = _0x3c89c8.b.x - _0x3c89c8.a.x;
    _0x9c8117 = _0x3c89c8.b.y - _0x3c89c8.a.y;
    var _0x5c5c20;
    _0x5c5c20 = (-_0x5c28c9 * (_0x19d86f.a.x - _0x3c89c8.a.x) + _0x1f1a11 * (_0x19d86f.a.y - _0x3c89c8.a.y)) / (-_0x2b1fa9 * _0x5c28c9 + _0x1f1a11 * _0x9c8117);
    _0x2b1fa9 = (_0x2b1fa9 * (_0x19d86f.a.y - _0x3c89c8.a.y) - _0x9c8117 * (_0x19d86f.a.x - _0x3c89c8.a.x)) / (-_0x2b1fa9 * _0x5c28c9 + _0x1f1a11 * _0x9c8117);
    if (0x0 <= _0x5c5c20 && 0x1 >= _0x5c5c20 && 0x0 <= _0x2b1fa9 && 0x1 >= _0x2b1fa9) return _0x1f1a11 = _0x19d86f.a.x + _0x2b1fa9 * _0x1f1a11, _0x5c28c9 = _0x19d86f.a.y + _0x2b1fa9 * _0x5c28c9, _0x5c28c9 = {}, _0x3c89c8 = _0x33a76c.line2.normal(_0x3c89c8), {
        'intersection': _0x5c28c9,
        'normal': _0x3c89c8,
        'distance': _0x26de58.distance(_0x5c28c9, _0x19d86f.a)
    };
    _0x5c28c9.x = _0x1f1a11;
    _0x5c28c9.y = _0x5c28c9;
};
_0x33a76c.intersection.lineCircle = function(_0x23b739, _0x52f453, _0x25831c) {
    var _0x4f1d7f = _0x33a76c.intersection.lineNearestPoint(_0x23b739, _0x52f453);
    if (_0x26de58.equals(_0x4f1d7f, _0x52f453.a)) {
        var _0x1ab3a2 = _0x26de58.subtract(_0x23b739, _0x52f453.a);
        _0x23b739 = _0x26de58.magnitude(_0x1ab3a2);
        if (!(_0x23b739 >= _0x25831c)) return _0x25831c = _0x26de58.normalize(_0x1ab3a2), {
            'intersection': _0x52f453.a,
            'normal': _0x25831c,
            'dist': _0x23b739
        };
    } else {
        if (_0x26de58.equals(_0x4f1d7f, _0x52f453.b)) {
            _0x1ab3a2 = _0x26de58.subtract(_0x23b739, _0x52f453.b);
            _0x23b739 = _0x26de58.magnitude(_0x1ab3a2);
            if (_0x23b739 >= _0x25831c) return;
            _0x25831c = _0x26de58.normalize(_0x1ab3a2);
            return {
                'intersection': _0x52f453.b,
                'normal': _0x25831c,
                'distance': _0x23b739
            };
        }
        _0x1ab3a2 = _0x26de58.subtract(_0x23b739, _0x4f1d7f);
        _0x23b739 = _0x26de58.magnitude(_0x1ab3a2);
        if (!(_0x23b739 >= _0x25831c)) return _0x25831c = _0x26de58.normalize(_0x1ab3a2), {
            'intersection': _0x4f1d7f,
            'normal': _0x25831c,
            'distance': _0x23b739
        };
    }
};
_0x33a76c.intersection.polygonLine = function(_0x35e9bb, _0x180ded) {
    for (var _0x361de = [], _0x2d1537 = 0x0; _0x2d1537 < _0x180ded.v.length; _0x2d1537++) {
        var _0xaeb880 = _0x33a76c.intersection.lineLine(_0x35e9bb, {
            'a': _0x180ded.v[_0x2d1537],
            'b': _0x180ded.v[_0x2d1537 + 0x1 < _0x180ded.v.length ? _0x2d1537 + 0x1 : 0x0]
        });
        _0xaeb880 && _0x361de.push(_0xaeb880);
    }
    if (!(0x1 > _0x361de.length)) {
        _0x35e9bb = _0x361de[0x0];
        for (_0x2d1537 = 0x1; _0x2d1537 < _0x361de.length; _0x2d1537++) _0x361de[_0x2d1537].distance < _0x35e9bb.distance && (_0x35e9bb = _0x361de[_0x2d1537]);
        return _0x35e9bb;
    }
};
_0x33a76c.intersection.polygonCircle = function(_0x26d962, _0x358ffa, _0x2921d5) {
    for (var _0x40a38a = [], _0x26257e = 0x0; _0x26257e < _0x358ffa.v.length; _0x26257e++) {
        var _0x5eeed2 = _0x33a76c.intersection.lineCircle(_0x26d962, {
            'a': _0x358ffa.v[_0x26257e],
            'b': _0x358ffa.v[_0x26257e + 0x1 < _0x358ffa.v.length ? _0x26257e + 0x1 : 0x0]
        }, _0x2921d5);
        _0x5eeed2 && _0x40a38a.push(_0x5eeed2);
    }
    if (!(0x1 > _0x40a38a.length)) {
        _0x26d962 = _0x40a38a[0x0];
        for (_0x26257e = 0x1; _0x26257e < _0x40a38a.length; _0x26257e++) _0x40a38a[_0x26257e].distance < _0x26d962.distance && (_0x26d962 = _0x40a38a[_0x26257e]);
        return _0x26d962;
    }
};
_0x33a76c.intersection.lineNearestPoint = function(_0x5a6af6, _0x4deaa7) {
    var _0x5842b2 = _0x26de58.subtract(_0x4deaa7.b, _0x4deaa7.a);
    _0x5a6af6 = _0x26de58.subtract(_0x5a6af6, _0x4deaa7.a);
    _0x5a6af6 = _0x26de58.dot(_0x5a6af6, _0x5842b2);
    if (0x0 >= _0x5a6af6) return _0x4deaa7.a;
    var _0x5e06d3 = _0x26de58.dot(_0x5842b2, _0x5842b2);
    return _0x5e06d3 <= _0x5a6af6 ? _0x4deaa7.b : _0x26de58.add(_0x4deaa7.a, _0x26de58.scale(_0x5842b2, _0x5a6af6 / _0x5e06d3));
};
_0x33a76c.time.now = function() {
    return Date.now();
};
_0x33a76c.sprite.getSprite = function(_0xcf938f, _0x3feac1) {
    var _0x3f655d = _0xcf938f.width;
    _0xcf938f = _0xcf938f.height;
    _0x3feac1 *= _0x2c5742.TEXRES;
    var _0x31166d = parseInt(Math.floor(_0x3feac1 / _0x3f655d) * _0x2c5742.TEXRES);
    return _0x31166d > _0xcf938f ? [0x0, 0x0] : [_0x3feac1 % _0x3f655d, _0x31166d];
};
var _0x5a9d86 = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(_0x42507e) {
            window.setTimeout(_0x42507e, 0x10);
        };
    }(),
    _0x2a6b41 = function() {
        return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;
    }();
"use strict";
var _0xdd5628 = {},
    _0x41f345 = {};
_0x41f345.encode = function(_0x3c8a7b, _0x4f1630, _0x3efad8, _0x4e695c, _0x3ebb62) {
    return 0x0 | parseInt(_0x3c8a7b) & 0x7ff | parseInt(_0x4f1630) << 0xb & 0x7800 | (_0x3efad8 ? 0x1 : 0x0) << 0xf & 0x8000 | parseInt(_0x4e695c) << 0x10 & 0xff0000 | parseInt(_0x3ebb62) << 0x18 & 0xff000000;
};
_0x41f345.decode16 = function(_0x286184) {
    return {
        index: _0x286184 & 0x7ff,
        bump: _0x286184 >> 0xb & 0xf,
        depth: 0x1 === (_0x286184 >> 0xf & 0x1)
    };
};
_0x41f345.decode = function(_0x176cca) {
    var _0x59bbe0 = _0x176cca >> 0x10 & 0xff;
    return {
        index: _0x176cca & 0x7ff,
        bump: _0x176cca >> 0xb & 0xf,
        depth: 0x1 === (_0x176cca >> 0xf & 0x1),
        definition: _0x41f345.TILE_PROPERTIES[_0x59bbe0] ? _0x41f345.TILE_PROPERTIES[_0x59bbe0] : _0x41f345.TILE_PROPERTIES[0x0],
        data: _0x176cca >> 0x18 & 0xff
    };
};
_0x41f345.bump = function(_0x3801c3, _0xbe4b19) {
    return _0x3801c3 & 0xffff87ff | _0xbe4b19 << 0xb & 0x7800;
};
_0x41f345.data = function(_0x33a078, _0x691c5e) {
    return _0x33a078 & 0xffffff | _0x691c5e << 0x18 & 0xff000000;
};
_0x41f345.asArray = function(_0x7370d3) {
    return [_0x7370d3 & 0x7ff, _0x7370d3 >> 0xb & 0xf, 0x1 === (_0x7370d3 >> 0xf & 0x1), _0x7370d3 >> 0x10 & 0xff, _0x7370d3 >> 0x18 & 0xff];
};
_0x41f345.TRIGGER = {};
_0x41f345.GEN_FUNC = {};
_0x41f345.TRIGGER.TYPE = {};
_0x41f345.TRIGGER.TYPE.TOUCH = 0x0;
_0x41f345.TRIGGER.TYPE.DOWN = 0x1;
_0x41f345.TRIGGER.TYPE.PUSH = 0x2;
_0x41f345.TRIGGER.TYPE.SMALL_BUMP = 0x10;
_0x41f345.TRIGGER.TYPE.BIG_BUMP = 0x11;
_0xdd5628.encode = function(_0x16c11e, _0x249cd7) {
    return 0x0 | parseInt(_0x16c11e) & 0xffff | parseInt(_0x249cd7) << 0x10 & 0xffff0000;
};
_0xdd5628.decode = function(_0x397dd5) {
    return _0x26de58.make(_0x397dd5 & 0xffff, _0x397dd5 >> 0x10 & 0xffff);
};
_0xdd5628.asArray = function(_0x5c2f23) {
    return [_0x5c2f23 & 0xffff, _0x5c2f23 >> 0x10 & 0xffff];
};
_0x41f345.GEN_FUNC.BUMP = function(_0x3c91bc, _0x897be, _0x5d48f2, _0x43ba2c, _0x4d3e0f, _0x3ff6e1, _0x444def, _0x6654d3) {
    _0x3c91bc.world.getZone(_0x43ba2c, _0x4d3e0f).bump(_0x3ff6e1, _0x444def);
    _0x5d48f2 = _0x26de58.make(0x1, 0.15);
    _0x3ff6e1 = _0x26de58.make(_0x3ff6e1, _0x444def + 0x1);
    for (_0x444def = 0x0; _0x444def < _0x3c91bc.objects.length; _0x444def++) _0x6654d3 = _0x3c91bc.objects[_0x444def], !_0x6654d3.dead && _0x6654d3.level === _0x43ba2c && _0x6654d3.zone === _0x4d3e0f && _0x6654d3.dim && _0x1badb6.intersection(_0x3ff6e1, _0x5d48f2, _0x6654d3.pos, _0x6654d3.dim) && (_0x6654d3 instanceof PlayerObject ? _0x6654d3.bounce() : _0x6654d3.bounce ? _0x6654d3.bounce() : _0x6654d3.bonk ? _0x6654d3.bonk() : _0x6654d3 instanceof CoinObject && (_0x3c91bc.pid === _0x897be && _0x6654d3.playerCollide(_0x3c91bc.getPlayer()), _0x3c91bc.world.getZone(_0x43ba2c, _0x4d3e0f).coin(_0x6654d3.pos.x, _0x6654d3.pos.y)));
};
_0x41f345.GEN_FUNC.BREAK = function(_0x166b7e, _0x53ef4a, _0x4e42f0, _0x7eb58b, _0x3ebd05, _0x3d616e, _0x3a0031, _0x197b34) {
    _0x166b7e.world.getZone(_0x7eb58b, _0x3ebd05).break(_0x3d616e, _0x3a0031, 0x1e);
    _0x4e42f0 = _0x26de58.make(0x1, 0.15);
    _0x3d616e = _0x26de58.make(_0x3d616e, _0x3a0031 + 0x1);
    for (_0x3a0031 = 0x0; _0x3a0031 < _0x166b7e.objects.length; _0x3a0031++) _0x197b34 = _0x166b7e.objects[_0x3a0031], !_0x197b34.dead && _0x197b34.level === _0x7eb58b && _0x197b34.zone === _0x3ebd05 && _0x197b34.dim && _0x1badb6.intersection(_0x3d616e, _0x4e42f0, _0x197b34.pos, _0x197b34.dim) && (_0x197b34 instanceof PlayerObject ? _0x197b34.bounce() : _0x197b34.bounce ? _0x197b34.bounce() : _0x197b34.bonk ? _0x197b34.bonk() : _0x197b34 instanceof CoinObject && (_0x166b7e.pid === _0x53ef4a && _0x197b34.playerCollide(_0x166b7e.getPlayer()), _0x166b7e.world.getZone(_0x7eb58b, _0x3ebd05).coin(_0x197b34.pos.x, _0x197b34.pos.y)));
};
_0x41f345.TILE_PROPERTIES = {
    0: {
        'NAME': "AIR",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x271f0d, _0x530d63, _0x22261a, _0x33928d, _0x271f34, _0x43e15a, _0xab0c3f, _0x430589) {}
    },
    1: {
        'NAME': "SOLID STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x13a296, _0x42a28b, _0x5efabb, _0x2c1ca5, _0x490fb0, _0x103332, _0x2fa206, _0x47c0a8) {}
    },
    2: {
        'NAME': "SOLID BUMPABLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x52e87f, _0x3e0969, _0x4e1033, _0xa20a5e, _0x32dd03, _0x4532db, _0x4008fc, _0x39cd6f) {
            switch (_0x39cd6f) {
                case 0x10:
                    _0x52e87f.pid === _0x3e0969 && _0x52e87f.out.push(_0x231422.encode(_0xa20a5e, _0x32dd03, _0xdd5628.encode(_0x4532db, _0x4008fc), _0x39cd6f));
                    _0x41f345.GEN_FUNC.BUMP(_0x52e87f, _0x3e0969, _0x4e1033, _0xa20a5e, _0x32dd03, _0x4532db, _0x4008fc, _0x39cd6f);
                    break;
                case 0x11:
                    _0x52e87f.pid === _0x3e0969 && _0x52e87f.out.push(_0x231422.encode(_0xa20a5e, _0x32dd03, _0xdd5628.encode(_0x4532db, _0x4008fc), _0x39cd6f)), _0x41f345.GEN_FUNC.BUMP(_0x52e87f, _0x3e0969, _0x4e1033, _0xa20a5e, _0x32dd03, _0x4532db, _0x4008fc, _0x39cd6f);
            }
        }
    },
    3: {
        'NAME': "SOLID BREAKABLE NORMAL",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x31fd56, _0x121d88, _0x29a2ce, _0xeb7538, _0x409b57, _0xdc7bcb, _0x4aaacd, _0x3a7b7a) {
            switch (_0x3a7b7a) {
                case 0x10:
                    _0x31fd56.pid === _0x121d88 && _0x31fd56.out.push(_0x231422.encode(_0xeb7538, _0x409b57, _0xdd5628.encode(_0xdc7bcb, _0x4aaacd), _0x3a7b7a));
                    _0x41f345.GEN_FUNC.BUMP(_0x31fd56, _0x121d88, _0x29a2ce, _0xeb7538, _0x409b57, _0xdc7bcb, _0x4aaacd, _0x3a7b7a);
                    break;
                case 0x11:
                    _0x31fd56.pid === _0x121d88 && _0x31fd56.out.push(_0x231422.encode(_0xeb7538, _0x409b57, _0xdd5628.encode(_0xdc7bcb, _0x4aaacd), _0x3a7b7a)), _0x41f345.GEN_FUNC.BREAK(_0x31fd56, _0x121d88, _0x29a2ce, _0xeb7538, _0x409b57, _0xdc7bcb, _0x4aaacd, _0x3a7b7a);
            }
        }
    },
    17: {
        'NAME': "ITEM BLOCK STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x1837f3, _0x4ab377, _0x349774, _0xa1cf5d, _0x42c8b9, _0x1bedc7, _0x216f2e, _0x96116d) {
            switch (_0x96116d) {
                case 0x10:
                    _0x1837f3.pid === _0x4ab377 && _0x1837f3.out.push(_0x231422.encode(_0xa1cf5d, _0x42c8b9, _0xdd5628.encode(_0x1bedc7, _0x216f2e), _0x96116d));
                    var _0x4d5415 = 0x1801b;
                    _0x1837f3.world.getZone(_0xa1cf5d, _0x42c8b9).replace(_0x1bedc7, _0x216f2e, _0x4d5415);
                    _0x1837f3.createObject(_0x349774.data, _0xa1cf5d, _0x42c8b9, _0x26de58.make(_0x1bedc7, _0x216f2e), [_0xdd5628.encode(_0x1bedc7, _0x216f2e)]);
                    _0x41f345.GEN_FUNC.BUMP(_0x1837f3, _0x4ab377, _0x349774, _0xa1cf5d, _0x42c8b9, _0x1bedc7, _0x216f2e, _0x96116d);
                    _0x1837f3.world.getZone(_0xa1cf5d, _0x42c8b9).play(_0x1bedc7, _0x216f2e, "sfx/item.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x1837f3.pid === _0x4ab377 && _0x1837f3.out.push(_0x231422.encode(_0xa1cf5d, _0x42c8b9, _0xdd5628.encode(_0x1bedc7, _0x216f2e), _0x96116d)), _0x4d5415 = 0x1801b, _0x1837f3.world.getZone(_0xa1cf5d, _0x42c8b9).replace(_0x1bedc7, _0x216f2e, _0x4d5415), _0x1837f3.createObject(_0x349774.data, _0xa1cf5d, _0x42c8b9, _0x26de58.make(_0x1bedc7, _0x216f2e), [_0xdd5628.encode(_0x1bedc7, _0x216f2e)]), _0x41f345.GEN_FUNC.BUMP(_0x1837f3, _0x4ab377, _0x349774, _0xa1cf5d, _0x42c8b9, _0x1bedc7, _0x216f2e, _0x96116d), _0x1837f3.world.getZone(_0xa1cf5d, _0x42c8b9).play(_0x1bedc7, _0x216f2e, "sfx/item.wav", 0x1, 0.04);
            }
        }
    },
    18: {
        'NAME': "COIN BLOCK STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0xf3b2fd, _0x2b0cf8, _0x4f89b5, _0x296739, _0x47d7ab, _0x20b93e, _0x17d34e, _0x232f65) {
            switch (_0x232f65) {
                case 0x10:
                    _0xf3b2fd.pid === _0x2b0cf8 && (_0xf3b2fd.coinage(), _0xf3b2fd.out.push(_0x231422.encode(_0x296739, _0x47d7ab, _0xdd5628.encode(_0x20b93e, _0x17d34e), _0x232f65)));
                    var _0x4cf12a = 0x1801b;
                    _0xf3b2fd.world.getZone(_0x296739, _0x47d7ab).replace(_0x20b93e, _0x17d34e, _0x4cf12a);
                    _0xf3b2fd.world.getZone(_0x296739, _0x47d7ab).coin(_0x20b93e, _0x17d34e + 0x1);
                    _0x41f345.GEN_FUNC.BUMP(_0xf3b2fd, _0x2b0cf8, _0x4f89b5, _0x296739, _0x47d7ab, _0x20b93e, _0x17d34e, _0x232f65);
                    break;
                case 0x11:
                    _0xf3b2fd.pid === _0x2b0cf8 && (_0xf3b2fd.coinage(), _0xf3b2fd.out.push(_0x231422.encode(_0x296739, _0x47d7ab, _0xdd5628.encode(_0x20b93e, _0x17d34e), _0x232f65))), _0x4cf12a = 0x1801b, _0xf3b2fd.world.getZone(_0x296739, _0x47d7ab).replace(_0x20b93e, _0x17d34e, _0x4cf12a), _0xf3b2fd.world.getZone(_0x296739, _0x47d7ab).coin(_0x20b93e, _0x17d34e + 0x1), _0x41f345.GEN_FUNC.BUMP(_0xf3b2fd, _0x2b0cf8, _0x4f89b5, _0x296739, _0x47d7ab, _0x20b93e, _0x17d34e, _0x232f65);
            }
        }
    },
    19: {
        'NAME': "COIN BLOCK MULTI",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x51d0d4, _0xca5919, _0x2cbb60, _0x1c2b78, _0x46b0fe, _0x4e8ae2, _0x1eee7d, _0x1ae7d4) {
            switch (_0x1ae7d4) {
                case 0x10:
                    _0x51d0d4.pid === _0xca5919 && (_0x51d0d4.coinage(), _0x51d0d4.out.push(_0x231422.encode(_0x1c2b78, _0x46b0fe, _0xdd5628.encode(_0x4e8ae2, _0x1eee7d), _0x1ae7d4)));
                    if (0x0 < _0x2cbb60.data) var _0x109bbf = _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).tile(_0x4e8ae2, _0x1eee7d),
                        _0x109bbf = _0x41f345.data(_0x109bbf, _0x2cbb60.data - 0x1);
                    else _0x109bbf = 0x1801b;
                    _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).replace(_0x4e8ae2, _0x1eee7d, _0x109bbf);
                    _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).coin(_0x4e8ae2, _0x1eee7d + 0x1);
                    _0x41f345.GEN_FUNC.BUMP(_0x51d0d4, _0xca5919, _0x2cbb60, _0x1c2b78, _0x46b0fe, _0x4e8ae2, _0x1eee7d, _0x1ae7d4);
                    break;
                case 0x11:
                    _0x51d0d4.pid === _0xca5919 && (_0x51d0d4.coinage(), _0x51d0d4.out.push(_0x231422.encode(_0x1c2b78, _0x46b0fe, _0xdd5628.encode(_0x4e8ae2, _0x1eee7d), _0x1ae7d4))), 0x0 < _0x2cbb60.data ? (_0x109bbf = _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).tile(_0x4e8ae2, _0x1eee7d), _0x109bbf = _0x41f345.data(_0x109bbf, _0x2cbb60.data - 0x1)) : _0x109bbf = 0x1801b, _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).replace(_0x4e8ae2, _0x1eee7d, _0x109bbf), _0x51d0d4.world.getZone(_0x1c2b78, _0x46b0fe).coin(_0x4e8ae2, _0x1eee7d + 0x1), _0x41f345.GEN_FUNC.BUMP(_0x51d0d4, _0xca5919, _0x2cbb60, _0x1c2b78, _0x46b0fe, _0x4e8ae2, _0x1eee7d, _0x1ae7d4);
            }
        }
    },
    24: {
        'NAME': "VINE BLOCK",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x4d7cab, _0xf383, _0x2d3073, _0x421d40, _0x15761f, _0x1979b2, _0x45d74c, _0x150638) {
            switch (_0x150638) {
                case 0x10:
                    _0x4d7cab.pid === _0xf383 && _0x4d7cab.out.push(_0x231422.encode(_0x421d40, _0x15761f, _0xdd5628.encode(_0x1979b2, _0x45d74c), _0x150638));
                    var _0x151148 = 0x1801b,
                        _0x5425be = _0x41f345.data(0xa50164, _0x2d3073.data);
                    _0x4d7cab.world.getZone(_0x421d40, _0x15761f).replace(_0x1979b2, _0x45d74c, _0x151148);
                    _0x4d7cab.world.getZone(_0x421d40, _0x15761f).grow(_0x1979b2, _0x45d74c + 0x1, _0x5425be);
                    _0x41f345.GEN_FUNC.BUMP(_0x4d7cab, _0xf383, _0x2d3073, _0x421d40, _0x15761f, _0x1979b2, _0x45d74c, _0x150638);
                    _0x4d7cab.world.getZone(_0x421d40, _0x15761f).play(_0x1979b2, _0x45d74c, "sfx/vine.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x4d7cab.pid === _0xf383 && (_0x4d7cab.coinage(), _0x4d7cab.out.push(_0x231422.encode(_0x421d40, _0x15761f, _0xdd5628.encode(_0x1979b2, _0x45d74c), _0x150638))), _0x151148 = 0x1801b, _0x5425be = _0x41f345.data(0xa50164, _0x2d3073.data), _0x4d7cab.world.getZone(_0x421d40, _0x15761f).replace(_0x1979b2, _0x45d74c, _0x151148), _0x4d7cab.world.getZone(_0x421d40, _0x15761f).grow(_0x1979b2, _0x45d74c + 0x1, _0x5425be), _0x41f345.GEN_FUNC.BUMP(_0x4d7cab, _0xf383, _0x2d3073, _0x421d40, _0x15761f, _0x1979b2, _0x45d74c, _0x150638), _0x4d7cab.world.getZone(_0x421d40, _0x15761f).play(_0x1979b2, _0x45d74c, "sfx/vine.wav", 0x1, 0.04);
            }
        }
    },
    21: {
        'NAME': "ITEM BLOCK INVISIBLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x0,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x25478a, _0x3c594f, _0x3bf8ce, _0x3652bf, _0xfe88a7, _0x44da88, _0x24e427, _0x45ddff) {
            switch (_0x45ddff) {
                case 0x10:
                    _0x25478a.pid === _0x3c594f && _0x25478a.out.push(_0x231422.encode(_0x3652bf, _0xfe88a7, _0xdd5628.encode(_0x44da88, _0x24e427), _0x45ddff));
                    var _0x3ae8a1 = 0x1801b;
                    _0x25478a.world.getZone(_0x3652bf, _0xfe88a7).replace(_0x44da88, _0x24e427, _0x3ae8a1);
                    _0x25478a.createObject(_0x3bf8ce.data, _0x3652bf, _0xfe88a7, _0x26de58.make(_0x44da88, _0x24e427), [_0xdd5628.encode(_0x44da88, _0x24e427)]);
                    _0x41f345.GEN_FUNC.BUMP(_0x25478a, _0x3c594f, _0x3bf8ce, _0x3652bf, _0xfe88a7, _0x44da88, _0x24e427, _0x45ddff);
                    _0x25478a.world.getZone(_0x3652bf, _0xfe88a7).play(_0x44da88, _0x24e427, "sfx/item.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x25478a.pid === _0x3c594f && _0x25478a.out.push(_0x231422.encode(_0x3652bf, _0xfe88a7, _0xdd5628.encode(_0x44da88, _0x24e427), _0x45ddff)), _0x3ae8a1 = 0x1801b, _0x25478a.world.getZone(_0x3652bf, _0xfe88a7).replace(_0x44da88, _0x24e427, _0x3ae8a1), _0x25478a.createObject(_0x3bf8ce.data, _0x3652bf, _0xfe88a7, _0x26de58.make(_0x44da88, _0x24e427), [_0xdd5628.encode(_0x44da88, _0x24e427)]), _0x41f345.GEN_FUNC.BUMP(_0x25478a, _0x3c594f, _0x3bf8ce, _0x3652bf, _0xfe88a7, _0x44da88, _0x24e427, _0x45ddff), _0x25478a.world.getZone(_0x3652bf, _0xfe88a7).play(_0x44da88, _0x24e427, "sfx/item.wav", 0x1, 0.04);
            }
        }
    },
    22: {
        'NAME': "COIN BLOCK INVISIBLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x0,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x1c89c6, _0x2a975e, _0x5b273d, _0xd12560, _0x43d418, _0x2a406d, _0x1235b3, _0x31ef48) {
            switch (_0x31ef48) {
                case 0x10:
                    _0x1c89c6.pid === _0x2a975e && (_0x1c89c6.coinage(), _0x1c89c6.out.push(_0x231422.encode(_0xd12560, _0x43d418, _0xdd5628.encode(_0x2a406d, _0x1235b3), _0x31ef48)));
                    var _0x5b57ac = 0x1801b;
                    _0x1c89c6.world.getZone(_0xd12560, _0x43d418).replace(_0x2a406d, _0x1235b3, _0x5b57ac);
                    _0x1c89c6.world.getZone(_0xd12560, _0x43d418).coin(_0x2a406d, _0x1235b3 + 0x1);
                    _0x41f345.GEN_FUNC.BUMP(_0x1c89c6, _0x2a975e, _0x5b273d, _0xd12560, _0x43d418, _0x2a406d, _0x1235b3, _0x31ef48);
                    break;
                case 0x11:
                    _0x1c89c6.pid === _0x2a975e && (_0x1c89c6.coinage(), _0x1c89c6.out.push(_0x231422.encode(_0xd12560, _0x43d418, _0xdd5628.encode(_0x2a406d, _0x1235b3), _0x31ef48))), _0x5b57ac = 0x1801b, _0x1c89c6.world.getZone(_0xd12560, _0x43d418).replace(_0x2a406d, _0x1235b3, _0x5b57ac), _0x1c89c6.world.getZone(_0xd12560, _0x43d418).coin(_0x2a406d, _0x1235b3 + 0x1), _0x41f345.GEN_FUNC.BUMP(_0x1c89c6, _0x2a975e, _0x5b273d, _0xd12560, _0x43d418, _0x2a406d, _0x1235b3, _0x31ef48);
            }
        }
    },
    81: {
        'NAME': "WARP TILE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x166940, _0x21651a, _0x398810, _0x1a4cf6, _0x13c13b, _0x5c7568, _0x2e93e7, _0x4ed92f) {
            switch (_0x4ed92f) {
                case 0x0:
                    _0x166940.pid === _0x21651a && _0x166940.getPlayer().warp(_0x398810.data);
            }
        }
    },
    82: {
        'NAME': "WARP PIPE SLOW",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x33b9c9, _0x1aa909, _0xf403f9, _0x2ec993, _0x4346f5, _0x531e8f, _0x459a7d, _0x42a534) {
            switch (_0x42a534) {
                case 0x1:
                    if (_0x33b9c9.pid === _0x1aa909) {
                        _0x1aa909 = _0x33b9c9.getPlayer();
                        _0x42a534 = _0x33b9c9.world.getZone(_0x2ec993, _0x4346f5).getTile(_0x26de58.make(_0x531e8f - 0x1, _0x459a7d));
                        _0x33b9c9 = _0x33b9c9.world.getZone(_0x2ec993, _0x4346f5).getTile(_0x26de58.make(_0x531e8f + 0x1, _0x459a7d));
                        if (_0x42a534.definition !== this)
                            if (_0x33b9c9.definition === this) _0x531e8f += 0x1;
                            else break;
                        0.45 >= Math.abs(_0x1aa909.pos.x + 0.5 * _0x1aa909.dim.x - _0x531e8f) && _0x1aa909.pipe(0x2, _0xf403f9.data, 0x32);
                    }
            }
        }
    },
    83: {
        'NAME': "WARP PIPE RIGHT SLOW",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x1e46b3, _0x4d1a45, _0x1c0a89, _0x429c2c, _0x6ca5e6, _0x2de017, _0x196410, _0x179b57) {
            switch (_0x179b57) {
                case 0x2:
                    _0x1e46b3.pid === _0x4d1a45 && _0x1e46b3.getPlayer().pipe(0x4, _0x1c0a89.data, 0x32);
            }
        }
    },
    84: {
        'NAME': "WARP PIPE FAST",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x47a8a6, _0x35bf48, _0x47aee6, _0x2d00a0, _0x504ce8, _0x125071, _0x4c94f9, _0x4f3822) {
            switch (_0x4f3822) {
                case 0x1:
                    if (_0x47a8a6.pid === _0x35bf48) {
                        _0x35bf48 = _0x47a8a6.getPlayer();
                        _0x4f3822 = _0x47a8a6.world.getZone(_0x2d00a0, _0x504ce8).getTile(_0x26de58.make(_0x125071 - 0x1, _0x4c94f9));
                        _0x47a8a6 = _0x47a8a6.world.getZone(_0x2d00a0, _0x504ce8).getTile(_0x26de58.make(_0x125071 + 0x1, _0x4c94f9));
                        if (_0x4f3822.definition !== this)
                            if (_0x47a8a6.definition === this) _0x125071 += 0x1;
                            else break;
                        0.45 >= Math.abs(_0x35bf48.pos.x + 0.5 * _0x35bf48.dim.x - _0x125071) && _0x35bf48.pipe(0x2, _0x47aee6.data, 0x0);
                    }
            }
        }
    },
    85: {
        'NAME': "WARP PIPE RIGHT FAST",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x47a9b7, _0x4b6d5e, _0x26135d, _0x4f0dbe, _0x3ec790, _0x5a2b87, _0x2d52f1, _0x41887b) {
            switch (_0x41887b) {
                case 0x2:
                    _0x47a9b7.pid === _0x4b6d5e && _0x47a9b7.getPlayer().pipe(0x4, _0x26135d.data, 0x0);
            }
        }
    },
    86: {
        'NAME': "LEVEL END WARP",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x43bf1b, _0x5cb9f8, _0x3de0f5, _0x44674c, _0x2888e5, _0x355fcd, _0x53b8e9, _0xc4dea7) {
            switch (_0xc4dea7) {
                case 0x0:
                    _0x43bf1b.pid === _0x5cb9f8 && _0x43bf1b.levelWarp(_0x3de0f5.data);
            }
        }
    },
    160: {
        'NAME': "FLAGPOLE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x59976b, _0x31e137, _0x4b42d8, _0xc56f80, _0x1036c6, _0x592649, _0x51f8a9, _0x4ac35a) {
            switch (_0x4ac35a) {
                case 0x0:
                    _0x59976b.pid === _0x31e137 && (_0x59976b = _0x59976b.getPlayer(), _0x59976b.pos.x >= _0x592649 && _0x59976b.pole(_0x26de58.make(_0x592649, _0x51f8a9)));
            }
        }
    },
    165: {
        'NAME': "VINE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0xbc2513, _0x4cf103, _0x4204b2, _0x13be17, _0x2b4eb4, _0x5da513, _0x3169d1, _0x50b1db) {
            switch (_0x50b1db) {
                case 0x0:
                    _0xbc2513.pid === _0x4cf103 && (_0xbc2513 = _0xbc2513.getPlayer(), _0xbc2513.pos.x >= _0x5da513 && _0xbc2513.pos.x <= _0x5da513 + 0x1 && _0xbc2513.vine(_0x26de58.make(_0x5da513, _0x3169d1), _0x4204b2.data));
            }
        }
    },
    240: {
        'NAME': "VOTE BLOCK",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x3a425b, _0x142e63, _0x2ee02b, _0x5613d0, _0xc41e0, _0x559fb3, _0x1337d2, _0x25ee29) {
            switch (_0x25ee29) {
                case 0x10:
                    _0x3a425b.pid === _0x142e63 && _0x3a425b.send({
                        'type': "g50"
                    });
                    var _0x28753a = 0x1801b;
                    _0x3a425b.world.getZone(_0x5613d0, _0xc41e0).replace(_0x559fb3, _0x1337d2, _0x28753a);
                    _0x3a425b.createObject(_0x260d28.ID, _0x5613d0, _0xc41e0, _0x26de58.make(_0x559fb3, _0x1337d2 + 0x1), [_0xdd5628.encode(_0x559fb3, _0x1337d2)]);
                    _0x41f345.GEN_FUNC.BUMP(_0x3a425b, _0x142e63, _0x2ee02b, _0x5613d0, _0xc41e0, _0x559fb3, _0x1337d2, _0x25ee29);
                    break;
                case 0x11:
                    _0x3a425b.pid === _0x142e63 && _0x3a425b.send({
                        'type': "g50"
                    }), _0x28753a = 0x1801b, _0x3a425b.world.getZone(_0x5613d0, _0xc41e0).replace(_0x559fb3, _0x1337d2, _0x28753a), _0x3a425b.createObject(_0x260d28.ID, _0x5613d0, _0xc41e0, _0x26de58.make(_0x559fb3, _0x1337d2 + 0x1), [_0xdd5628.encode(_0x559fb3, _0x1337d2)]), _0x41f345.GEN_FUNC.BUMP(_0x3a425b, _0x142e63, _0x2ee02b, _0x5613d0, _0xc41e0, _0x559fb3, _0x1337d2, _0x25ee29);
            }
        }
    }
};
var _0x2204de = {},
    _0x3e7c0c = {
        'DESIGNATION': 0x2,
        'BYTES': 0x3,
        'decode': function(_0x14326e) {
            return {
                'designation': _0x3e7c0c.DESIGNATION,
                'pid': _0x14326e[0x1] & 0xff | _0x14326e[0x0] << 0x8 & 0xff00
            };
        }
    },
    _0x591d63 = {
        'DESIGNATION': 0x10,
        'BYTES': 0x9,
        'encode': function(_0x145e47, _0x1e0468, _0x39dd6c) {
            return new Uint8Array([_0x591d63.DESIGNATION, _0x145e47, _0x1e0468, _0x39dd6c >> 0x18 & 0xff, _0x39dd6c >> 0x10 & 0xff, _0x39dd6c >> 0x8 & 0xff, _0x39dd6c & 0xff]);
        },
        'decode': function(_0x226871) {
            return {
                'designation': _0x591d63.DESIGNATION,
                'pid': _0x226871[0x1] & 0xff | _0x226871[0x0] << 0x8 & 0xff00,
                'level': _0x226871[0x2],
                'zone': _0x226871[0x3],
                'pos': _0x226871[0x7] & 0xff | _0x226871[0x6] << 0x8 & 0xff00 | _0x226871[0x5] << 0x10 & 0xff0000 | _0x226871[0x4] << 0x18 & 0xff0000
            };
        }
    },
    _0x4c5df7 = {
        'DESIGNATION': 0x11,
        'BYTES': 0x3,
        'encode': function() {
            return new Uint8Array([_0x4c5df7.DESIGNATION]);
        },
        'decode': function(_0x154b89) {
            return {
                'designation': _0x4c5df7.DESIGNATION,
                'pid': _0x154b89[0x1] & 0xff | _0x154b89[0x0] << 0x8 & 0xff00
            };
        }
    },
    _0x1ea040 = {
        'DESIGNATION': 0x12,
        'BYTES': 0xf,
        'encode': function(_0x341a4b, _0x398ad1, _0x2767b5, _0x20daef, _0x238a24) {
            _0x2767b5 = new Float32Array([_0x2767b5.x, _0x2767b5.y]);
            _0x2767b5 = new Uint8Array(_0x2767b5.buffer);
            return new Uint8Array([_0x1ea040.DESIGNATION, _0x341a4b, _0x398ad1, _0x2767b5[0x3], _0x2767b5[0x2], _0x2767b5[0x1], _0x2767b5[0x0], _0x2767b5[0x7], _0x2767b5[0x6], _0x2767b5[0x5], _0x2767b5[0x4], _0x20daef, _0x238a24]);
        },
        'decode': function(_0x12700f) {
            var _0x55dcf2 = new Uint8Array([_0x12700f[0x4], _0x12700f[0x5], _0x12700f[0x6], _0x12700f[0x7]]),
                _0x2d37d7 = new Uint8Array([_0x12700f[0x8], _0x12700f[0x9], _0x12700f[0xa], _0x12700f[0xb]]),
                _0x55dcf2 = new DataView(_0x55dcf2.buffer),
                _0x2d37d7 = new DataView(_0x2d37d7.buffer);
            return {
                'designation': _0x1ea040.DESIGNATION,
                'pid': _0x12700f[0x1] & 0xff | _0x12700f[0x0] << 0x8 & 0xff00,
                'level': _0x12700f[0x2],
                'zone': _0x12700f[0x3],
                'pos': _0x26de58.make(_0x55dcf2.getFloat32(0x0), _0x2d37d7.getFloat32(0x0)),
                'sprite': _0x12700f[0xc],
                'reverse': 0x0 !== _0x12700f[0xd]
            };
        }
    },
    _0x2ca693 = {
        'DESIGNATION': 0x13,
        'BYTES': 0x4,
        'encode': function(_0x687d34) {
            return new Uint8Array([_0x2ca693.DESIGNATION, _0x687d34]);
        },
        'decode': function(_0x5bb315) {
            return {
                'designation': _0x2ca693.DESIGNATION,
                'pid': _0x5bb315[0x1] & 0xff | _0x5bb315[0x0] << 0x8 & 0xff00,
                'type': _0x5bb315[0x2]
            };
        }
    },
    _0x4152f4 = {
        'DESIGNATION': 0x15,
        'BYTES': 0x3,
        'encode': function() {
            return new Uint8Array([_0x4152f4.DESIGNATION]);
        }
    },
    _0x2f5327 = {
        'DESIGNATION': 0x17,
        'BYTES': 0x5,
        'encode': function(_0x4ccd9) {
            return new Uint8Array([_0x2f5327.DESIGNATION, _0x4ccd9 >> 0x8 & 0xff, _0x4ccd9 & 0xff]);
        },
        'decode': function(_0x57b596) {
            return {
                'designation': _0x2f5327.DESIGNATION,
                'pid': _0x57b596[0x1] & 0xff | _0x57b596[0x0] << 0x8 & 0xff00,
                'killer': _0x57b596[0x3] & 0xff | _0x57b596[0x2] << 0x8 & 0xff00
            };
        }
    },
    _0x2656cf = {
        'DESIGNATION': 0x18,
        'BYTES': 0x5,
        'encode': function() {
            return new Uint8Array([_0x2656cf.DESIGNATION]);
        },
        'decode': function(_0x44dd97) {
            return {
                'designation': _0x2656cf.DESIGNATION,
                'pid': _0x44dd97[0x1] & 0xff | _0x44dd97[0x0] << 0x8 & 0xff00,
                'result': _0x44dd97[0x2],
                'extra': _0x44dd97[0x3]
            };
        }
    },
    _0x3bdaa9 = {
        'DESIGNATION': 0x19,
        'BYTES': 0x3,
        'encode': function() {
            return new Uint8Array([_0x3bdaa9.DESIGNATION]);
        }
    },
    _0x30e075 = {
        'DESIGNATION': 0x20,
        'BYTES': 0xa,
        'encode': function(_0x2dd0ce, _0x155841, _0x4593e8, _0x13b6fd) {
            return new Uint8Array([_0x30e075.DESIGNATION, _0x2dd0ce, _0x155841, _0x4593e8 >> 0x18 & 0xff, _0x4593e8 >> 0x10 & 0xff, _0x4593e8 >> 0x8 & 0xff, _0x4593e8 & 0xff, _0x13b6fd]);
        },
        'decode': function(_0x374b18) {
            return {
                'designation': _0x30e075.DESIGNATION,
                'pid': _0x374b18[0x1] & 0xff | _0x374b18[0x0] << 0x8 & 0xff00,
                'level': _0x374b18[0x2],
                'zone': _0x374b18[0x3],
                'oid': _0x374b18[0x7] & 0xff | _0x374b18[0x6] << 0x8 & 0xff00 | _0x374b18[0x5] << 0x10 & 0xff0000 | _0x374b18[0x4] << 0x18 & 0xff0000,
                'type': _0x374b18[0x8]
            };
        }
    },
    _0x231422 = {
        'DESIGNATION': 0x30,
        'BYTES': 0xa,
        'encode': function(_0x159c89, _0x10e6d5, _0x2bc6a8, _0x1646b0) {
            return new Uint8Array([_0x231422.DESIGNATION, _0x159c89, _0x10e6d5, _0x2bc6a8 >> 0x18 & 0xff, _0x2bc6a8 >> 0x10 & 0xff, _0x2bc6a8 >> 0x8 & 0xff, _0x2bc6a8 & 0xff, _0x1646b0]);
        },
        'decode': function(_0xd5c00b) {
            return {
                'designation': _0x231422.DESIGNATION,
                'pid': _0xd5c00b[0x1] & 0xff | _0xd5c00b[0x0] << 0x8 & 0xff00,
                'level': _0xd5c00b[0x2],
                'zone': _0xd5c00b[0x3],
                'pos': _0xdd5628.decode(_0xd5c00b[0x7] & 0xff | _0xd5c00b[0x6] << 0x8 & 0xff00 | _0xd5c00b[0x5] << 0x10 & 0xff0000 | _0xd5c00b[0x4] << 0x18 & 0xff0000),
                'type': _0xd5c00b[0x8]
            };
        }
    },
    _0x1be292 = function(_0x4cb4b7) {
        for (var _0x5bf35f = [], _0x1c3a21 = 0x0; _0x1c3a21 < _0x4cb4b7.length; _0x1c3a21++)
            for (var _0x1fd122 = 0x0; _0x1fd122 < _0x4cb4b7[_0x1c3a21].length; _0x1fd122++) _0x5bf35f.push(_0x4cb4b7[_0x1c3a21][_0x1fd122]);
        return new Uint8Array(_0x5bf35f);
    };
_0x2204de.decode = function(_0x2b3586) {
    for (var _0x2fd3e2 = [], _0x2cd429 = 0x0; _0x2cd429 < _0x2b3586.length;) switch (_0x2b3586.slice(_0x2cd429++, _0x2cd429)[0x0]) {
        case 0x2:
            _0x2fd3e2.push(_0x3e7c0c.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x3e7c0c.BYTES - 0x1)));
            break;
        case 0x10:
            _0x2fd3e2.push(_0x591d63.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x591d63.BYTES - 0x1)));
            break;
        case 0x11:
            _0x2fd3e2.push(_0x4c5df7.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x4c5df7.BYTES - 0x1)));
            break;
        case 0x12:
            _0x2fd3e2.push(_0x1ea040.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x1ea040.BYTES - 0x1)));
            break;
        case 0x13:
            _0x2fd3e2.push(_0x2ca693.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x2ca693.BYTES - 0x1)));
            break;
        case 0x17:
            _0x2fd3e2.push(_0x2f5327.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x2f5327.BYTES - 0x1)));
            break;
        case 0x18:
            _0x2fd3e2.push(_0x2656cf.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x2656cf.BYTES - 0x1)));
            break;
        case 0x20:
            _0x2fd3e2.push(_0x30e075.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x30e075.BYTES - 0x1)));
            break;
        case 0x30:
            _0x2fd3e2.push(_0x231422.decode(_0x2b3586.slice(_0x2cd429, _0x2cd429 += _0x231422.BYTES - 0x1)));
            break;
        default:
            return gameClient && gameClient.menu.warn.show("Error decoding binary data!"), _0x2fd3e2;
    }
    return _0x2fd3e2;
};
"use strict";
var _0x1badb6 = {};
_0x1badb6.intersection = function(_0x43a044, _0x59c3e0, _0x4eb9a3, _0x4741a0) {
    return _0x4eb9a3.x < _0x43a044.x + _0x59c3e0.x && _0x4eb9a3.x + _0x4741a0.x > _0x43a044.x && _0x4eb9a3.y < _0x43a044.y + _0x59c3e0.y && _0x4eb9a3.y + _0x4741a0.y > _0x43a044.y;
};
_0x1badb6.inside = function(_0x15c2a5, _0x1957cd, _0x4042e7) {
    return _0x1957cd.x < _0x15c2a5.x && _0x1957cd.x + _0x4042e7.x > _0x15c2a5.x && _0x1957cd.y < _0x15c2a5.y && _0x1957cd.y + _0x4042e7.y > _0x15c2a5.y;
};
"use strict";

function Menu() {
    this.body = document.getElementById("body");
    window.history.pushState({
        'html': "index.html",
        'pageTitle': "Mario Royale"
    }, '', '#');
    var screens = [{
        'id': "warn",
        'obj': new _0x155a4e()
    }, {
        'id': "error",
        'obj': new _0x471eac()
    }, {
        'id': "load",
        'obj': new _0x2e6c61()
    }, {
        'id': "disclaim",
        'obj': new _0x3f32bb()
    }, {
        'id': "main",
        'obj': new _0x47a659()
    }, {
        'id': "name",
        'obj': new NameScreen()
    }, {
        'id': "game",
        'obj': new _0x507387()
    }];
    this.menus = [];
    for (var i = 0x0; i < screens.length; i++) this.menus[i] = screens[i].obj, this[screens[i].id] = screens[i].obj;
    this.lastNav = '';
    var _0x55f79b = this;
    window.onpopstate = function(screens) {
        if (_0x55f79b[_0x55f79b.lastNav] && _0x55f79b[_0x55f79b.lastNav].onBack) _0x55f79b.onBack();
        else screens.state && "Mario Royale" !== screens.state.pageTitle ? (document.getElementById("content").innerHTML = screens.state.html, document.title = screens.state.pageTitle) : screens.state && "Mario Royale" === screens.state.pageTitle && window.history.back();
    };
    this.hideAll();
    this.background('c');
    this.body.style.display = "block";
}
Menu.prototype.hideAll = function() {
    for (var _0x5b448f = 0x1; _0x5b448f < this.menus.length; _0x5b448f++) this.menus[_0x5b448f].hide();
};
Menu.prototype.background = function(_0x36dd53) {
    if (_0x36dd53 !== this.bid) {
        switch (_0x36dd53) {
            case 'b':
                _0x36dd53 = "background-b";
                break;
            case 'c':
                _0x36dd53 = "background-c";
                break;
            default:
                _0x36dd53 = "background-a";
        }
        this.body.classList.remove("background-a");
        this.body.classList.remove("background-b");
        this.body.classList.remove("background-c");
        this.body.classList.add(_0x36dd53);
    }
};
Menu.prototype.navigation = function(_0x440c3d, _0x2cf5df) {
    this.lastNav = _0x440c3d;
    window.history.replaceState({
        'html': "index.html",
        'pageTitle': "Mario Royale"
    }, _0x2cf5df, '#' + _0x2cf5df);
};
Menu.prototype.onBack = function() {
    window.history.pushState({
        'html': "index.html",
        'pageTitle': "Mario Royale"
    }, '', '#');
    this[this.lastNav].onBack();
};
"use strict";

function _0x155a4e() {
    this.element = document.getElementById("warn");
    this.hide();
    this.timeout = void 0x0;
}
_0x155a4e.prototype.show = function(_0x281bdb) {
    this.element.innerHTML = "<img src='img/home/warn.png' class='warn-ico'/> " + _0x281bdb;
    console.warn("##WARN## " + _0x281bdb);
    this.timeout && clearTimeout(this.timeout);
    var _0x2893b1 = this.element;
    this.timeout = setTimeout(function() {
        _0x2893b1.style.display = "none";
    }, 0x1388);
    this.element.style.display = "block";
};
_0x155a4e.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x471eac() {
    this.element = document.getElementById("error");
    this.error = document.getElementById("error-message");
}
_0x471eac.prototype.show = function(_0x54efa4, _0x35729a, _0x56ef6b) {
    gameClient.net.close();
    gameClient.menu.hideAll();
    gameClient.menu.navigation("error", "error");
    gameClient.menu.background('b');
    this.error.innerHTML = _0x54efa4;
    _0x35729a && console.warn("##ERROR## " + _0x35729a);
    _0x56ef6b && console.warn("##TRACE## " + _0x56ef6b);
    this.element.style.display = "block";
};
_0x471eac.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x2e6c61() {
    this.element = document.getElementById("load");
}
_0x2e6c61.prototype.show = function() {
    gameClient.menu.hideAll();
    gameClient.menu.background('a');
    this.element.style.display = "block";
};
_0x2e6c61.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x3f32bb() {
    this.element = document.getElementById("disclaim");
    this.linkElement = document.getElementById("link");
}
_0x3f32bb.prototype.show = function(_0x2243c7) {
    gameClient.menu.hideAll();
    gameClient.menu.background('c');
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
_0x3f32bb.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
"use strict";

function _0x47a659() {
    this.element = document.getElementById("main");
    this.linkElement = document.getElementById("link");
    this.winElement = document.getElementById("win");
    this.launchBtn = document.getElementById("main-launch");
    this.number = document.getElementById("main-number");
    this.padLoop = void 0x0;
    var _0x2fdaa8 = this;
    this.launchBtn.onclick = function() {
        _0x2fdaa8.launch();
    };
}
_0x47a659.prototype.launch = function() {
    gameClient.menu.name.show();
};
_0x47a659.prototype.startPad = function() {
    var _0x3c5a9a = this,
        _0x2568a6 = isNaN(parseInt(Cookies.get("g_a"))) ? 0x0 : parseInt(Cookies.get("g_a")),
        _0x293832 = !0x1,
        _0x4736e8 = function() {
            var _0x7d296b;
            navigator && (_0x7d296b = navigator.getGamepads()[0x0]);
            _0x7d296b && !_0x7d296b.buttons[_0x2568a6].pressed && _0x293832 && _0x3c5a9a.launch();
            _0x7d296b && (_0x293832 = _0x7d296b.buttons[_0x2568a6].pressed);
            _0x3c5a9a.padLoop = setTimeout(_0x4736e8, 0x21);
        };
    _0x4736e8();
};
_0x47a659.prototype.show = function(_0x2c3db0) {
    gameClient.menu.hideAll();
    gameClient.menu.navigation("main", "main");
    gameClient.menu.background('a');
    _0x2c3db0 && (this.number.innerHTML = _0x2c3db0);
    _0x2c3db0 = Cookies.get("epic_gamer_moments");
    var deaths = Cookies.get("sad_gamer_moments"),
        _0x2d00b0 = Cookies.get("heated_gamer_moments"),
        _0x3d5556 = Cookies.get("dosh");
    this.winElement.style.display = "block";
    this.winElement.innerHTML = "Wins x" + (_0x2c3db0 ? _0x2c3db0 : '0') + " <span class='death'>Deaths x" + (deaths ? deaths : '0') + "</span> <span class='kill'>Kills x" + (_0x2d00b0 ? _0x2d00b0 : '0') + "</span> <span class='kill'>Coins x" + (_0x3d5556 ? _0x3d5556 : '0') + "</span>";
    this.startPad();
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
_0x47a659.prototype.hide = function() {
    this.padLoop && clearTimeout(this.padLoop);
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
"use strict";

function NameScreen() {
    this.element = document.getElementById("name");
    this.linkElement = document.getElementById("link");
    this.nameInput = document.getElementById("name-input");
    this.teamInput = document.getElementById("team-input");
    this.isPrivate = false;
    this.privateBtn = document.getElementById("name-private");
    this.launchBtn = document.getElementById("name-launch");
    this.padLoop = void 0x0;
    var nameScreen = this;
    this.launchBtn.onclick = function() {
        nameScreen.launch();
    };
    this.teamInput.onkeyup = function() {
        if (nameScreen.teamInput.value.trim() === "" && nameScreen.isPrivate) {
            nameScreen.isPrivate = false;
            nameScreen.updPrivateBtn();
        }
    }
    this.privateBtn.onclick = function() {
        if (nameScreen.teamInput.value.trim() === "")
            return;
        nameScreen.isPrivate = !nameScreen.isPrivate;
        nameScreen.updPrivateBtn();
    };
};

NameScreen.prototype.updPrivateBtn = function() {
    this.privateBtn.innerText = "["+(this.isPrivate?'X':' ')+']Private Room';
}

NameScreen.prototype.launch = function() {
    Cookies.set("name", this.nameInput.value, {
        'expires': 0x1e
    });
    Cookies.set("team", this.teamInput.value, {
        'expires': 0x1e
    });
    Cookies.set("priv", this.isPrivate, {
        'expires': 0x1e
    });
    if (gameClient.audioElement !== undefined)
        gameClient.audioElement.pause();
    gameClient.join(this.nameInput.value, this.teamInput.value, this.isPrivate);
};
NameScreen.prototype.startPad = function() {
    var _0x3bcc0f = this,
        _0x87dd6d = isNaN(parseInt(Cookies.get("g_a"))) ? 0x0 : parseInt(Cookies.get("g_a")),
        _0xfd3c5a = !0x1,
        _0x4a0646 = function() {
            var _0x52b682;
            navigator && (_0x52b682 = navigator.getGamepads()[0x0]);
            _0x52b682 && !_0x52b682.buttons[_0x87dd6d].pressed && _0xfd3c5a && _0x3bcc0f.launch();
            _0x52b682 && (_0xfd3c5a = _0x52b682.buttons[_0x87dd6d].pressed);
            _0x3bcc0f.padLoop = setTimeout(_0x4a0646, 0x21);
        };
    _0x4a0646();
};
NameScreen.prototype.show = function() {
    gameClient.menu.hideAll();
    gameClient.menu.navigation("name", "name");
    gameClient.menu.background('a');
    var savedName = Cookies.get("name"),
        savedTeam = Cookies.get("team"),
        savedPriv = Cookies.get("priv");
    this.nameInput.value = savedName ? savedName : '';
    this.teamInput.value = savedTeam ? savedTeam : '';
    this.isPrivate = savedPriv ? (savedPriv == "true") : false;
    this.updPrivateBtn();
    this.startPad();
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
NameScreen.prototype.hide = function() {
    this.padLoop && clearTimeout(this.padLoop);
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
NameScreen.prototype.onBack = function() {
    gameClient.menu.main.show();
};
"use strict";

function _0x507387() {
    this.element = document.getElementById("game");
}
_0x507387.prototype.show = function() {
    gameClient.menu.hideAll();
    gameClient.menu.navigation("game", "game");
    gameClient.menu.background('c');
    this.element.style.display = "block";
};
_0x507387.prototype.hide = function() {
    this.element.style.display = "none";
};
_0x507387.prototype.onBack = function() {
    gameClient.close();
};
"use strict";

function Net() {}
Net.prototype.connected = function() {
    return void 0x0 !== this.webSocket && this.webSocket.readyState !== WebSocket.CLOSED;
};
Net.prototype.connect = function(name, team, priv) {
    var wsServer = WEBSOCKET_SERVER;//window.location.host;
    this.prefName = name;
    this.prefTeam = team;
    this.isPrivate = priv;
    var net = this;
    this.connected() ? gameClient.menu.error.show("Connection already open. State error.") : (
        this.webSocket = new WebSocket("ws://" + wsServer + "/royale/ws"),
        this.webSocket.binaryType = "arraybuffer", 
        this.webSocket.onopen = function(name) {
        "open" !== name.type && gameClient.menu.error.show("Error. WS open event has unexpected result.");
    }, this.webSocket.onmessage = function(name) {
        name.data instanceof ArrayBuffer ? net.handleBinary(new Uint8Array(name.data)) : net.handlePacket(JSON.parse(name.data));
    }, this.webSocket.onclose = function(name) {
        net.webSocket = void 0x0;
        gameClient.menu.error.show("Connection Interrupted");
    });
};
Net.prototype.handlePacket = function(data) {
    if (void 0x0 === this.state || !this.state.handlePacket(data)) switch (data.type) {
        case "s00":
            this.setState(data.state);
            break;
        case "s01":
            this.handleBlob(data.packets);
            break;
        case "s02":
            break;
        case "x00":
            gameClient.menu.error.show("Server Exception", data.message);
            break;
        case "x01":
            gameClient.menu.error.show("Server Exception", data.message, data.trace);
            break;
        default:
            gameClient.menu.error.show("Recieved invalid packet type: " + data.type, JSON.stringify(data));
    }
};
Net.prototype.handleBinary = function(data) {
    this.state.handleBinary(data);
};
Net.prototype.handleBlob = function(packets) {
    for (var i = 0x0; i < packets.length; i++) this.handlePacket(packets[i]);
};
Net.prototype.setState = function(newState) {
    void 0x0 !== this.state && this.state.destroy();
    switch (newState) {
        case 'l':
            this.state = new LobbyState();
            break;
        case 'g':
            this.state = new GameState();
            break;
        default:
            gameClient.menu.error.show("Received invalid state ID: " + newState);
            return;
    }
    this.state.ready();
};
Net.prototype.send = function(_0x2756bb) {
    this.webSocket.send(JSON.stringify(_0x2756bb));
};
Net.prototype.sendBinary = function(_0x25450f) {
    this.webSocket.send(_0x25450f.buffer);
};
Net.prototype.close = function() {
    void 0x0 !== this.webSocket && this.webSocket.close();
    gameClient.ingame() && gameClient.game.destroy();
};
"use strict";

function LobbyState() {}
LobbyState.prototype.handlePacket = function(_0x47468f) {
    switch (_0x47468f.type) {
        case "l01":
            return this.loggedIn(_0x47468f), !0x0;
        default:
            return !0x1;
    }
};
LobbyState.prototype.handleBinary = function(_0x6d4bf6) {
    gameClient.menu.warn.show("Recieved unexpected binary data!");
};
LobbyState.prototype.ready = function() {
    this.send({
        'type': "l00",
        'name': gameClient.net.prefName,
        'team': gameClient.net.prefTeam,
        'private': gameClient.net.isPrivate
    });
};
LobbyState.prototype.loggedIn = function(_0x2678ae) {
    gameClient.net.name = _0x2678ae.name;
    gameClient.net.sid = _0x2678ae.sid;
    console.log("Logged in: " + _0x2678ae.name + " :: " + _0x2678ae.team + " // " + _0x2678ae.sid);
};
LobbyState.prototype.send = function(_0x21f464) {
    gameClient.net.send(_0x21f464);
};
LobbyState.prototype.type = function() {
    return 'l';
};
LobbyState.prototype.destroy = function() {};
"use strict";

function GameState() {
    this.pingOut = !0x1;
    this.pingLast = 0x0;
    this.pingFrame = 0x5a;
}
GameState.prototype.handlePacket = function(data) {
    switch (data.type) {
        case "g01":
            return this.load(data), !0x0;
        case "g06":
            return this.globalWarn(data), !0x0;
        case "g21":
            return this.recievePing(data), !0x0;
        default:
            return gameClient.ingame() ? gameClient.game.handlePacket(data) : !0x1;
    }
};
GameState.prototype.handleBinary = function(data) {
    gameClient.ingame() && gameClient.game.handleBinary(data);
};
GameState.prototype.ready = function() {
    this.send({
        'type': "g00"
    });
};
GameState.prototype.load = function(data) {
    var gameState = this;
    $.ajax({
        'url': "http://" + window.location.host + "/royale/game/" + data.game + "?v=" + VERSION,    //get level data
        'type': "GET",
        'timeout': 0x1388,
        'success': function(data) {
            gameClient.load(data);
            gameState.send({
                'type': "g03"
            });
        },
        'error': function() {
            gameClient.menu.error.show("Server returned FNF(404) for game file: " + data.game);
        }
    });
};
GameState.prototype.globalWarn = function(_0xba301c) {
    gameClient.menu.warn.show(_0xba301c.message);
};
GameState.prototype.sendPing = function() {
    var _0x1ac5e9 = _0x33a76c.time.now();
    this.pingOut && 0x3e7 > this.pingLast - _0x1ac5e9 || (this.pingOut && (gameClient.net.ping = 0x3e7), this.send({
        'type': "g21",
        'delta': _0x1ac5e9
    }), this.pingOut = !0x0);
};
GameState.prototype.recievePing = function(_0x5bdfa8) {
    var _0x3162e8 = _0x33a76c.time.now();
    gameClient.net.ping = _0x3162e8 - _0x5bdfa8.delta;
    this.pingOut = !0x1;
};
GameState.prototype.send = function(_0x32a3b0) {
    gameClient.net.send(_0x32a3b0);
};
GameState.prototype.type = function() {
    return 'g';
};
GameState.prototype.destroy = function() {};
"use strict";

function _0x3da6cc(_0x275bda, _0x5baccc, _0x5dc237, _0x40e564) {
    this.game = _0x275bda;
    this.level = _0x5baccc;
    this.zone = _0x5dc237;
    this.pos = _0x40e564;
    this.sprite = this.state = void 0x0;
    this.garbage = this.dead = this.reverse = !0x1;
    this.sounds = [];
}
_0x3da6cc.ASYNC = !0x0;
_0x3da6cc.ID = 0x0;
_0x3da6cc.prototype.update = function(_0x2f28f9) {};
_0x3da6cc.prototype.step = function() {};
_0x3da6cc.prototype.sound = function() {
    for (var _0x3b494f = 0x0; _0x3b494f < this.sounds.length; _0x3b494f++) {
        var _0x1a7bf8 = this.sounds[_0x3b494f];
        _0x1a7bf8.done() ? this.sounds.splice(_0x3b494f--, 0x1) : _0x1a7bf8.position(this.pos);
    }
};
_0x3da6cc.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
_0x3da6cc.prototype.destroy = function() {
    this.garbage = this.dead = !0x0;
};
_0x3da6cc.prototype.isTangible = function() {
    return !this.dead && !this.disabled && this.dim;
};
_0x3da6cc.prototype.draw = function() {};
_0x3da6cc.prototype.play = function(_0x5c61d3, _0x1cd15d, _0x457912) {
    var _0x2fc4c1 = this.game.getZone();
    if (this.zone === _0x2fc4c1.id && this.level === _0x2fc4c1.level) return _0x5c61d3 = this.game.audio.getSpatialAudio(_0x5c61d3, _0x1cd15d, _0x457912, "effect"), _0x5c61d3.play(this.pos), this.sounds.push(_0x5c61d3), _0x5c61d3;
};
_0x3da6cc.OBJECT_LIST = [];
_0x3da6cc.REGISTER_OBJECT = function(_0x4058c1) {
    _0x3da6cc.OBJECT_LIST.push(_0x4058c1);
};
_0x3da6cc.OBJECT = function(_0x42193c) {
    for (var _0x3e8d48 = 0x0; _0x3e8d48 < _0x3da6cc.OBJECT_LIST.length; _0x3e8d48++) {
        var _0x2f6b43 = _0x3da6cc.OBJECT_LIST[_0x3e8d48];
        if (_0x2f6b43.ID === _0x42193c) return _0x2f6b43;
    }
    gameClient.menu.warn.show("Invalid Object Class ID: " + _0x42193c);
};
"use strict";

function PlayerObject(_0x2bc274, _0x3817eb, _0x2345aa, _0x4df2ca, _0x3b448f) {
    _0x3da6cc.call(this, _0x2bc274, _0x3817eb, _0x2345aa, _0x4df2ca);
    this.pid = _0x3b448f;
    this.anim = 0x0;
    this.reverse = !0x1;
    this.deadTimer = this.deadFreezeTimer = this.arrowFade = 0x0;
    this.lastPos = this.pos;
    this.dim = _0x26de58.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.jumping = -0x1;
    this.grounded = this.isSpring = this.isBounce = !0x1;
    this.name = void 0x0;
    this.starTimer = this.power = 0x0;
    this.starMusic = void 0x0;
    this.tfmTimer = this.damageTimer = 0x0;
    this.tfmTarget = -0x1;
    this.pipeWarp = void 0x0;
    this.pipeTimer = 0x0;
    this.pipeExt = this.pipeDir = -0x1;
    this.poleTimer = this.pipeDelayLength = this.pipeDelay = 0x0;
    this.poleSound = this.poleWait = !0x1;
    this.vineWarp = void 0x0;
    this.attackCharge = PlayerObject.MAX_CHARGE;
    this.attackTimer = 0x0;
    this.autoTarget = void 0x0;
    this.btnD = [0x0, 0x0];
    this.btnBde = this.btnBg = this.btnB = this.btnA = !0x1;
    this.setState(PlayerObject.SNAME.STAND);
}
PlayerObject.ASYNC = !0x1;
PlayerObject.ID = 0x1;
PlayerObject.NAME = "PLAYER";
PlayerObject.ANIMATION_RATE = 0x3;
PlayerObject.DIM_OFFSET = _0x26de58.make(-0.05, 0x0);
PlayerObject.DEAD_FREEZE_TIME = 0x7;
PlayerObject.DEAD_TIME = 0x46;
PlayerObject.DEAD_UP_FORCE = 0.65;
PlayerObject.RUN_SPEED_MAX = 0.315;
PlayerObject.MOVE_SPEED_MAX = 0.215;
PlayerObject.MOVE_SPEED_ACCEL = 0.0125;
PlayerObject.MOVE_SPEED_DECEL = 0.0225;
PlayerObject.MOVE_SPEED_ACCEL_AIR = 0.0025;
PlayerObject.STUCK_SLIDE_SPEED = 0.08;
PlayerObject.FALL_SPEED_MAX = 0.45;
PlayerObject.FALL_SPEED_ACCEL = 0.085;
PlayerObject.BOUNCE_LENGTH_MIN = 0x1;
PlayerObject.SPRING_LENGTH_MIN = 0x5;
PlayerObject.SPRING_LENGTH_MAX = 0xe;
PlayerObject.JUMP_LENGTH_MIN = 0x3;
PlayerObject.JUMP_LENGTH_MAX = 0x7;
PlayerObject.JUMP_SPEED_INC_THRESHOLD = [0.1, 0.2, 0.25];
PlayerObject.JUMP_DECEL = 0.005;
PlayerObject.BLOCK_BUMP_THRESHOLD = 0.12;
PlayerObject.POWER_INDEX_SIZE = 0x20;
PlayerObject.GENERIC_INDEX = 0x60;
PlayerObject.DAMAGE_TIME = 0x2d;
PlayerObject.TRANSFORM_TIME = 0x12;
PlayerObject.TRANSFORM_ANIMATION_RATE = 0x2;
PlayerObject.STAR_LENGTH = 0x168;
PlayerObject.PROJ_OFFSET = _0x26de58.make(0.7, 1.1);
PlayerObject.MAX_CHARGE = 0x3c;
PlayerObject.ATTACK_DELAY = 0x7;
PlayerObject.ATTACK_CHARGE = 0x19;
PlayerObject.ATTACK_ANIM_LENGTH = 0x3;
PlayerObject.PIPE_TIME = 0x1e;
PlayerObject.PIPE_SPEED = 0.06;
PlayerObject.PIPE_EXT_OFFSET = _0x26de58.make(0.5, 0x0);
PlayerObject.WEED_EAT_RADIUS = 0x3;
PlayerObject.POLE_DELAY = 0xf;
PlayerObject.POLE_SLIDE_SPEED = 0.15;
PlayerObject.LEVEL_END_MOVE_OFF = _0x26de58.make(0xa, 0x0);
PlayerObject.CLIMB_SPEED = 0.125;
PlayerObject.PLATFORM_SNAP_DIST = 0.15;
PlayerObject.ARROW_SPRITE = 0xfd;
PlayerObject.ARROW_TEXT = "YOU";
PlayerObject.ARROW_OFFSET = _0x26de58.make(0x0, 0.1);
PlayerObject.TEXT_OFFSET = _0x26de58.make(0x0, 0.55);
PlayerObject.TEXT_SIZE = 0.65;
PlayerObject.TEXT_COLOR = "#FFFFFF";
PlayerObject.ARROW_RAD_IN = 0x3;
PlayerObject.ARROW_RAD_OUT = 0x7;
PlayerObject.ARROW_THRESHOLD_MIN = 0x4;
PlayerObject.ARROW_THRESHOLD_MAX = 0x6;
PlayerObject.TEAM_OFFSET = _0x26de58.make(0x0, 0x0);
PlayerObject.TEAM_SIZE = 0.3;
PlayerObject.TEAM_COLOR = "rgba(255,255,255,0.75)";
PlayerObject.SPRITE = {};
PlayerObject.SPRITE_LIST = [{
    'NAME': "S_STAND",
    'ID': 0x0,
    'INDEX': 0xd
}, {
    'NAME': "S_RUN0",
    'ID': 0x1,
    'INDEX': 0xa
}, {
    'NAME': "S_RUN1",
    'ID': 0x2,
    'INDEX': 0xb
}, {
    'NAME': "S_RUN2",
    'ID': 0x3,
    'INDEX': 0xc
}, {
    'NAME': "S_SLIDE",
    'ID': 0x4,
    'INDEX': 0x9
}, {
    'NAME': "S_FALL",
    'ID': 0x5,
    'INDEX': 0x8
}, {
    'NAME': "S_CLIMB0",
    'ID': 0x6,
    'INDEX': 0x6
}, {
    'NAME': "S_CLIMB1",
    'ID': 0x7,
    'INDEX': 0x7
}, {
    'NAME': "B_STAND",
    'ID': 0x20,
    'INDEX': [
        [0x2d],
        [0x1d]
    ]
}, {
    'NAME': "B_DOWN",
    'ID': 0x21,
    'INDEX': [
        [0x2c],
        [0x1c]
    ]
}, {
    'NAME': "B_RUN0",
    'ID': 0x22,
    'INDEX': [
        [0x29],
        [0x19]
    ]
}, {
    'NAME': "B_RUN1",
    'ID': 0x23,
    'INDEX': [
        [0x2a],
        [0x1a]
    ]
}, {
    'NAME': "B_RUN2",
    'ID': 0x24,
    'INDEX': [
        [0x2b],
        [0x1b]
    ]
}, {
    'NAME': "B_SLIDE",
    'ID': 0x25,
    'INDEX': [
        [0x28],
        [0x18]
    ]
}, {
    'NAME': "B_FALL",
    'ID': 0x26,
    'INDEX': [
        [0x27],
        [0x17]
    ]
}, {
    'NAME': "B_CLIMB0",
    'ID': 0x27,
    'INDEX': [
        [0x25],
        [0x15]
    ]
}, {
    'NAME': "B_CLIMB1",
    'ID': 0x28,
    'INDEX': [
        [0x26],
        [0x16]
    ]
}, {
    'NAME': "B_TRANSFORM",
    'ID': 0x29,
    'INDEX': [
        [0x2e],
        [0x1e]
    ]
}, {
    'NAME': "F_STAND",
    'ID': 0x40,
    'INDEX': [
        [0x4c, 0x4b],
        [0x3c, 0x3b]
    ]
}, {
    'NAME': "F_DOWN",
    'ID': 0x41,
    'INDEX': [
        [0x4a],
        [0x3a]
    ]
}, {
    'NAME': "F_RUN0",
    'ID': 0x42,
    'INDEX': [
        [0x45, 0x44],
        [0x35, 0x34]
    ]
}, {
    'NAME': "F_RUN1",
    'ID': 0x43,
    'INDEX': [
        [0x47, 0x46],
        [0x37, 0x36]
    ]
}, {
    'NAME': "F_RUN2",
    'ID': 0x44,
    'INDEX': [
        [0x49, 0x48],
        [0x39, 0x38]
    ]
}, {
    'NAME': "F_SLIDE",
    'ID': 0x45,
    'INDEX': [
        [0x43, 0x42],
        [0x33, 0x32]
    ]
}, {
    'NAME': "F_FALL",
    'ID': 0x46,
    'INDEX': [
        [0x41, 0x40],
        [0x31, 0x30]
    ]
}, {
    'NAME': "F_CLIMB0",
    'ID': 0x47,
    'INDEX': [
        [0x23],
        [0x13]
    ]
}, {
    'NAME': "F_CLIMB1",
    'ID': 0x48,
    'INDEX': [
        [0x24],
        [0x14]
    ]
}, {
    'NAME': "F_ATTACK",
    'ID': 0x49,
    'INDEX': [
        [0x4f, 0x4e],
        [0x3f, 0x3e]
    ]
}, {
    'NAME': "F_TRANSFORM",
    'ID': 0x50,
    'INDEX': [
        [0x4d],
        [0x3d]
    ]
}, {
    'NAME': "G_DEAD",
    'ID': 0x60,
    'INDEX': 0x0
}, {
    'NAME': "G_HIDE",
    'ID': 0x70,
    'INDEX': 0xe
}];
for (var _0x1bec55 = 0x0; _0x1bec55 < PlayerObject.SPRITE_LIST.length; _0x1bec55++) PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x1bec55].NAME] = PlayerObject.SPRITE_LIST[_0x1bec55], PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x1bec55].ID] = PlayerObject.SPRITE_LIST[_0x1bec55];
PlayerObject.SNAME = {};
PlayerObject.SNAME.STAND = "STAND";
PlayerObject.SNAME.DOWN = "DOWN";
PlayerObject.SNAME.RUN = "RUN";
PlayerObject.SNAME.SLIDE = "SLIDE";
PlayerObject.SNAME.FALL = "FALL";
PlayerObject.SNAME.POLE = "POLE";
PlayerObject.SNAME.CLIMB = "CLIMB";
PlayerObject.SNAME.ATTACK = "ATTACK";
PlayerObject.SNAME.TRANSFORM = "TRANSFORM";
PlayerObject.SNAME.DEAD = "DEAD";
PlayerObject.SNAME.HIDE = "HIDE";
PlayerObject.SNAME.GHOST = "GHOST";
PlayerObject.SNAME.DEADGHOST = "DEADGHOST";
var _0x4a74c1 = _0x26de58.make(0.9, 0.95),
    _0x124f5a = _0x26de58.make(0.9, 1.9);
PlayerObject.STATE = [{
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x0,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x1,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x2,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_RUN2, PlayerObject.SPRITE.S_RUN1, PlayerObject.SPRITE.S_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x3,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x4,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_FALL]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x5,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x6,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x7,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.S_CLIMB0, PlayerObject.SPRITE.S_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x20,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x21,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.B_DOWN]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x22,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_RUN2, PlayerObject.SPRITE.B_RUN1, PlayerObject.SPRITE.B_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x23,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x24,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_FALL]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x25,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.B_TRANSFORM]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x26,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_CLIMB0]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x27,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.B_CLIMB0, PlayerObject.SPRITE.B_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x40,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x41,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.F_DOWN]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x42,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_RUN2, PlayerObject.SPRITE.F_RUN1, PlayerObject.SPRITE.F_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x43,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x44,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_FALL]
}, {
    'NAME': PlayerObject.SNAME.ATTACK,
    'ID': 0x45,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_ATTACK]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x46,
    'DIM': _0x4a74c1,
    'SPRITE': [PlayerObject.SPRITE.F_TRANSFORM]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x47,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_CLIMB0]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x48,
    'DIM': _0x124f5a,
    'SPRITE': [PlayerObject.SPRITE.F_CLIMB0, PlayerObject.SPRITE.F_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.DEAD,
    'DIM': _0x4a74c1,
    'ID': 0x60,
    'SPRITE': [PlayerObject.SPRITE.G_DEAD]
}, {
    'NAME': PlayerObject.SNAME.HIDE,
    'DIM': _0x4a74c1,
    'ID': 0x70,
    'SPRITE': [PlayerObject.SPRITE.G_HIDE]
}, {
    'NAME': PlayerObject.SNAME.GHOST,
    'DIM': _0x4a74c1,
    'ID': 0xff,
    'SPRITE': []
}, {
    'NAME': PlayerObject.SNAME.DEADGHOST,
    'DIM': _0x4a74c1,
    'ID': 0xfe,
    'SPRITE': [PlayerObject.SPRITE.G_DEAD]
}];
PlayerObject.prototype.update = function(_0x60d16c) {
    this.dead || this.garbage || (this.setState(PlayerObject.SNAME.GHOST), this.level = _0x60d16c.level, this.zone = _0x60d16c.zone, this.pos = _0x60d16c.pos, this.sprite = PlayerObject.SPRITE[_0x60d16c.sprite], this.reverse = _0x60d16c.reverse);
};
PlayerObject.prototype.trigger = function(_0x121f75) {
    switch (_0x121f75) {
        case 0x1:
            this.attack();
            break;
        case 0x2:
            this.star();
    }
};
PlayerObject.prototype.step = function() {
    0x0 < this.starTimer ? this.starTimer-- : this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0);
    if (this.isState(PlayerObject.SNAME.GHOST)) this.sound();
    else if (!this.isState(PlayerObject.SNAME.HIDE))
        if (this.isState(PlayerObject.SNAME.POLE))
            if (0x0 < this.poleTimer && !this.poleWait) this.poleTimer--;
            else {
                this.poleSound || (this.poleSound = !0x0, this.play("sfx/flagpole.wav", 0x1, 0x0));
                if (!this.poleWait)
                    if (0x0 >= this.poleTimer && this.autoTarget) this.setState(PlayerObject.SNAME.STAND);
                    else {
                        for (var _0x4d4e5b = _0x26de58.add(this.pos, _0x26de58.make(0x0, -0.15)), _0x280236 = _0x26de58.make(this.pos.x, this.pos.y - 0.15), _0x191ffc = _0x26de58.make(this.dim.x, this.dim.y + 0.15), _0x280236 = this.game.world.getZone(this.level, this.zone).getTiles(_0x280236, _0x191ffc), _0x191ffc = _0x26de58.make(0x1, 0x1), _0x1f539b = !0x1, _0x5a99db = 0x0; _0x5a99db < _0x280236.length; _0x5a99db++) {
                            var _0x4eb640 = _0x280236[_0x5a99db];
                            if (_0x1badb6.intersection(_0x4eb640.pos, _0x191ffc, _0x4d4e5b, this.dim) && _0x4eb640.definition.COLLIDE) {
                                _0x1f539b = !0x0;
                                break;
                            }
                        }
                        _0x1f539b ? (this.poleTimer = 0xf, this.autoTarget = _0x26de58.add(_0x4d4e5b, PlayerObject.LEVEL_END_MOVE_OFF), this.poleWait = !0x0) : this.pos = _0x4d4e5b;
                    } _0x4d4e5b = this.game.getFlag(this.level, this.zone);
                _0x4d4e5b.pos.y - 0.15 >= this.pos.y ? _0x4d4e5b.pos.y -= 0.15 : (_0x4d4e5b.pos.y = this.pos.y, this.poleWait = !0x1);
            }
    else if (this.isState(PlayerObject.SNAME.RUN) ? this.anim += Math.max(0.5, Math.abs(0x5 * this.moveSpeed)) : this.anim++, this.sprite = this.state.SPRITE[parseInt(parseInt(this.anim) / PlayerObject.ANIMATION_RATE) % this.state.SPRITE.length], this.isState(PlayerObject.SNAME.CLIMB)) this.pos.y += PlayerObject.CLIMB_SPEED, this.pos.y >= this.game.world.getZone(this.level, this.zone).dimensions().y && (this.warp(this.vineWarp), this.setState(PlayerObject.SNAME.FALL));
    else if (this.isState(PlayerObject.SNAME.DEAD) || this.isState(PlayerObject.SNAME.DEADGHOST)) 0x0 < this.deadFreezeTimer ? this.deadFreezeTimer-- : 0x0 < this.deadTimer ? (this.deadTimer--, this.pos.y += this.fallSpeed, this.fallSpeed = Math.max(this.fallSpeed - 0.085, -0.45)) : this.destroy();
    else if (this.isState(PlayerObject.SNAME.TRANSFORM))
        if (0x0 < --this.tfmTimer) switch (_0x4d4e5b = parseInt(this.anim / PlayerObject.TRANSFORM_ANIMATION_RATE) % 0x3, _0x280236 = this.power > this.tfmTarget ? this.power : this.tfmTarget, _0x4d4e5b) {
            case 0x0:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).SPRITE[0x0];
                break;
            case 0x1:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.TRANSFORM, _0x280236).SPRITE[0x0];
                break;
            case 0x2:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.tfmTarget).SPRITE[0x0];
        } else this.power = this.tfmTarget, this.tfmTarget = -0x1, this.setState(PlayerObject.SNAME.STAND), this.collisionTest(this.pos, this.dim) && this.setState(PlayerObject.SNAME.DOWN), this.damageTimer = PlayerObject.DAMAGE_TIME;
        else if (0x0 < this.pipeDelay) this.pipeDelay--;
    else if (0x0 < this.pipeTimer && 0x0 >= this.pipeDelay) {
        0x1e <= this.pipeTimer && this.play("sfx/pipe.wav", 0x1, 0.04);
        switch (this.pipeDir) {
            case 0x1:
                this.pos.y += 0.06;
                break;
            case 0x2:
                this.pos.y -= 0.06;
                break;
            case 0x3:
                this.pos.x -= 0.06;
                break;
            case 0x4:
                this.pos.x += 0.06;
        }
        0x1 === --this.pipeTimer && this.pipeWarp && (this.pipeDelay = this.pipeDelayLength);
        if (0x0 >= this.pipeTimer && this.pipeWarp) {
            this.warp(this.pipeWarp);
            this.weedeat();
            this.pipeWarp = void 0x0;
            switch (this.pipeExt) {
                case 0x1:
                    this.pos.y -= 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = _0x26de58.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 0x2:
                    this.pos.y += 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = _0x26de58.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 0x3:
                    this.pos.x -= 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                case 0x4:
                    this.pos.x += 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                default:
                    return;
            }
            this.pipeTimer = 0x1e;
            this.pipeDir = this.pipeExt;
            this.pipeDelay = this.pipeDelayLength;
        }
    } else this.lastPos = this.pos, 0x0 < this.damageTimer && this.damageTimer--, this.attackCharge < PlayerObject.MAX_CHARGE && this.attackCharge++, 0x0 < this.attackTimer && this.attackTimer--, this.autoTarget && this.autoMove(), this.control(), this.physics(), this.interaction(), this.arrow(), this.sound(), 0x0 > this.pos.y && this.kill();
};
PlayerObject.prototype.input = function(_0x17fbef, _0x49fbc5, _0xb14c91) {
    this.btnD = _0x17fbef;
    this.btnA = _0x49fbc5;
    this.btnB = _0xb14c91;
};
PlayerObject.prototype.autoMove = function() {
    this.btnD = [0x0, 0x0];
    this.btnB = this.btnA = !0x1;
    0.1 <= Math.abs(this.pos.x - this.autoTarget.x) ? this.btnD = [0x0 >= this.pos.x - this.autoTarget.x ? 0x1 : -0x1, 0x0] : 0.01 > Math.abs(this.moveSpeed) && (this.btnA = -0.5 > this.pos.y - this.autoTarget.y);
};
PlayerObject.prototype.control = function() {
    this.grounded && (this.btnBg = this.btnB);
    if (this.isState(PlayerObject.SNAME.DOWN) && this.collisionTest(this.pos, this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).DIM)) - 0x1 !== this.btnD[0x1] && (this.moveSpeed = 0.5 * (this.moveSpeed + PlayerObject.STUCK_SLIDE_SPEED)), this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0x0);
    else {
        0x0 !== this.btnD[0x0] ? (0.01 < Math.abs(this.moveSpeed) && !(0x0 <= this.btnD[0x0] ^ 0x0 > this.moveSpeed) ? (this.moveSpeed += PlayerObject.MOVE_SPEED_DECEL * this.btnD[0x0], this.setState(PlayerObject.SNAME.SLIDE)) : (this.moveSpeed = this.btnD[0x0] * Math.min(Math.abs(this.moveSpeed) + 0.0125, this.btnBg ? 0.315 : 0.215), this.setState(PlayerObject.SNAME.RUN)), this.grounded && (this.reverse = 0x0 <= this.btnD[0x0])) : (0.01 < Math.abs(this.moveSpeed) ? (this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0x0), this.setState(PlayerObject.SNAME.RUN)) : (this.moveSpeed = 0x0, this.setState(PlayerObject.SNAME.STAND)), -0x1 === this.btnD[0x1] && this.setState(PlayerObject.SNAME.DOWN));
        for (var _0x41484b = this.isSpring ? 0xe : 0x7, _0x39fd87 = this.isSpring ? PlayerObject.SPRING_LENGTH_MIN : this.isBounce ? PlayerObject.BOUNCE_LENGTH_MIN : PlayerObject.JUMP_LENGTH_MIN, _0x4f2d3c = 0x0; _0x4f2d3c < PlayerObject.JUMP_SPEED_INC_THRESHOLD.length && Math.abs(this.moveSpeed) >= PlayerObject.JUMP_SPEED_INC_THRESHOLD[_0x4f2d3c]; _0x4f2d3c++) _0x41484b++;
        this.btnA ? (this.grounded && (this.jumping = 0x0, this.play(0x0 < this.power ? "sfx/jump1.wav" : "sfx/jump0.wav", 0.7, 0.04)), this.jumping > _0x41484b && (this.jumping = -0x1)) : this.jumping > _0x39fd87 && (this.jumping = -0x1);
        this.grounded || this.setState(PlayerObject.SNAME.FALL);
        this.btnB && !this.btnBde && 0x2 === this.power && !this.isState(PlayerObject.SNAME.DOWN) && !this.isState(PlayerObject.SNAME.SLIDE) && 0x1 > this.attackTimer && this.attackCharge >= PlayerObject.ATTACK_CHARGE && (this.attack(), this.game.out.push(_0x2ca693.encode(0x1)));
        this.btnBde = this.btnB;
        0x0 < this.attackTimer && 0x2 === this.power && (this.isState(PlayerObject.SNAME.STAND) || this.isState(PlayerObject.SNAME.RUN)) && this.setState(PlayerObject.SNAME.ATTACK);
    }
};
PlayerObject.prototype.physics = function() {
    -0x1 !== this.jumping ? (this.fallSpeed = 0.45 - 0.005 * this.jumping, this.jumping++, this.grounded = !0x1) : (this.isSpring = this.isBounce = !0x1, this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - 0.085, -0.45));
    for (var _0x57b791 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), _0x513d1f = _0x26de58.make(this.pos.x + Math.min(0x0, this.moveSpeed), this.pos.y + Math.min(0x0, this.fallSpeed)), _0x208a75 = _0x26de58.make(this.dim.x + Math.max(0x0, this.moveSpeed), this.dim.y + Math.max(0x0, this.fallSpeed)), _0x513d1f = this.game.world.getZone(this.level, this.zone).getTiles(_0x513d1f, _0x208a75), _0x20e6e6 = this.game.getPlatforms(), _0x208a75 = _0x26de58.make(0x1, 0x1), _0x58342b = !0x1, _0x27521c = [], _0x27c16e = [], _0x346d1d = [], _0x50b7b9 = [], _0x535e81 = [], _0x3f505e, _0x5b32b0 = 0x0; _0x5b32b0 < _0x513d1f.length; _0x5b32b0++) {
        var _0x28e288 = _0x513d1f[_0x5b32b0];
        if (_0x28e288.definition.COLLIDE)
            if (_0x28e288.definition.HIDDEN) _0x27521c.push(_0x28e288);
            else if (_0x1badb6.intersection(_0x28e288.pos, _0x208a75, _0x57b791, this.dim) || _0x1badb6.intersection(_0x28e288.pos, _0x208a75, this.pos, this.dim)) 0.01 < Math.abs(this.moveSpeed) && this.grounded && this.pos.y <= _0x28e288.pos.y && _0x346d1d.push(_0x28e288), _0x27521c.push(_0x28e288);
    }
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x20e6e6.length; _0x5b32b0++) _0x28e288 = _0x20e6e6[_0x5b32b0], _0x1badb6.intersection(_0x28e288.pos, _0x28e288.dim, _0x57b791, this.dim) && _0x535e81.push(_0x28e288);
    _0x20e6e6 = _0x26de58.make(_0x57b791.x, this.pos.y);
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x27521c.length; _0x5b32b0++) _0x28e288 = _0x27521c[_0x5b32b0], !_0x28e288.definition.HIDDEN && _0x1badb6.intersection(_0x28e288.pos, _0x208a75, _0x20e6e6, this.dim) && (_0x20e6e6.x = _0x20e6e6.x + 0.5 * this.dim.x < _0x28e288.pos.x + 0.5 * _0x208a75.x ? _0x28e288.pos.x - this.dim.x : _0x28e288.pos.x + _0x208a75.x, this.moveSpeed *= 0.33);
    _0x57b791.x = _0x20e6e6.x;
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x27521c.length; _0x5b32b0++) _0x28e288 = _0x27521c[_0x5b32b0], _0x1badb6.intersection(_0x28e288.pos, _0x208a75, _0x57b791, this.dim) && (this.fallSpeed > PlayerObject.BLOCK_BUMP_THRESHOLD && _0x50b7b9.push(_0x28e288), 0x0 > this.fallSpeed && this.pos.y >= _0x28e288.pos.y && _0x27c16e.push(_0x28e288));
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x27521c.length; _0x5b32b0++) _0x28e288 = _0x27521c[_0x5b32b0], _0x1badb6.intersection(_0x28e288.pos, _0x208a75, _0x57b791, this.dim) && (this.pos.y >= _0x57b791.y ? _0x28e288.definition.HIDDEN || (_0x57b791.y = _0x28e288.pos.y + _0x208a75.y, this.fallSpeed = 0x0, _0x58342b = !0x0) : (_0x57b791.y = _0x28e288.pos.y - this.dim.y, this.fallSpeed = 0x0));
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x535e81.length; _0x5b32b0++)
        if (_0x28e288 = _0x535e81[_0x5b32b0], this.pos.y >= _0x57b791.y && _0x28e288.pos.y + _0x28e288.dim.y - this.pos.y < PlayerObject.PLATFORM_SNAP_DIST) {
            _0x57b791.y = _0x28e288.pos.y + _0x28e288.dim.y;
            _0x58342b = !0x0;
            _0x3f505e = _0x28e288;
            break;
        } this.grounded = _0x58342b;
    this.pos = _0x57b791;
    _0x3f505e && _0x3f505e.riding(this);
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x513d1f.length; _0x5b32b0++) _0x28e288 = _0x513d1f[_0x5b32b0], _0x1badb6.intersection(_0x28e288.pos, _0x208a75, _0x57b791, this.dim) && _0x28e288.definition.TRIGGER(this.game, this.pid, _0x28e288, this.level, this.zone, _0x28e288.pos.x, _0x28e288.pos.y, _0x41f345.TRIGGER.TYPE.TOUCH);
    if (this.isState(PlayerObject.SNAME.DOWN) && 0.05 > this.moveSpeed)
        for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x27c16e.length; _0x5b32b0++) _0x28e288 = _0x27c16e[_0x5b32b0], _0x28e288.definition.TRIGGER(this.game, this.pid, _0x28e288, this.level, this.zone, _0x28e288.pos.x, _0x28e288.pos.y, _0x41f345.TRIGGER.TYPE.DOWN);
    if (this.isState(PlayerObject.SNAME.RUN))
        for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x346d1d.length; _0x5b32b0++) _0x28e288 = _0x346d1d[_0x5b32b0], _0x28e288.definition.TRIGGER(this.game, this.pid, _0x28e288, this.level, this.zone, _0x28e288.pos.x, _0x28e288.pos.y, _0x41f345.TRIGGER.TYPE.PUSH);
    for (_0x5b32b0 = 0x0; _0x5b32b0 < _0x50b7b9.length; _0x5b32b0++) _0x28e288 = _0x50b7b9[_0x5b32b0], _0x28e288.definition.TRIGGER(this.game, this.pid, _0x28e288, this.level, this.zone, _0x28e288.pos.x, _0x28e288.pos.y, 0x0 < this.power ? _0x41f345.TRIGGER.TYPE.BIG_BUMP : _0x41f345.TRIGGER.TYPE.SMALL_BUMP), this.jumping = -0x1, this.fallSpeed = -PlayerObject.BLOCK_BUMP_THRESHOLD;
};
PlayerObject.prototype.collisionTest = function(_0x569425, _0x1323bb) {
    for (var _0x4dc291 = _0x26de58.make(0x1, 0x1), _0x471838 = this.game.world.getZone(this.level, this.zone).getTiles(_0x569425, _0x1323bb), _0x426d64 = 0x0; _0x426d64 < _0x471838.length; _0x426d64++) {
        var _0x2faa4b = _0x471838[_0x426d64];
        if (_0x2faa4b.definition.COLLIDE && _0x1badb6.intersection(_0x2faa4b.pos, _0x4dc291, _0x569425, _0x1323bb)) return !0x0;
    }
    return !0x1;
};
PlayerObject.prototype.interaction = function() {
    for (var _0x588c5e = 0x0; _0x588c5e < this.game.objects.length; _0x588c5e++) {
        var _0x4e9f01 = this.game.objects[_0x588c5e];
        _0x4e9f01 !== this && !this.dead && _0x4e9f01.level === this.level && _0x4e9f01.zone === this.zone && _0x4e9f01.isTangible() && _0x1badb6.intersection(_0x4e9f01.pos, _0x4e9f01.dim, this.pos, this.dim) && (0x0 < this.starTimer && _0x4e9f01.bonk && (_0x4e9f01.bonk(), this.game.out.push(_0x30e075.encode(_0x4e9f01.level, _0x4e9f01.zone, _0x4e9f01.oid, 0x1))), _0x4e9f01 instanceof PlayerObject && 0x0 < _0x4e9f01.starTimer && !this.autoTarget && (this.damage(_0x4e9f01), this.dead && this.game.out.push(_0x2f5327.encode(_0x4e9f01.pid))), this.lastPos.y > _0x4e9f01.pos.y + 0.66 * _0x4e9f01.dim.y - Math.max(0x0, _0x4e9f01.fallSpeed) ? _0x4e9f01.playerStomp && _0x4e9f01.playerStomp(this) : this.lastPos.y < _0x4e9f01.pos.y ? _0x4e9f01.playerBump && _0x4e9f01.playerBump(this) : _0x4e9f01.playerCollide && _0x4e9f01.playerCollide(this));
    }
};
PlayerObject.prototype.arrow = function() {
    for (var _0x37a11c = 0x0, _0x389b03 = 0x0; _0x389b03 < this.game.objects.length; _0x389b03++) {
        var _0x2c4088 = this.game.objects[_0x389b03];
        _0x2c4088 !== this && _0x2c4088 instanceof PlayerObject && _0x2c4088.level === this.level && _0x2c4088.zone === this.zone && (_0x37a11c += 0x1 - Math.min(PlayerObject.ARROW_RAD_OUT, Math.max(0x0, _0x26de58.distance(this.pos, _0x2c4088.pos) - PlayerObject.ARROW_RAD_IN)) / PlayerObject.ARROW_RAD_OUT);
    }
    this.arrowFade = Math.min(PlayerObject.ARROW_THRESHOLD_MAX, Math.max(0x0, _0x37a11c - PlayerObject.ARROW_THRESHOLD_MIN)) / PlayerObject.ARROW_THRESHOLD_MAX;
};
PlayerObject.prototype.sound = _0x3da6cc.prototype.sound;
PlayerObject.prototype.attack = function() {
    this.attackTimer = PlayerObject.ATTACK_DELAY;
    this.attackCharge -= PlayerObject.ATTACK_CHARGE;
    var _0x328458 = this.reverse ? _0x26de58.add(this.pos, PlayerObject.PROJ_OFFSET) : _0x26de58.add(this.pos, _0x26de58.multiply(PlayerObject.PROJ_OFFSET, _0x26de58.make(-0x1, 0x1)));
    this.game.createObject(_0x6c6f53.ID, this.level, this.zone, _0x328458, [this.reverse, this.pid]);
    this.play("sfx/fireball.wav", 0x1, 0.04);
};
PlayerObject.prototype.bounce = function() {
    this.jumping = 0x0;
    this.isBounce = !0x0;
};
PlayerObject.prototype.damage = function(_0x782da0) {
    0x0 < this.damageTimer || 0x0 < this.starTimer || this.isState(PlayerObject.SNAME.TRANSFORM) || this.isState(PlayerObject.SNAME.CLIMB) || this.isState(PlayerObject.SNAME.POLE) || this.pipeWarp || 0x0 < this.pipeTimer || 0x0 < this.pipeDelay || this.autoTarget || (0x0 < this.power ? (this.tfm(0x0), this.damageTimer = PlayerObject.DAMAGE_TIME) : this.kill());
};
PlayerObject.prototype.invuln = function() {
    this.damageTimer = PlayerObject.DAMAGE_TIME;
};
PlayerObject.prototype.powerup = function(_0x316532) {
    _0x316532 instanceof MushroomObject && 0x1 > this.power ? (this.tfm(0x1), this.rate = 0x73) : _0x316532 instanceof FlowerObject && 0x2 > this.power ? (this.tfm(0x2), this.rate = 0x71) : _0x316532 instanceof StarObject ? (this.star(), this.game.out.push(_0x2ca693.encode(0x2)), this.rate = 0x43) : _0x316532 instanceof LifeObject ? this.game.lifeage() : _0x316532 instanceof CoinObject ? this.game.coinage() : _0x316532 instanceof GoldFlowerObject ? this.game.coinage(true) : _0x316532 instanceof _0x2aba82 ? this.game.out.push(_0x2656cf.encode()) : _0x316532 instanceof _0x5010c8 && this.damage(_0x316532);
};
PlayerObject.prototype.axe = function(_0x5050d5) {
    (_0x5050d5 = this.game.getText(this.level, this.zone, _0x5050d5.toString())) || (_0x5050d5 = this.game.getText(this.level, this.zone, "too bad"));
    _0x5050d5 && (this.autoTarget = _0x26de58.add(_0x5050d5.pos, _0x26de58.make(0x0, -1.6)));
};
PlayerObject.prototype.star = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0);
    this.starTimer = PlayerObject.STAR_LENGTH;
    (this.starMusic = this.play("music/star.mp3", 0x1, 0.04)) && this.starMusic.loop(!0x0);
};
PlayerObject.prototype.tfm = function(_0x538c99) {
    this.power < _0x538c99 ? this.play("sfx/powerup.wav", 0x1, 0.04) : this.play("sfx/pipe.wav", 0x1, 0.04);
    this.tfmTarget = _0x538c99;
    this.tfmTimer = PlayerObject.TRANSFORM_TIME;
    this.setState(PlayerObject.SNAME.TRANSFORM);
};
PlayerObject.prototype.warp = function(_0x3f75ed) {
    if (_0x3f75ed = this.game.world.getLevel(this.level).getWarp(_0x3f75ed)) this.level = _0x3f75ed.level, this.zone = _0x3f75ed.zone, this.pos = _0x3f75ed.pos, this.autoTarget = void 0x0, this.grounded = !0x1;
};
PlayerObject.prototype.pipe = function(_0x157842, _0x266382, _0x3f3ba4) {
    0x1 !== _0x157842 && 0x2 !== _0x157842 || this.setState(PlayerObject.SNAME.STAND);
    var _0x327f1a = this.game.world.getLevel(this.level).getWarp(_0x266382);
    this.pipeWarp = _0x266382;
    this.pipeTimer = 0x1e;
    this.pipeDir = _0x157842;
    this.pipeExt = _0x327f1a.data;
    this.pipeDelayLength = _0x3f3ba4;
};
PlayerObject.prototype.weedeat = function() {
    for (var _0x5cc521 = 0x0; _0x5cc521 < this.game.objects.length; _0x5cc521++) {
        var _0x526625 = this.game.objects[_0x5cc521];
        _0x526625 instanceof _0xa70071 && !_0x526625.dead && _0x26de58.distance(this.pos, _0x526625.pos) < PlayerObject.WEED_EAT_RADIUS && _0x526625.destroy();
    }
};
PlayerObject.prototype.pole = function(_0x4a8021) {
    this.autoTarget || (this.setState(PlayerObject.SNAME.POLE), this.fallSpeed = this.moveSpeed = 0x0, this.pos.x = _0x4a8021.x, this.poleTimer = 0xf, this.poleSound = !0x1);
};
PlayerObject.prototype.vine = function(_0x4cfee8, _0x16f983) {
    this.setState(PlayerObject.SNAME.CLIMB);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.pos.x = _0x4cfee8.x;
    this.vineWarp = _0x16f983;
};
PlayerObject.prototype.hide = function() {
    this.setState(PlayerObject.SNAME.HIDE);
};
PlayerObject.prototype.show = function() {
    this.setState(PlayerObject.SNAME.STAND);
};
PlayerObject.prototype.kill = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0, this.starTimer = 0x0);
    this.isState(PlayerObject.SNAME.GHOST) ? this.setState(PlayerObject.SNAME.DEADGHOST) : this.setState(PlayerObject.SNAME.DEAD);
    this.dead = !0x0;
    this.deadTimer = PlayerObject.DEAD_TIME;
    this.deadFreezeTimer = PlayerObject.DEAD_FREEZE_TIME;
    this.fallSpeed = PlayerObject.DEAD_UP_FORCE;
    if (this.game.getPlayer() === this) {
        this.game.out.push(_0x4c5df7.encode());
        var _0x27d445 = Cookies.get("sad_gamer_moments");
        !gameClient.net.isPrivate && Cookies.set("sad_gamer_moments", _0x27d445 ? parseInt(_0x27d445) + 0x1 : 0x1, {
            'expires': 0x16d
        });
    }
};
PlayerObject.prototype.destroy = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0, this.starTimer = 0x0);
    _0x3da6cc.prototype.destroy.call(this);
};
PlayerObject.prototype.isTangible = function() {
    return _0x3da6cc.prototype.isTangible.call(this) && !this.isState(PlayerObject.SNAME.HIDE) && 0x0 >= this.pipeDelay;
};
PlayerObject.prototype.setState = function(_0x50b226) {
    _0x50b226 = this.getStateByPowerIndex(_0x50b226, this.power);
    _0x50b226 !== this.state && (this.state = _0x50b226, 0x0 < _0x50b226.SPRITE.length && (this.sprite = _0x50b226.SPRITE[0x0]), this.dim = _0x50b226.DIM, this.anim = 0x0);
};
PlayerObject.prototype.getStateByPowerIndex = function(_0x40e9b8, _0x2a26f5) {
    for (var _0x445ce9 = 0x0; _0x445ce9 < PlayerObject.STATE.length; _0x445ce9++) {
        var _0x44768c = PlayerObject.STATE[_0x445ce9];
        if (_0x44768c.NAME === _0x40e9b8 && (_0x44768c.ID >= PlayerObject.GENERIC_INDEX || _0x44768c.ID >= PlayerObject.POWER_INDEX_SIZE * _0x2a26f5 && _0x44768c.ID < PlayerObject.POWER_INDEX_SIZE * (_0x2a26f5 + 0x1))) return _0x44768c;
    }
};
PlayerObject.prototype.isState = function(_0x5b2890) {
    return _0x5b2890 === this.state.NAME;
};
PlayerObject.prototype.draw = function(_0x45dd8c) {
    if (!(this.isState(PlayerObject.SNAME.HIDE) || 0x0 < this.pipeDelay || 0x0 < this.damageTimer && 0x1 < this.damageTimer % 0x3)) {
        var _0x5c9425;
        _0x5c9425 = 0x0 < this.starTimer ? 0x2 : this.isState(PlayerObject.SNAME.GHOST) || this.isState(PlayerObject.SNAME.DEADGHOST) ? 0x1 : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x5814e0 = this.sprite.INDEX, _0x3f6b38 = 0x0; _0x3f6b38 < _0x5814e0.length; _0x3f6b38++)
                for (var _0x13a17a = 0x0; _0x13a17a < _0x5814e0[_0x3f6b38].length; _0x13a17a++) 0x2 === _0x5c9425 && _0x45dd8c.push({
                    'pos': _0x26de58.add(_0x26de58.add(this.pos, PlayerObject.DIM_OFFSET), _0x26de58.make(this.reverse ? _0x13a17a : -_0x13a17a, _0x3f6b38)),
                    'reverse': this.reverse,
                    'index': _0x5814e0[_0x3f6b38][_0x13a17a],
                    'mode': 0x0
                }), _0x45dd8c.push({
                    'pos': _0x26de58.add(_0x26de58.add(this.pos, PlayerObject.DIM_OFFSET), _0x26de58.make(this.reverse ? _0x13a17a : -_0x13a17a, _0x3f6b38)),
                    'reverse': this.reverse,
                    'index': _0x5814e0[_0x3f6b38][_0x13a17a],
                    'mode': _0x5c9425
                });
        else 0x2 === _0x5c9425 && _0x45dd8c.push({
            'pos': _0x26de58.add(this.pos, PlayerObject.DIM_OFFSET),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        }), _0x45dd8c.push({
            'pos': _0x26de58.add(this.pos, PlayerObject.DIM_OFFSET),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': _0x5c9425
        });
        0x0 < this.arrowFade && (_0x5c9425 = 0xa0 + parseInt(0x20 * this.arrowFade), _0x45dd8c.push({
            'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x26de58.make(0x0, this.dim.y)), PlayerObject.ARROW_OFFSET),
            'reverse': !0x1,
            'index': PlayerObject.ARROW_SPRITE,
            'mode': _0x5c9425
        }));
    }
};
PlayerObject.prototype.write = function(_0x239cf4) {
    0x0 < this.arrowFade ? _0x239cf4.push({
        'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x26de58.make(0x0, this.dim.y)), PlayerObject.TEXT_OFFSET),
        'size': PlayerObject.TEXT_SIZE,
        'color': "rgba(255,255,255," + this.arrowFade + ')',
        'text': PlayerObject.ARROW_TEXT
    }) : this.name && _0x239cf4.push({
        'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x26de58.make(0x0, this.sprite.INDEX instanceof Array ? 0x2 : 0x1)), PlayerObject.TEAM_OFFSET),
        'size': PlayerObject.TEAM_SIZE,
        'color': PlayerObject.TEAM_COLOR,
        'text': this.name
    });
};
PlayerObject.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(PlayerObject);
"use strict";

function _0x2040e7(_0x1e60b3, _0x4473d2, _0x446473, _0x318ba1, _0x37471f, _0xa2b306) {
    _0x3da6cc.call(this, _0x1e60b3, _0x4473d2, _0x446473, _0x318ba1);
    this.oid = _0x37471f;
    this.variant = isNaN(parseInt(_0xa2b306)) ? 0x0 : parseInt(_0xa2b306);
    this.setState(_0x2040e7.STATE.RUN);
    this.bonkTimer = this.deadTimer = this.anim = 0x0;
    this.dim = _0x26de58.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.dir = !0x0;
    this.disable();
}
_0x2040e7.ASYNC = !0x1;
_0x2040e7.ID = 0x11;
_0x2040e7.NAME = "GOOMBA";
_0x2040e7.ANIMATION_RATE = 0x5;
_0x2040e7.VARIANT_OFFSET = 0x70;
_0x2040e7.ENABLE_FADE_TIME = 0xf;
_0x2040e7.ENABLE_DIST = 0x1a;
_0x2040e7.DEAD_TIME = 0x3c;
_0x2040e7.BONK_TIME = 0x5a;
_0x2040e7.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0x2040e7.BONK_DECEL = 0.925;
_0x2040e7.BONK_FALL_SPEED = 0.5;
_0x2040e7.MOVE_SPEED_MAX = 0.075;
_0x2040e7.FALL_SPEED_MAX = 0.35;
_0x2040e7.FALL_SPEED_ACCEL = 0.085;
_0x2040e7.SPRITE = {};
_0x2040e7.SPRITE_LIST = [{
    'NAME': "RUN0",
    'ID': 0x0,
    'INDEX': 0xf
}, {
    'NAME': "RUN1",
    'ID': 0x1,
    'INDEX': 0x1f
}, {
    'NAME': "FALL",
    'ID': 0x2,
    'INDEX': 0xe
}, {
    'NAME': "DEAD",
    'ID': 0x3,
    'INDEX': 0x2f
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x2040e7.SPRITE_LIST.length; _0x1bec55++) _0x2040e7.SPRITE[_0x2040e7.SPRITE_LIST[_0x1bec55].NAME] = _0x2040e7.SPRITE_LIST[_0x1bec55], _0x2040e7.SPRITE[_0x2040e7.SPRITE_LIST[_0x1bec55].ID] = _0x2040e7.SPRITE_LIST[_0x1bec55];
_0x2040e7.STATE = {};
_0x2040e7.STATE_LIST = [{
    'NAME': "RUN",
    'ID': 0x0,
    'SPRITE': [_0x2040e7.SPRITE.RUN0, _0x2040e7.SPRITE.RUN1]
}, {
    'NAME': "FALL",
    'ID': 0x1,
    'SPRITE': [_0x2040e7.SPRITE.FALL]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [_0x2040e7.SPRITE.DEAD]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x2040e7.STATE_LIST.length; _0x1bec55++) _0x2040e7.STATE[_0x2040e7.STATE_LIST[_0x1bec55].NAME] = _0x2040e7.STATE_LIST[_0x1bec55], _0x2040e7.STATE[_0x2040e7.STATE_LIST[_0x1bec55].ID] = _0x2040e7.STATE_LIST[_0x1bec55];
_0x2040e7.prototype.update = function(_0x30228e) {
    switch (_0x30228e) {
        case 0x0:
            this.kill();
            break;
        case 0x1:
            this.bonk();
            break;
        case 0xa0:
            this.enable();
    }
};
_0x2040e7.prototype.step = function() {
    this.disabled ? this.proximity() : (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x2040e7.STATE.BONK ? this.bonkTimer++ > _0x2040e7.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x2040e7.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x2040e7.FALL_SPEED_ACCEL, -_0x2040e7.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x2040e7.ANIMATION_RATE) % this.state.SPRITE.length], this.state === _0x2040e7.STATE.DEAD ? this.deadTimer++ < _0x2040e7.DEAD_TIME || this.destroy() : (this.control(), this.physics(), this.sound(), 0x0 > this.pos.y && this.destroy())));
};
_0x2040e7.prototype.control = function() {
    this.moveSpeed = this.dir ? -_0x2040e7.MOVE_SPEED_MAX : _0x2040e7.MOVE_SPEED_MAX;
    this.grounded ? this.setState(_0x2040e7.STATE.RUN) : this.setState(_0x2040e7.STATE.FALL);
};
_0x2040e7.prototype.physics = function() {
    this.grounded && (this.fallSpeed = 0x0);
    this.fallSpeed = Math.max(this.fallSpeed - _0x2040e7.FALL_SPEED_ACCEL, -_0x2040e7.FALL_SPEED_MAX);
    var _0x482f3b = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
        _0x443a52 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
        _0x44dd07 = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x39b88d = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x44dd07 = this.game.world.getZone(this.level, this.zone).getTiles(_0x44dd07, _0x39b88d),
        _0x39b88d = _0x26de58.make(0x1, 0x1),
        _0x5c888e = !0x1;
    this.grounded = !0x1;
    for (var _0x3c302a = 0x0; _0x3c302a < _0x44dd07.length; _0x3c302a++) {
        var _0x1a430b = _0x44dd07[_0x3c302a];
        _0x1a430b.definition.COLLIDE && _0x1badb6.intersection(_0x1a430b.pos, _0x39b88d, _0x482f3b, this.dim) && (this.pos.x <= _0x482f3b.x && _0x482f3b.x + this.dim.x > _0x1a430b.pos.x ? (_0x482f3b.x = _0x1a430b.pos.x - this.dim.x, _0x443a52.x = _0x482f3b.x, this.moveSpeed = 0x0, _0x5c888e = !0x0) : this.pos.x >= _0x482f3b.x && _0x482f3b.x < _0x1a430b.pos.x + _0x39b88d.x && (_0x482f3b.x = _0x1a430b.pos.x + _0x39b88d.x, _0x443a52.x = _0x482f3b.x, this.moveSpeed = 0x0, _0x5c888e = !0x0));
    }
    for (_0x3c302a = 0x0; _0x3c302a < _0x44dd07.length; _0x3c302a++) _0x1a430b = _0x44dd07[_0x3c302a], _0x1a430b.definition.COLLIDE && _0x1badb6.intersection(_0x1a430b.pos, _0x39b88d, _0x443a52, this.dim) && (this.pos.y >= _0x443a52.y && _0x443a52.y < _0x1a430b.pos.y + _0x39b88d.y ? (_0x443a52.y = _0x1a430b.pos.y + _0x39b88d.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y <= _0x443a52.y && _0x443a52.y + this.dim.y > _0x1a430b.pos.y && (_0x443a52.y = _0x1a430b.pos.y - this.dim.y, this.fallSpeed = 0x0));
    this.pos = _0x26de58.make(_0x482f3b.x, _0x443a52.y);
    _0x5c888e && (this.dir = !this.dir);
};
_0x2040e7.prototype.sound = _0x3da6cc.prototype.sound;
_0x2040e7.prototype.proximity = function() {
    var _0xc67304 = this.game.getPlayer();
    _0xc67304 && !_0xc67304.dead && _0xc67304.level === this.level && _0xc67304.zone === this.zone && !this.proxHit && _0x26de58.distance(_0xc67304.pos, this.pos) < _0x2040e7.ENABLE_DIST && (this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
_0x2040e7.prototype.enable = function() {
    this.disabled && (this.disabled = !0x1, this.disabledTimer = _0x2040e7.ENABLE_FADE_TIME);
};
_0x2040e7.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x2040e7.prototype.damage = function(_0x5b7e53) {
    this.dead || (this.bonk(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x2040e7.prototype.bonk = function() {
    this.dead || (this.setState(_0x2040e7.STATE.BONK), this.moveSpeed = _0x2040e7.BONK_IMP.x, this.fallSpeed = _0x2040e7.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x2040e7.prototype.playerCollide = function(_0x5ee074) {
    this.dead || this.garbage || _0x5ee074.damage(this);
};
_0x2040e7.prototype.playerStomp = function(_0x584473) {
    this.dead || this.garbage || (this.kill(), _0x584473.bounce(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x0)));
};
_0x2040e7.prototype.playerBump = function(_0x5e0adc) {
    this.dead || this.garbage || _0x5e0adc.damage(this);
};
_0x2040e7.prototype.kill = function() {
    this.dead = !0x0;
    this.setState(_0x2040e7.STATE.DEAD);
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
_0x2040e7.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x2040e7.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x2040e7.prototype.setState = function(_0x4fe620) {
    _0x4fe620 !== this.state && (this.state = _0x4fe620, 0x0 < _0x4fe620.SPRITE.length && (this.sprite = _0x4fe620.SPRITE[0x0]), this.anim = 0x0);
};
_0x2040e7.prototype.draw = function(_0xa69c24) {
    if (!this.disabled) {
        var _0x57b370;
        _0x57b370 = this.state === _0x2040e7.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0x2040e7.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x2d049f = this.sprite.INDEX, _0x2e81c8 = 0x0; _0x2e81c8 < _0x2d049f.length; _0x2e81c8++)
                for (var _0x28feb8 = 0x0; _0x28feb8 < _0x2d049f[_0x2e81c8].length; _0x28feb8++) {
                    var _0x14ac9a = _0x2d049f[_0x57b370 ? _0x2d049f.length - 0x1 - _0x2e81c8 : _0x2e81c8][_0x28feb8];
                    switch (this.variant) {
                        case 0x1:
                            _0x14ac9a += _0x2040e7.VARIANT_OFFSET;
                    }
                    _0xa69c24.push({
                        'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x28feb8, _0x2e81c8)),
                        'reverse': !this.dir,
                        'index': _0x14ac9a,
                        'mode': _0x57b370
                    });
                } else {
                    _0x14ac9a = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0x14ac9a += _0x2040e7.VARIANT_OFFSET;
                    }
                    _0xa69c24.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0x14ac9a,
                        'mode': _0x57b370
                    });
                }
    }
};
_0x2040e7.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x2040e7);
"use strict";

function _0xafe583(_0xa97c33, _0x554349, _0x3fb5a3, _0x1fe726, _0xe543eb, _0x547d60, _0xdab7ae) {
    _0x3da6cc.call(this, _0xa97c33, _0x554349, _0x3fb5a3, _0x1fe726);
    this.oid = _0xe543eb;
    this.variant = isNaN(parseInt(_0xdab7ae)) ? 0x0 : parseInt(_0xdab7ae);
    this.setState(parseInt(_0x547d60) ? _0xafe583.STATE.FLY : _0xafe583.STATE.RUN);
    this.bonkTimer = this.anim = 0x0;
    this.dim = _0x26de58.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.grounded = !0x1;
    this.jump = -0x1;
    this.disabled = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.immuneTimer = 0x0;
    this.dir = !0x0;
    this.disable();
}
_0xafe583.ASYNC = !0x1;
_0xafe583.ID = 0x12;
_0xafe583.NAME = "KOOPA";
_0xafe583.ANIMATION_RATE = 0x3;
_0xafe583.VARIANT_OFFSET = 0x20;
_0xafe583.ENABLE_FADE_TIME = 0xf;
_0xafe583.ENABLE_DIST = 0x1a;
_0xafe583.BONK_TIME = 0x5a;
_0xafe583.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0xafe583.BONK_DECEL = 0.925;
_0xafe583.BONK_FALL_SPEED = 0.5;
_0xafe583.PLAYER_IMMUNE_TIME = 0x6;
_0xafe583.MOVE_SPEED_MAX = 0.075;
_0xafe583.SHELL_MOVE_SPEED_MAX = 0.35;
_0xafe583.FALL_SPEED_MAX = 0.35;
_0xafe583.FALL_SPEED_ACCEL = 0.085;
_0xafe583.JUMP_LENGTH_MAX = 0x14;
_0xafe583.JUMP_DECEL = 0.025;
_0xafe583.TRANSFORM_TIME = 0xaf;
_0xafe583.TRANSFORM_THRESHOLD = 0x4b;
_0xafe583.SPRITE = {};
_0xafe583.SPRITE_LIST = [{
    'NAME': "FLY0",
    'ID': 0x0,
    'INDEX': [
        [0x68],
        [0x58]
    ]
}, {
    'NAME': "FLY1",
    'ID': 0x1,
    'INDEX': [
        [0x69],
        [0x59]
    ]
}, {
    'NAME': "RUN0",
    'ID': 0x2,
    'INDEX': [
        [0x66],
        [0x56]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x3,
    'INDEX': [
        [0x67],
        [0x57]
    ]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x4,
    'INDEX': 0x51
}, {
    'NAME': "SHELL",
    'ID': 0x5,
    'INDEX': 0x50
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xafe583.SPRITE_LIST.length; _0x1bec55++) _0xafe583.SPRITE[_0xafe583.SPRITE_LIST[_0x1bec55].NAME] = _0xafe583.SPRITE_LIST[_0x1bec55], _0xafe583.SPRITE[_0xafe583.SPRITE_LIST[_0x1bec55].ID] = _0xafe583.SPRITE_LIST[_0x1bec55];
_0xafe583.STATE = {};
_0xafe583.STATE_LIST = [{
    'NAME': "FLY",
    'ID': 0x0,
    'SPRITE': [_0xafe583.SPRITE.FLY0, _0xafe583.SPRITE.FLY1]
}, {
    'NAME': "RUN",
    'ID': 0x1,
    'SPRITE': [_0xafe583.SPRITE.RUN0, _0xafe583.SPRITE.RUN1]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x2,
    'SPRITE': [_0xafe583.SPRITE.SHELL, _0xafe583.SPRITE.TRANSFORM]
}, {
    'NAME': "SHELL",
    'ID': 0x3,
    'SPRITE': [_0xafe583.SPRITE.SHELL]
}, {
    'NAME': "SPIN",
    'ID': 0x4,
    'SPRITE': [_0xafe583.SPRITE.SHELL]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xafe583.STATE_LIST.length; _0x1bec55++) _0xafe583.STATE[_0xafe583.STATE_LIST[_0x1bec55].NAME] = _0xafe583.STATE_LIST[_0x1bec55], _0xafe583.STATE[_0xafe583.STATE_LIST[_0x1bec55].ID] = _0xafe583.STATE_LIST[_0x1bec55];
_0xafe583.prototype.update = function(_0x432173) {
    switch (_0x432173) {
        case 0x1:
            this.bonk();
            break;
        case 0x10:
            this.stomped(!0x0);
            break;
        case 0x11:
            this.stomped(!0x1);
            break;
        case 0xa0:
            this.enable();
    }
};
_0xafe583.prototype.step = function() {
    if (this.disabled) this.proximity();
    else if (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0xafe583.STATE.BONK) this.bonkTimer++ > _0xafe583.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0xafe583.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0xafe583.FALL_SPEED_ACCEL, -_0xafe583.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / _0xafe583.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === _0xafe583.STATE.SHELL || this.state === _0xafe583.STATE.TRANSFORM) --this.transformTimer < _0xafe583.TRANSFORM_THRESHOLD && this.setState(_0xafe583.STATE.TRANSFORM), 0x0 >= this.transformTimer && this.setState(_0xafe583.STATE.RUN);
        0x0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0x0 > this.pos.y && this.destroy();
    }
};
_0xafe583.prototype.control = function() {
    if (this.state === _0xafe583.STATE.FLY) this.moveSpeed = this.dir ? -_0xafe583.MOVE_SPEED_MAX : _0xafe583.MOVE_SPEED_MAX, this.grounded && (this.jump = 0x0);
    else if (this.state === _0xafe583.STATE.RUN) this.moveSpeed = this.dir ? -_0xafe583.MOVE_SPEED_MAX : _0xafe583.MOVE_SPEED_MAX;
    else if (this.state === _0xafe583.STATE.SPIN) this.moveSpeed = this.dir ? -_0xafe583.SHELL_MOVE_SPEED_MAX : _0xafe583.SHELL_MOVE_SPEED_MAX;
    else if (this.state === _0xafe583.STATE.SHELL || this.state === _0xafe583.STATE.TRANSFORM) this.moveSpeed = 0x0;
    this.jump > _0xafe583.JUMP_LENGTH_MAX && (this.jump = -0x1);
};
_0xafe583.prototype.physics = function() {
    -0x1 !== this.jump ? (this.fallSpeed = _0xafe583.FALL_SPEED_MAX - this.jump * _0xafe583.JUMP_DECEL, this.jump++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0xafe583.FALL_SPEED_ACCEL, -_0xafe583.FALL_SPEED_MAX));
    this.grounded && (this.fallSpeed = 0x0);
    this.fallSpeed = Math.max(this.fallSpeed - _0xafe583.FALL_SPEED_ACCEL, -_0xafe583.FALL_SPEED_MAX);
    var _0x228c79 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
        _0xa7c94d = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
        _0x186c6d = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x1f400c = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x186c6d = this.game.world.getZone(this.level, this.zone).getTiles(_0x186c6d, _0x1f400c),
        _0x1f400c = _0x26de58.make(0x1, 0x1),
        _0x350f0e = !0x1;
    this.grounded = !0x1;
    for (var _0x277a15 = 0x0; _0x277a15 < _0x186c6d.length; _0x277a15++) {
        var _0xb496d = _0x186c6d[_0x277a15];
        _0xb496d.definition.COLLIDE && _0x1badb6.intersection(_0xb496d.pos, _0x1f400c, _0x228c79, this.dim) && (this.pos.x + this.dim.x <= _0xb496d.pos.x && _0x228c79.x + this.dim.x > _0xb496d.pos.x ? (_0x228c79.x = _0xb496d.pos.x - this.dim.x, _0xa7c94d.x = _0x228c79.x, this.moveSpeed = 0x0, _0x350f0e = !0x0) : this.pos.x >= _0xb496d.pos.x + _0x1f400c.x && _0x228c79.x < _0xb496d.pos.x + _0x1f400c.x && (_0x228c79.x = _0xb496d.pos.x + _0x1f400c.x, _0xa7c94d.x = _0x228c79.x, this.moveSpeed = 0x0, _0x350f0e = !0x0));
    }
    for (_0x277a15 = 0x0; _0x277a15 < _0x186c6d.length; _0x277a15++) _0xb496d = _0x186c6d[_0x277a15], _0xb496d.definition.COLLIDE && _0x1badb6.intersection(_0xb496d.pos, _0x1f400c, _0xa7c94d, this.dim) && (this.pos.y >= _0xb496d.pos.y + _0x1f400c.y && _0xa7c94d.y < _0xb496d.pos.y + _0x1f400c.y ? (_0xa7c94d.y = _0xb496d.pos.y + _0x1f400c.y, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0xb496d.pos.y && _0xa7c94d.y + this.dim.y > _0xb496d.pos.y && (_0xa7c94d.y = _0xb496d.pos.y - this.dim.y, this.jump = -0x1, this.fallSpeed = 0x0));
    this.pos = _0x26de58.make(_0x228c79.x, _0xa7c94d.y);
    _0x350f0e && (this.dir = !this.dir);
};
_0xafe583.prototype.interaction = function() {
    if (this.state === _0xafe583.STATE.SPIN)
        for (var _0x369f51 = 0x0; _0x369f51 < this.game.objects.length; _0x369f51++) {
            var _0x597333 = this.game.objects[_0x369f51];
            _0x597333 === this || _0x597333 instanceof PlayerObject || !_0x597333.isTangible() || !_0x597333.damage || _0x597333.level === this.level && _0x597333.zone === this.zone && _0x1badb6.intersection(_0x597333.pos, _0x597333.dim, this.pos, this.dim) && _0x597333.damage(this);
        }
};
_0xafe583.prototype.proximity = function() {
    var _0x12bcf2 = this.game.getPlayer();
    _0x12bcf2 && !_0x12bcf2.dead && _0x12bcf2.level === this.level && _0x12bcf2.zone === this.zone && !this.proxHit && _0x26de58.distance(_0x12bcf2.pos, this.pos) < _0xafe583.ENABLE_DIST && (this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
_0xafe583.prototype.sound = _0x3da6cc.prototype.sound;
_0xafe583.prototype.enable = function() {
    this.disabled && (this.disabled = !0x1, this.disabledTimer = _0xafe583.ENABLE_FADE_TIME);
};
_0xafe583.prototype.disable = function() {
    this.disabled = !0x0;
};
_0xafe583.prototype.damage = function(_0x565802) {
    this.dead || (this.bonk(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0xafe583.prototype.bonk = function() {
    this.dead || (this.setState(_0xafe583.STATE.BONK), this.moveSpeed = _0xafe583.BONK_IMP.x, this.fallSpeed = _0xafe583.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0xafe583.prototype.stomped = function(_0x45b447) {
    if (this.state === _0xafe583.STATE.FLY) this.setState(_0xafe583.STATE.RUN), this.jump = -0x1;
    else if (this.state === _0xafe583.STATE.RUN) this.setState(_0xafe583.STATE.SHELL), this.transformTimer = _0xafe583.TRANSFORM_TIME;
    else if (this.state === _0xafe583.STATE.SPIN) this.setState(_0xafe583.STATE.SHELL), this.transformTimer = _0xafe583.TRANSFORM_TIME;
    else if (this.state === _0xafe583.STATE.SHELL || this.state === _0xafe583.STATE.TRANSFORM) this.setState(_0xafe583.STATE.SPIN), this.dir = _0x45b447;
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
_0xafe583.prototype.playerCollide = function(_0x49360d) {
    this.dead || this.garbage || (this.state === _0xafe583.STATE.SHELL || this.state === _0xafe583.STATE.TRANSFORM ? (_0x49360d = 0x0 < _0x49360d.pos.x - this.pos.x, this.stomped(_0x49360d), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, _0x49360d ? 0x10 : 0x11)), this.immuneTimer = _0xafe583.PLAYER_IMMUNE_TIME) : 0x0 >= this.immuneTimer && _0x49360d.damage(this));
};
_0xafe583.prototype.playerStomp = function(_0x4a7d08) {
    if (!this.dead && !this.garbage) {
        var _0x2f4f3f = 0x0 < _0x4a7d08.pos.x - this.pos.x;
        _0x4a7d08.bounce();
        this.stomped(_0x2f4f3f);
        this.immuneTimer = _0xafe583.PLAYER_IMMUNE_TIME;
        this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, _0x2f4f3f ? 0x10 : 0x11));
    }
};
_0xafe583.prototype.playerBump = function(_0x542091) {
    this.dead || this.garbage || _0x542091.damage(this);
};
_0xafe583.prototype.kill = function() {};
_0xafe583.prototype.destroy = _0x3da6cc.prototype.destroy;
_0xafe583.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0xafe583.prototype.setState = function(_0x1ddca8) {
    _0x1ddca8 !== this.state && (this.state = _0x1ddca8, 0x0 < _0x1ddca8.SPRITE.length && (this.sprite = _0x1ddca8.SPRITE[0x0]), this.anim = 0x0);
};
_0xafe583.prototype.draw = function(_0x43f21f) {
    if (!this.disabled) {
        var _0x345a76;
        _0x345a76 = this.state === _0xafe583.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0xafe583.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x5bdb01 = this.sprite.INDEX, _0x98a94 = 0x0; _0x98a94 < _0x5bdb01.length; _0x98a94++)
                for (var _0x3f41db = 0x0; _0x3f41db < _0x5bdb01[_0x98a94].length; _0x3f41db++) {
                    var _0x3b8db1 = _0x5bdb01[0x3 !== _0x345a76 ? _0x98a94 : _0x5bdb01.length - 0x1 - _0x98a94][_0x3f41db];
                    switch (this.variant) {
                        case 0x1:
                            _0x3b8db1 += _0xafe583.VARIANT_OFFSET;
                    }
                    _0x43f21f.push({
                        'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x3f41db, _0x98a94)),
                        'reverse': !this.dir,
                        'index': _0x3b8db1,
                        'mode': _0x345a76
                    });
                } else {
                    _0x3b8db1 = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0x3b8db1 += _0xafe583.VARIANT_OFFSET;
                    }
                    _0x43f21f.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0x3b8db1,
                        'mode': _0x345a76
                    });
                }
    }
};
_0xafe583.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0xafe583);
"use strict";

function _0x5e412e(_0x20fee6, _0x2e48c2, _0x2b82bb, _0x254183, _0xc898a6, _0x35c708, _0x10c5aa) {
    _0x3da6cc.call(this, _0x20fee6, _0x2e48c2, _0x2b82bb, _0x254183);
    this.oid = _0xc898a6;
    this.variant = isNaN(parseInt(_0x10c5aa)) ? 0x0 : parseInt(_0x10c5aa);
    this.setState(parseInt(_0x35c708) ? _0x5e412e.STATE.FLY : _0x5e412e.STATE.RUN);
    this.bonkTimer = this.anim = 0x0;
    this.loc = [this.pos.y + 0.5 * _0x5e412e.FLY_DISTANCE, this.pos.y - 0.5 * _0x5e412e.FLY_DISTANCE];
    this.dim = _0x26de58.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.immuneTimer = 0x0;
    this.rev = !0x1;
    this.dir = !0x0;
    this.disable();
}
_0x5e412e.ASYNC = !0x1;
_0x5e412e.ID = 0x13;
_0x5e412e.NAME = "KOOPA TROOPA";
_0x5e412e.FLY_DISTANCE = 0x3;
_0x5e412e.FLY_ACCEL = 0.0025;
_0x5e412e.FLY_SPEED_MAX = 0.075;
_0x5e412e.CHECK_DIST = 0.1;
_0x5e412e.SPRITE = {};
_0x5e412e.SPRITE_LIST = [{
    'NAME': "FLY0",
    'ID': 0x0,
    'INDEX': [
        [0x64],
        [0x54]
    ]
}, {
    'NAME': "FLY1",
    'ID': 0x1,
    'INDEX': [
        [0x65],
        [0x55]
    ]
}, {
    'NAME': "RUN0",
    'ID': 0x2,
    'INDEX': [
        [0x62],
        [0x52]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x3,
    'INDEX': [
        [0x63],
        [0x53]
    ]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x4,
    'INDEX': 0x61
}, {
    'NAME': "SHELL",
    'ID': 0x5,
    'INDEX': 0x60
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5e412e.SPRITE_LIST.length; _0x1bec55++) _0x5e412e.SPRITE[_0x5e412e.SPRITE_LIST[_0x1bec55].NAME] = _0x5e412e.SPRITE_LIST[_0x1bec55], _0x5e412e.SPRITE[_0x5e412e.SPRITE_LIST[_0x1bec55].ID] = _0x5e412e.SPRITE_LIST[_0x1bec55];
_0x5e412e.STATE = {};
_0x5e412e.STATE_LIST = [{
    'NAME': "FLY",
    'ID': 0x0,
    'SPRITE': [_0x5e412e.SPRITE.FLY0, _0x5e412e.SPRITE.FLY1]
}, {
    'NAME': "RUN",
    'ID': 0x1,
    'SPRITE': [_0x5e412e.SPRITE.RUN0, _0x5e412e.SPRITE.RUN1]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x2,
    'SPRITE': [_0x5e412e.SPRITE.SHELL, _0x5e412e.SPRITE.TRANSFORM]
}, {
    'NAME': "SHELL",
    'ID': 0x3,
    'SPRITE': [_0x5e412e.SPRITE.SHELL]
}, {
    'NAME': "SPIN",
    'ID': 0x4,
    'SPRITE': [_0x5e412e.SPRITE.SHELL]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5e412e.STATE_LIST.length; _0x1bec55++) _0x5e412e.STATE[_0x5e412e.STATE_LIST[_0x1bec55].NAME] = _0x5e412e.STATE_LIST[_0x1bec55], _0x5e412e.STATE[_0x5e412e.STATE_LIST[_0x1bec55].ID] = _0x5e412e.STATE_LIST[_0x1bec55];
_0x5e412e.prototype.update = _0xafe583.prototype.update;
_0x5e412e.prototype.step = function() {
    if (this.disabled) this.proximity();
    else if (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x5e412e.STATE.BONK) this.bonkTimer++ > _0xafe583.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0xafe583.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0xafe583.FALL_SPEED_ACCEL, -_0xafe583.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / _0xafe583.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === _0x5e412e.STATE.SHELL || this.state === _0x5e412e.STATE.TRANSFORM) --this.transformTimer < _0xafe583.TRANSFORM_THRESHOLD && this.setState(_0x5e412e.STATE.TRANSFORM), 0x0 >= this.transformTimer && this.setState(_0x5e412e.STATE.RUN);
        0x0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0x0 > this.pos.y && this.destroy();
    }
};
_0x5e412e.prototype.control = function() {
    this.state === _0x5e412e.STATE.FLY && (this.moveSpeed = this.dir ? -_0xafe583.MOVE_SPEED_MAX : _0xafe583.MOVE_SPEED_MAX);
    this.state === _0x5e412e.STATE.RUN && (this.grounded && !this.checkGround() && (this.dir = !this.dir), this.moveSpeed = this.dir ? -_0xafe583.MOVE_SPEED_MAX : _0xafe583.MOVE_SPEED_MAX);
    this.state === _0x5e412e.STATE.SPIN && (this.moveSpeed = this.dir ? -_0xafe583.SHELL_MOVE_SPEED_MAX : _0xafe583.SHELL_MOVE_SPEED_MAX);
    if (this.state === _0x5e412e.STATE.SHELL || this.state === _0x5e412e.STATE.TRANSFORM) this.moveSpeed = 0x0;
};
_0x5e412e.prototype.physics = function() {
    if (this.state === _0x5e412e.STATE.FLY) this.rev ? (this.fallSpeed = Math.min(_0x5e412e.FLY_SPEED_MAX, this.fallSpeed + _0x5e412e.FLY_ACCEL), this.pos.y += this.fallSpeed, this.pos.y >= this.loc[0x0] && (this.rev = !0x1)) : (this.fallSpeed = Math.max(-_0x5e412e.FLY_SPEED_MAX, this.fallSpeed - _0x5e412e.FLY_ACCEL), this.pos.y += this.fallSpeed, this.pos.y <= this.loc[0x1] && (this.rev = !0x0));
    else {
        this.grounded && (this.fallSpeed = 0x0);
        this.fallSpeed = Math.max(this.fallSpeed - _0xafe583.FALL_SPEED_ACCEL, -_0xafe583.FALL_SPEED_MAX);
        var _0x487bc8 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
            _0x41141f = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
            _0x26638d = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
            _0x2160ce = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
            _0x26638d = this.game.world.getZone(this.level, this.zone).getTiles(_0x26638d, _0x2160ce),
            _0x2160ce = _0x26de58.make(0x1, 0x1),
            _0x58fc4d = !0x1;
        this.grounded = !0x1;
        for (var _0x36c036 = 0x0; _0x36c036 < _0x26638d.length; _0x36c036++) {
            var _0x46e9db = _0x26638d[_0x36c036];
            _0x46e9db.definition.COLLIDE && _0x1badb6.intersection(_0x46e9db.pos, _0x2160ce, _0x487bc8, this.dim) && (this.pos.x + this.dim.x <= _0x46e9db.pos.x && _0x487bc8.x + this.dim.x > _0x46e9db.pos.x ? (_0x487bc8.x = _0x46e9db.pos.x - this.dim.x, _0x41141f.x = _0x487bc8.x, this.moveSpeed = 0x0, _0x58fc4d = !0x0) : this.pos.x >= _0x46e9db.pos.x + _0x2160ce.x && _0x487bc8.x < _0x46e9db.pos.x + _0x2160ce.x && (_0x487bc8.x = _0x46e9db.pos.x + _0x2160ce.x, _0x41141f.x = _0x487bc8.x, this.moveSpeed = 0x0, _0x58fc4d = !0x0));
        }
        for (_0x36c036 = 0x0; _0x36c036 < _0x26638d.length; _0x36c036++) _0x46e9db = _0x26638d[_0x36c036], _0x46e9db.definition.COLLIDE && _0x1badb6.intersection(_0x46e9db.pos, _0x2160ce, _0x41141f, this.dim) && (this.pos.y >= _0x46e9db.pos.y + _0x2160ce.y && _0x41141f.y < _0x46e9db.pos.y + _0x2160ce.y ? (_0x41141f.y = _0x46e9db.pos.y + _0x2160ce.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x46e9db.pos.y && _0x41141f.y + this.dim.y > _0x46e9db.pos.y && (_0x41141f.y = _0x46e9db.pos.y - this.dim.y, this.fallSpeed = 0x0));
        this.pos = _0x26de58.make(_0x487bc8.x, _0x41141f.y);
        _0x58fc4d && (this.dir = !this.dir);
    }
};
_0x5e412e.prototype.interaction = function() {
    if (this.state === _0x5e412e.STATE.SPIN)
        for (var _0x55c0e3 = 0x0; _0x55c0e3 < this.game.objects.length; _0x55c0e3++) {
            var _0xa2c7b4 = this.game.objects[_0x55c0e3];
            _0xa2c7b4 === this || _0xa2c7b4 instanceof PlayerObject || !_0xa2c7b4.isTangible() || !_0xa2c7b4.damage || _0xa2c7b4.level === this.level && _0xa2c7b4.zone === this.zone && _0x1badb6.intersection(_0xa2c7b4.pos, _0xa2c7b4.dim, this.pos, this.dim) && _0xa2c7b4.damage();
        }
};
_0x5e412e.prototype.sound = _0x3da6cc.prototype.sound;
_0x5e412e.prototype.checkGround = function() {
    var _0x1e7bcc = this.dir ? _0x26de58.add(this.pos, _0x26de58.make(-_0x5e412e.CHECK_DIST, 0x0)) : _0x26de58.add(this.pos, _0x26de58.make(_0x5e412e.CHECK_DIST + this.dim.x, 0x0));
    _0x1e7bcc.y -= 1.5;
    return this.game.world.getZone(this.level, this.zone).getTile(_0x1e7bcc).definition.COLLIDE;
};
_0x5e412e.prototype.proximity = _0xafe583.prototype.proximity;
_0x5e412e.prototype.enable = _0xafe583.prototype.enable;
_0x5e412e.prototype.disable = _0xafe583.prototype.disable;
_0x5e412e.prototype.damage = _0xafe583.prototype.damage;
_0x5e412e.prototype.bonk = function() {
    this.dead || (this.setState(_0x5e412e.STATE.BONK), this.moveSpeed = _0xafe583.BONK_IMP.x, this.fallSpeed = _0xafe583.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x5e412e.prototype.stomped = function(_0x2f1cbf) {
    if (this.state === _0x5e412e.STATE.FLY) this.setState(_0x5e412e.STATE.RUN);
    else if (this.state === _0x5e412e.STATE.RUN) this.setState(_0x5e412e.STATE.SHELL), this.transformTimer = _0xafe583.TRANSFORM_TIME;
    else if (this.state === _0x5e412e.STATE.SPIN) this.setState(_0x5e412e.STATE.SHELL), this.transformTimer = _0xafe583.TRANSFORM_TIME;
    else if (this.state === _0x5e412e.STATE.SHELL || this.state === _0x5e412e.STATE.TRANSFORM) this.setState(_0x5e412e.STATE.SPIN), this.dir = _0x2f1cbf;
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
_0x5e412e.prototype.playerCollide = function(_0x2665f3) {
    this.dead || this.garbage || (this.state === _0x5e412e.STATE.SHELL || this.state === _0x5e412e.STATE.TRANSFORM ? (_0x2665f3 = 0x0 < _0x2665f3.pos.x - this.pos.x, this.stomped(_0x2665f3), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, _0x2665f3 ? 0x10 : 0x11)), this.immuneTimer = _0xafe583.PLAYER_IMMUNE_TIME) : 0x0 >= this.immuneTimer && _0x2665f3.damage(this));
};
_0x5e412e.prototype.playerStomp = _0xafe583.prototype.playerStomp;
_0x5e412e.prototype.playerBump = _0xafe583.prototype.playerBump;
_0x5e412e.prototype.kill = _0xafe583.prototype.kill;
_0x5e412e.prototype.destroy = _0xafe583.prototype.destroy;
_0x5e412e.prototype.isTangible = _0xafe583.prototype.isTangible;
_0x5e412e.prototype.setState = _0xafe583.prototype.setState;
_0x5e412e.prototype.draw = function(_0x6357b4) {
    if (!this.disabled) {
        var _0x249e88;
        _0x249e88 = this.state === _0x5e412e.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0xafe583.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0xe3aa3a = this.sprite.INDEX, _0x331f7c = 0x0; _0x331f7c < _0xe3aa3a.length; _0x331f7c++)
                for (var _0x55c5a9 = 0x0; _0x55c5a9 < _0xe3aa3a[_0x331f7c].length; _0x55c5a9++) {
                    var _0x1d1e23 = _0xe3aa3a[0x3 !== _0x249e88 ? _0x331f7c : _0xe3aa3a.length - 0x1 - _0x331f7c][_0x55c5a9];
                    switch (this.variant) {
                        case 0x1:
                            _0x1d1e23 += _0xafe583.VARIANT_OFFSET;
                    }
                    _0x6357b4.push({
                        'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x55c5a9, _0x331f7c)),
                        'reverse': !this.dir,
                        'index': _0x1d1e23,
                        'mode': _0x249e88
                    });
                } else {
                    _0x1d1e23 = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0x1d1e23 += _0xafe583.VARIANT_OFFSET;
                    }
                    _0x6357b4.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0x1d1e23,
                        'mode': _0x249e88
                    });
                }
    }
};
_0x5e412e.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x5e412e);
"use strict";

function _0xa70071(_0x2b798e, _0x51f029, _0x309b8b, _0x6b74f, _0x5cdcce, _0x3c9788) {
    _0x3da6cc.call(this, _0x2b798e, _0x51f029, _0x309b8b, _0x26de58.add(_0x6b74f, _0x26de58.make(0.6, 0x0)));
    this.oid = _0x5cdcce;
    this.variant = isNaN(parseInt(_0x3c9788)) ? 0x0 : parseInt(_0x3c9788);
    this.setState(_0xa70071.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.loc = [_0x26de58.copy(this.pos), _0x26de58.add(this.pos, _0x26de58.make(0x0, -1.5))];
    this.dim = _0x26de58.make(0.8, 0x1);
    this.dir = this.fallSpeed = this.moveSpeed = 0x0;
}
_0xa70071.ASYNC = !0x1;
_0xa70071.ID = 0x16;
_0xa70071.NAME = "UNSPELLABLE PLANT";
_0xa70071.ANIMATION_RATE = 0x3;
_0xa70071.VARIANT_OFFSET = 0x20;
_0xa70071.SOFFSET = _0x26de58.make(-0.1, 0x0);
_0xa70071.BONK_TIME = 0x5a;
_0xa70071.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0xa70071.BONK_DECEL = 0.925;
_0xa70071.BONK_FALL_SPEED = 0.5;
_0xa70071.FALL_SPEED_ACCEL = 0.085;
_0xa70071.WAIT_TIME = 0x19;
_0xa70071.TRAVEL_SPEED = 0.05;
_0xa70071.SPRITE = {};
_0xa70071.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0x6a],
        [0x5a]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0x6b],
        [0x5b]
    ]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xa70071.SPRITE_LIST.length; _0x1bec55++) _0xa70071.SPRITE[_0xa70071.SPRITE_LIST[_0x1bec55].NAME] = _0xa70071.SPRITE_LIST[_0x1bec55], _0xa70071.SPRITE[_0xa70071.SPRITE_LIST[_0x1bec55].ID] = _0xa70071.SPRITE_LIST[_0x1bec55];
_0xa70071.STATE = {};
_0xa70071.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0xa70071.SPRITE.IDLE0, _0xa70071.SPRITE.IDLE1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xa70071.STATE_LIST.length; _0x1bec55++) _0xa70071.STATE[_0xa70071.STATE_LIST[_0x1bec55].NAME] = _0xa70071.STATE_LIST[_0x1bec55], _0xa70071.STATE[_0xa70071.STATE_LIST[_0x1bec55].ID] = _0xa70071.STATE_LIST[_0x1bec55];
_0xa70071.prototype.update = function(_0x5c481f) {
    switch (_0x5c481f) {
        case 0x1:
            this.bonk();
    }
};
_0xa70071.prototype.step = function() {
    this.state === _0xa70071.STATE.BONK ? this.bonkTimer++ > _0xa70071.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0xa70071.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0xa70071.FALL_SPEED_ACCEL, -_0xa70071.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0xa70071.ANIMATION_RATE) % this.state.SPRITE.length], 0x0 < --this.waitTimer || (this.control(), this.physics(), this.sound()));
};
_0xa70071.prototype.control = function() {};
_0xa70071.prototype.physics = function() {
    var _0x3e7dc7 = this.loc[this.dir ? 0x0 : 0x1];
    _0x26de58.distance(this.pos, _0x3e7dc7) <= _0xa70071.TRAVEL_SPEED ? (this.pos = _0x3e7dc7, this.dir = !this.dir, this.waitTimer = _0xa70071.WAIT_TIME) : this.pos = _0x26de58.add(this.pos, _0x26de58.scale(_0x26de58.normalize(_0x26de58.subtract(_0x3e7dc7, this.pos)), _0xa70071.TRAVEL_SPEED));
};
_0xa70071.prototype.sound = _0x3da6cc.prototype.sound;
_0xa70071.prototype.damage = function(_0x508a32) {
    this.dead || (this.bonk(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0xa70071.prototype.bonk = function() {
    this.dead || (this.setState(_0xa70071.STATE.BONK), this.moveSpeed = _0xa70071.BONK_IMP.x, this.fallSpeed = _0xa70071.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0xa70071.prototype.playerCollide = function(_0x3bb251) {
    this.dead || this.garbage || _0x3bb251.damage(this);
};
_0xa70071.prototype.playerStomp = function(_0x8423cf) {
    this.dead || this.garbage || _0x8423cf.damage(this);
};
_0xa70071.prototype.playerBump = function(_0x321a69) {
    this.dead || this.garbage || _0x321a69.damage(this);
};
_0xa70071.prototype.kill = function() {};
_0xa70071.prototype.destroy = _0x3da6cc.prototype.destroy;
_0xa70071.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0xa70071.prototype.setState = function(_0x3f1709) {
    _0x3f1709 !== this.state && (this.state = _0x3f1709, 0x0 < _0x3f1709.SPRITE.length && (this.sprite = _0x3f1709.SPRITE[0x0]), this.anim = 0x0);
};
_0xa70071.prototype.draw = function(_0x18fbd3) {
    var _0x1227df;
    _0x1227df = this.state === _0xa70071.STATE.BONK ? 0x3 : 0x0;
    if (this.sprite.INDEX instanceof Array)
        for (var _0x272181 = this.sprite.INDEX, _0x4bdd3b = 0x0; _0x4bdd3b < _0x272181.length; _0x4bdd3b++)
            for (var _0x3c8e54 = 0x0; _0x3c8e54 < _0x272181[_0x4bdd3b].length; _0x3c8e54++) {
                var _0x29f699 = _0x272181[_0x1227df ? _0x272181.length - 0x1 - _0x4bdd3b : _0x4bdd3b][_0x3c8e54];
                switch (this.variant) {
                    case 0x1:
                        _0x29f699 += _0xa70071.VARIANT_OFFSET;
                }
                _0x18fbd3.push({
                    'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x26de58.make(_0x3c8e54, _0x4bdd3b)), _0xa70071.SOFFSET),
                    'reverse': !this.dir,
                    'index': _0x29f699,
                    'mode': _0x1227df
                });
            } else {
                _0x29f699 = this.sprite.INDEX;
                switch (this.variant) {
                    case 0x1:
                        _0x29f699 += _0xa70071.VARIANT_OFFSET;
                }
                _0x18fbd3.push({
                    'pos': _0x26de58.add(this.pos, _0xa70071.SOFFSET),
                    'reverse': !this.dir,
                    'index': _0x29f699,
                    'mode': _0x1227df
                });
            }
};
_0xa70071.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0xa70071);
"use strict";

function _0x25ddce(_0x171be9, _0x49adc1, _0x3c512b, _0xf8ff83, _0x140a9f, _0x26dec7, _0x3b38a6) {
    _0x3da6cc.call(this, _0x171be9, _0x49adc1, _0x3c512b, _0xf8ff83);
    this.oid = _0x140a9f;
    this.setState(_0x25ddce.STATE.IDLE);
    this.delay = isNaN(parseInt(_0x26dec7)) ? _0x25ddce.DELAY_DEFAULT : parseInt(_0x26dec7);
    this.impulse = isNaN(parseFloat(_0x3b38a6)) ? 0x1 : parseFloat(_0x3b38a6);
    this.anim = 0x0;
    this.disabled = !0x1;
    this.delayTimer = this.delay;
    this.bonkTimer = 0x0;
    this.pos.x += _0x25ddce.SOFFSET.x;
    this.loc = _0x26de58.copy(this.pos);
    this.moveSpeed = this.fallSpeed = 0x0;
    this.dim = _0x26de58.make(0.7, 0.7);
    this.dir = !0x0;
}
_0x25ddce.ASYNC = !0x1;
_0x25ddce.ID = 0x15;
_0x25ddce.NAME = "FLYING FISH";
_0x25ddce.ANIMATION_RATE = 0x3;
_0x25ddce.BONK_TIME = 0x5a;
_0x25ddce.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0x25ddce.BONK_DECEL = 0.925;
_0x25ddce.BONK_FALL_SPEED = 0.5;
_0x25ddce.BONK_FALL_ACCEL = 0.085;
_0x25ddce.DELAY_DEFAULT = 0x96;
_0x25ddce.IMPULSE = _0x26de58.make(0.225, 0.335);
_0x25ddce.DRAG = 0.996;
_0x25ddce.FALL_SPEED_ACCEL = 0.0055;
_0x25ddce.SOFFSET = _0x26de58.make(0.15, 0.15);
_0x25ddce.SPRITE = {};
_0x25ddce.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xce
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xcf
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x25ddce.SPRITE_LIST.length; _0x1bec55++) _0x25ddce.SPRITE[_0x25ddce.SPRITE_LIST[_0x1bec55].NAME] = _0x25ddce.SPRITE_LIST[_0x1bec55], _0x25ddce.SPRITE[_0x25ddce.SPRITE_LIST[_0x1bec55].ID] = _0x25ddce.SPRITE_LIST[_0x1bec55];
_0x25ddce.STATE = {};
_0x25ddce.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x25ddce.SPRITE.IDLE0, _0x25ddce.SPRITE.IDLE1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x25ddce.STATE_LIST.length; _0x1bec55++) _0x25ddce.STATE[_0x25ddce.STATE_LIST[_0x1bec55].NAME] = _0x25ddce.STATE_LIST[_0x1bec55], _0x25ddce.STATE[_0x25ddce.STATE_LIST[_0x1bec55].ID] = _0x25ddce.STATE_LIST[_0x1bec55];
_0x25ddce.prototype.update = function(_0x31e5a7) {
    switch (_0x31e5a7) {
        case 0x1:
            this.bonk();
    }
};
_0x25ddce.prototype.step = function() {
    this.state === _0x25ddce.STATE.BONK ? this.bonkTimer++ > _0x25ddce.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x25ddce.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x25ddce.BONK_FALL_ACCEL, -_0x25ddce.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x25ddce.ANIMATION_RATE) % this.state.SPRITE.length], 0x0 < this.delayTimer ? this.delayTimer-- : this.jump(), this.physics(), this.sound());
};
_0x25ddce.prototype.physics = function() {
    this.pos.y > this.loc.y || 0x0 < this.fallSpeed ? (this.fallSpeed = (this.fallSpeed - _0x25ddce.FALL_SPEED_ACCEL) * _0x25ddce.DRAG, this.pos.x += this.moveSpeed * _0x25ddce.DRAG, this.pos.y += this.fallSpeed) : this.disable();
};
_0x25ddce.prototype.sound = _0x3da6cc.prototype.sound;
_0x25ddce.prototype.jump = function() {
    this.enable();
    this.pos = _0x26de58.copy(this.loc);
    this.fallSpeed = _0x25ddce.IMPULSE.y * this.impulse;
    this.moveSpeed = _0x25ddce.IMPULSE.x * this.impulse;
    this.delayTimer = this.delay;
};
_0x25ddce.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x25ddce.prototype.enable = function() {
    this.disabled = !0x1;
};
_0x25ddce.prototype.damage = function(_0x491a38) {
    this.dead || (this.bonk(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x25ddce.prototype.bonk = function() {
    this.dead || (this.setState(_0x25ddce.STATE.BONK), this.moveSpeed = _0x25ddce.BONK_IMP.x, this.fallSpeed = _0x25ddce.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x25ddce.prototype.playerCollide = function(_0x28a0cf) {
    this.dead || this.garbage || _0x28a0cf.damage(this);
};
_0x25ddce.prototype.playerStomp = function(_0x2eb09b) {
    this.dead || this.garbage || (this.bonk(), _0x2eb09b.bounce(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x25ddce.prototype.playerBump = function(_0x5e66c8) {
    this.playerCollide(_0x5e66c8);
};
_0x25ddce.prototype.kill = function() {};
_0x25ddce.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x25ddce.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x25ddce.prototype.setState = function(_0x2afd8b) {
    _0x2afd8b !== this.state && (this.state = _0x2afd8b, 0x0 < _0x2afd8b.SPRITE.length && (this.sprite = _0x2afd8b.SPRITE[0x0]), this.anim = 0x0);
};
_0x25ddce.prototype.draw = function(_0x45125b) {
    if (!this.disabled) {
        var _0x455f65;
        _0x455f65 = this.state === _0x25ddce.STATE.BONK ? 0x3 : 0x0;
        _0x45125b.push({
            'pos': _0x26de58.subtract(this.pos, _0x25ddce.SOFFSET),
            'reverse': this.dir,
            'index': this.sprite.INDEX,
            'mode': _0x455f65
        });
    }
};
_0x25ddce.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x25ddce);
"use strict";

function _0x1f4abb(_0x25bac6, _0xab1441, _0x1bd210, _0xd7b1a8, _0x55466e, _0xde92bf) {
    _0x3da6cc.call(this, _0x25bac6, _0xab1441, _0x1bd210, _0xd7b1a8);
    this.oid = _0x55466e;
    this.setState(_0x1f4abb.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.dim = _0x26de58.make(0x1, 1.5);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.hammer = void 0x0;
    this.loc = 0x1 === parseInt(_0xde92bf) ? [this.pos.x + _0x1f4abb.MOVE_AREA, this.pos.x] : [this.pos.x, this.pos.x - _0x1f4abb.MOVE_AREA];
    this.groundTimer = this.double = this.attackAnimTimer = this.attackTimer = 0x0;
    this.jumpTimer = -0x1;
    this.reverse = !0x1;
    this.dir = !0x0;
    this.disable();
}
_0x1f4abb.ASYNC = !0x1;
_0x1f4abb.ID = 0x31;
_0x1f4abb.NAME = "HAMMER BRO";
_0x1f4abb.ANIMATION_RATE = 0x5;
_0x1f4abb.ENABLE_FADE_TIME = 0xf;
_0x1f4abb.ENABLE_DIST = 0x21;
_0x1f4abb.BONK_TIME = 0x5a;
_0x1f4abb.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0x1f4abb.BONK_DECEL = 0.925;
_0x1f4abb.BONK_FALL_SPEED = 0.5;
_0x1f4abb.MOVE_SPEED_MAX = 0.095;
_0x1f4abb.JUMP_DELAY = 0x37;
_0x1f4abb.MOVE_AREA = 0x4;
_0x1f4abb.JUMP_LENGTH = 0x8;
_0x1f4abb.JUMP_DECEL = 0.009;
_0x1f4abb.ATTACK_DELAY = 0x4b;
_0x1f4abb.DOUBLE_RATE = 0x5;
_0x1f4abb.ATTACK_ANIM_LENGTH = 0xd;
_0x1f4abb.PROJ_OFFSET = _0x26de58.make(0.5, 1.25);
_0x1f4abb.FALL_SPEED_MAX = 0.3;
_0x1f4abb.FALL_SPEED_ACCEL = 0.085;
_0x1f4abb.SPRITE = {};
_0x1f4abb.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0x6e],
        [0x5e]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0x6d],
        [0x5d]
    ]
}, {
    'NAME': "ATTACK",
    'ID': 0x2,
    'INDEX': [
        [0x6c],
        [0x5c]
    ]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1f4abb.SPRITE_LIST.length; _0x1bec55++) _0x1f4abb.SPRITE[_0x1f4abb.SPRITE_LIST[_0x1bec55].NAME] = _0x1f4abb.SPRITE_LIST[_0x1bec55], _0x1f4abb.SPRITE[_0x1f4abb.SPRITE_LIST[_0x1bec55].ID] = _0x1f4abb.SPRITE_LIST[_0x1bec55];
_0x1f4abb.STATE = {};
_0x1f4abb.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x1f4abb.SPRITE.IDLE0, _0x1f4abb.SPRITE.IDLE1]
}, {
    'NAME': "FALL",
    'ID': 0x1,
    'SPRITE': [_0x1f4abb.SPRITE.IDLE1]
}, {
    'NAME': "ATTACK",
    'ID': 0x2,
    'SPRITE': [_0x1f4abb.SPRITE.ATTACK]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1f4abb.STATE_LIST.length; _0x1bec55++) _0x1f4abb.STATE[_0x1f4abb.STATE_LIST[_0x1bec55].NAME] = _0x1f4abb.STATE_LIST[_0x1bec55], _0x1f4abb.STATE[_0x1f4abb.STATE_LIST[_0x1bec55].ID] = _0x1f4abb.STATE_LIST[_0x1bec55];
_0x1f4abb.prototype.update = function(_0x3402c2) {
    switch (_0x3402c2) {
        case 0x1:
            this.bonk();
            break;
        case 0xa0:
            this.enable();
    }
};
_0x1f4abb.prototype.step = function() {
    this.disabled ? this.proximity() : (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x1f4abb.STATE.BONK ? this.bonkTimer++ > _0x1f4abb.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x1f4abb.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x1f4abb.FALL_SPEED_ACCEL, -_0x1f4abb.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x1f4abb.ANIMATION_RATE) % this.state.SPRITE.length], this.face(), this.control(), this.physics(), this.sound(), 0x0 < this.attackAnimTimer ? (this.setState(_0x1f4abb.STATE.ATTACK), this.attach(), this.attackAnimTimer--) : this.attackTimer++ > _0x1f4abb.ATTACK_DELAY ? this.attack() : this.hammer = void 0x0, 0x0 > this.pos.y && this.destroy()));
};
_0x1f4abb.prototype.control = function() {
    this.grounded ? (_0x1f4abb.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0x0), this.pos.x > this.loc[0x0] ? this.reverse = !0x0 : this.pos.x < this.loc[0x1] && (this.reverse = !0x1)) : this.jumpTimer > _0x1f4abb.JUMP_LENGTH && (this.jumpTimer = -0x1);
    this.grounded ? this.setState(_0x1f4abb.STATE.IDLE) : this.setState(_0x1f4abb.STATE.FALL);
    this.moveSpeed = 0.75 * this.moveSpeed + 0.25 * (this.reverse ? -_0x1f4abb.MOVE_SPEED_MAX : _0x1f4abb.MOVE_SPEED_MAX);
};
_0x1f4abb.prototype.physics = function() {
    -0x1 !== this.jumpTimer ? (this.fallSpeed = _0x1f4abb.FALL_SPEED_MAX - this.jumpTimer * _0x1f4abb.JUMP_DECEL, this.jumpTimer++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x1f4abb.FALL_SPEED_ACCEL, -_0x1f4abb.FALL_SPEED_MAX));
    var _0x12b803 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
        _0x176893 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
        _0x27250d = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0xfe9df8 = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x27250d = this.game.world.getZone(this.level, this.zone).getTiles(_0x27250d, _0xfe9df8),
        _0xfe9df8 = _0x26de58.make(0x1, 0x1);
    this.grounded = !0x1;
    for (var _0xac132f = 0x0; _0xac132f < _0x27250d.length; _0xac132f++) {
        var _0x44201c = _0x27250d[_0xac132f];
        _0x44201c.definition.COLLIDE && _0x1badb6.intersection(_0x44201c.pos, _0xfe9df8, _0x12b803, this.dim) && (this.pos.x + this.dim.x <= _0x44201c.pos.x && _0x12b803.x + this.dim.x > _0x44201c.pos.x ? (_0x12b803.x = _0x44201c.pos.x - this.dim.x, _0x176893.x = _0x12b803.x, this.moveSpeed = 0x0) : this.pos.x >= _0x44201c.pos.x + _0xfe9df8.x && _0x12b803.x < _0x44201c.pos.x + _0xfe9df8.x && (_0x12b803.x = _0x44201c.pos.x + _0xfe9df8.x, _0x176893.x = _0x12b803.x, this.moveSpeed = 0x0));
    }
    for (_0xac132f = 0x0; _0xac132f < _0x27250d.length; _0xac132f++) _0x44201c = _0x27250d[_0xac132f], _0x44201c.definition.COLLIDE && _0x1badb6.intersection(_0x44201c.pos, _0xfe9df8, _0x176893, this.dim) && (this.pos.y >= _0x44201c.pos.y + _0xfe9df8.y && _0x176893.y < _0x44201c.pos.y + _0xfe9df8.y ? (_0x176893.y = _0x44201c.pos.y + _0xfe9df8.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x44201c.pos.y && _0x176893.y + this.dim.y > _0x44201c.pos.y && (_0x176893.y = _0x44201c.pos.y - this.dim.y, this.jumpTimer = -0x1, this.fallSpeed = 0x0));
    this.pos = _0x26de58.make(_0x12b803.x, _0x176893.y);
};
_0x1f4abb.prototype.proximity = function() {
    var _0x2e2202 = this.game.getPlayer();
    _0x2e2202 && !_0x2e2202.dead && _0x2e2202.level === this.level && _0x2e2202.zone === this.zone && !this.proxHit && _0x26de58.distance(_0x2e2202.pos, this.pos) < _0x1f4abb.ENABLE_DIST && (this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
_0x1f4abb.prototype.face = function() {
    for (var _0xe75dbb, _0x338971 = 0x0; _0x338971 < this.game.objects.length; _0x338971++) {
        var _0x345c5d = this.game.objects[_0x338971];
        _0x345c5d instanceof PlayerObject && _0x345c5d.level === this.level && _0x345c5d.zone === this.zone && _0x345c5d.isTangible() && (!_0xe75dbb || Math.abs(_0xe75dbb) > _0x26de58.distance(_0x345c5d.pos, this.pos)) && (_0xe75dbb = _0x345c5d.pos.x - this.pos.x);
    }
    this.dir = _0xe75dbb ? 0x0 > _0xe75dbb : !0x0;
};
_0x1f4abb.prototype.sound = _0x3da6cc.prototype.sound;
_0x1f4abb.prototype.enable = function() {
    this.disabled && (this.disabled = !0x1, this.disabledTimer = _0x1f4abb.ENABLE_FADE_TIME);
};
_0x1f4abb.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x1f4abb.prototype.attack = function() {
    this.attackAnimTimer = _0x1f4abb.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0x0;
    this.hammer = this.game.createObject(_0x1bc0ed.ID, this.level, this.zone, _0x26de58.add(this.pos, _0x1f4abb.PROJ_OFFSET), [this]);
    ++this.double > _0x1f4abb.DOUBLE_RATE && (this.double = 0x0, this.attackTimer = _0x1f4abb.ATTACK_DELAY);
};
_0x1f4abb.prototype.attach = function() {
    this.hammer && (this.hammer.pos = _0x26de58.add(this.pos, _0x1f4abb.PROJ_OFFSET), this.hammer.dir = !this.dir);
};
_0x1f4abb.prototype.playerCollide = function(_0x4b48ff) {
    this.dead || this.garbage || _0x4b48ff.damage(this);
};
_0x1f4abb.prototype.playerStomp = function(_0x382396) {
    this.dead || this.garbage || (this.bonk(), _0x382396.bounce(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x1f4abb.prototype.playerBump = _0x1f4abb.prototype.playerCollide;
_0x1f4abb.prototype.damage = function(_0x23a76d) {
    this.dead || (this.bonk(), _0x30e075.encode(this.level, this.zone, this.oid, 0x1));
};
_0x1f4abb.prototype.bonk = function() {
    this.dead || (this.setState(_0x1f4abb.STATE.BONK), this.moveSpeed = _0x1f4abb.BONK_IMP.x, this.fallSpeed = _0x1f4abb.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x1f4abb.prototype.kill = function() {};
_0x1f4abb.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x1f4abb.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x1f4abb.prototype.setState = function(_0x44adae) {
    _0x44adae !== this.state && (this.state = _0x44adae, 0x0 < _0x44adae.SPRITE.length && (this.sprite = _0x44adae.SPRITE[0x0]), this.anim = 0x0);
};
_0x1f4abb.prototype.draw = function(_0x4d458c) {
    if (!this.disabled) {
        var _0x534d18;
        _0x534d18 = this.state === _0x1f4abb.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0x1f4abb.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x571330 = this.sprite.INDEX, _0x3d1c2f = 0x0; _0x3d1c2f < _0x571330.length; _0x3d1c2f++)
                for (var _0x35bd43 = 0x0; _0x35bd43 < _0x571330[_0x3d1c2f].length; _0x35bd43++) _0x4d458c.push({
                    'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x35bd43, _0x3d1c2f)),
                    'reverse': !this.dir,
                    'index': _0x571330[0x3 !== _0x534d18 ? _0x3d1c2f : _0x571330.length - 0x1 - _0x3d1c2f][_0x35bd43],
                    'mode': _0x534d18
                });
        else _0x4d458c.push({
            'pos': this.pos,
            'reverse': !this.dir,
            'index': this.sprite.INDEX,
            'mode': _0x534d18
        });
    }
};
_0x1f4abb.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x1f4abb);
"use strict";

function BowserObject(_0x296e51, _0xaf6db9, _0x35a12d, _0x5dd1db, _0x1c5ca6) {
    _0x3da6cc.call(this, _0x296e51, _0xaf6db9, _0x35a12d, _0x5dd1db);
    this.oid = _0x1c5ca6;
    this.state = BowserObject.STATE.RUN;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.health = BowserObject.HEALTH;
    this.bonkTimer = 0x0;
    this.dim = _0x26de58.make(0x2, 0x2);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.grounded = !0x1;
    this.loc = [this.pos.x, this.pos.x - BowserObject.MOVE_AREA];
    this.groundTimer = this.attackAnimTimer = this.attackTimer = 0x0;
    this.jumpTimer = -0x1;
    this.reverse = !0x1;
    this.dir = !0x0;
}
BowserObject.ASYNC = !0x0;
BowserObject.ID = 0x19;
BowserObject.NAME = "BOWSER";
BowserObject.ANIMATION_RATE = 0x5;
BowserObject.HEALTH = 0x5;
BowserObject.BONK_TIME = 0x5a;
BowserObject.BONK_IMP = _0x26de58.make(0.25, 0.4);
BowserObject.BONK_DECEL = 0.925;
BowserObject.BONK_FALL_SPEED = 0.5;
BowserObject.MOVE_SPEED_MAX = 0.095;
BowserObject.JUMP_DELAY = 0x2d;
BowserObject.MOVE_AREA = 0x5;
BowserObject.JUMP_LENGTH = 0x6;
BowserObject.JUMP_DECEL = 0.009;
BowserObject.ATTACK_DELAY = 0x4b;
BowserObject.ATTACK_ANIM_LENGTH = 0xf;
BowserObject.PROJ_OFFSET = _0x26de58.make(-0.25, 0.25);
BowserObject.FALL_SPEED_MAX = 0.3;
BowserObject.FALL_SPEED_ACCEL = 0.085;
BowserObject.SPRITE = {};
BowserObject.SPRITE_LIST = [{
    'NAME': "RUN0",
    'ID': 0x0,
    'INDEX': [
        [0xc4, 0xc5],
        [0xb4, 0xb5]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x1,
    'INDEX': [
        [0xc6, 0xc7],
        [0xb6, 0xb7]
    ]
}, {
    'NAME': "ATTACK0",
    'ID': 0x2,
    'INDEX': [
        [0xc0, 0xc1],
        [0xb0, 0xb1]
    ]
}, {
    'NAME': "ATTACK1",
    'ID': 0x3,
    'INDEX': [
        [0xc2, 0xc3],
        [0xb2, 0xb3]
    ]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < BowserObject.SPRITE_LIST.length; _0x1bec55++) BowserObject.SPRITE[BowserObject.SPRITE_LIST[_0x1bec55].NAME] = BowserObject.SPRITE_LIST[_0x1bec55], BowserObject.SPRITE[BowserObject.SPRITE_LIST[_0x1bec55].ID] = BowserObject.SPRITE_LIST[_0x1bec55];
BowserObject.STATE = {};
BowserObject.STATE_LIST = [{
    'NAME': "RUN",
    'ID': 0x0,
    'SPRITE': [BowserObject.SPRITE.RUN0, BowserObject.SPRITE.RUN1]
}, {
    'NAME': "ATTACK",
    'ID': 0x1,
    'SPRITE': [BowserObject.SPRITE.ATTACK0, BowserObject.SPRITE.ATTACK1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < BowserObject.STATE_LIST.length; _0x1bec55++) BowserObject.STATE[BowserObject.STATE_LIST[_0x1bec55].NAME] = BowserObject.STATE_LIST[_0x1bec55], BowserObject.STATE[BowserObject.STATE_LIST[_0x1bec55].ID] = BowserObject.STATE_LIST[_0x1bec55];
BowserObject.prototype.update = function(_0x45393d) {};
BowserObject.prototype.step = function() {
    this.state === BowserObject.STATE.BONK ? this.bonkTimer++ > BowserObject.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= BowserObject.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - BowserObject.FALL_SPEED_ACCEL, -BowserObject.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / BowserObject.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.sound(), this.attackTimer++ > BowserObject.ATTACK_DELAY && this.attack(), 0x0 < this.attackAnimTimer ? (this.setState(BowserObject.STATE.ATTACK), this.attackAnimTimer--) : this.setState(BowserObject.STATE.RUN), 0x0 > this.pos.y && this.destroy());
};
BowserObject.prototype.control = function() {
    this.grounded ? (BowserObject.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0x0), this.pos.x > this.loc[0x0] ? this.reverse = !0x0 : this.pos.x < this.loc[0x1] && (this.reverse = !0x1)) : this.jumpTimer > BowserObject.JUMP_LENGTH && (this.jumpTimer = -0x1);
    this.moveSpeed = 0.75 * this.moveSpeed + 0.25 * (this.reverse ? -BowserObject.MOVE_SPEED_MAX : BowserObject.MOVE_SPEED_MAX);
};
BowserObject.prototype.physics = function() {
    -0x1 !== this.jumpTimer ? (this.fallSpeed = BowserObject.FALL_SPEED_MAX - this.jumpTimer * BowserObject.JUMP_DECEL, this.jumpTimer++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - BowserObject.FALL_SPEED_ACCEL, -BowserObject.FALL_SPEED_MAX));
    var _0x85d755 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
        _0x471885 = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
        _0x3ec375 = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x486f5e = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x3ec375 = this.game.world.getZone(this.level, this.zone).getTiles(_0x3ec375, _0x486f5e),
        _0x486f5e = _0x26de58.make(0x1, 0x1);
    this.grounded = !0x1;
    for (var _0x2d6663 = 0x0; _0x2d6663 < _0x3ec375.length; _0x2d6663++) {
        var _0x50845a = _0x3ec375[_0x2d6663];
        _0x50845a.definition.COLLIDE && _0x1badb6.intersection(_0x50845a.pos, _0x486f5e, _0x85d755, this.dim) && (this.pos.x + this.dim.x <= _0x50845a.pos.x && _0x85d755.x + this.dim.x > _0x50845a.pos.x ? (_0x85d755.x = _0x50845a.pos.x - this.dim.x, _0x471885.x = _0x85d755.x, this.moveSpeed = 0x0) : this.pos.x >= _0x50845a.pos.x + _0x486f5e.x && _0x85d755.x < _0x50845a.pos.x + _0x486f5e.x && (_0x85d755.x = _0x50845a.pos.x + _0x486f5e.x, _0x471885.x = _0x85d755.x, this.moveSpeed = 0x0));
    }
    for (_0x2d6663 = 0x0; _0x2d6663 < _0x3ec375.length; _0x2d6663++) _0x50845a = _0x3ec375[_0x2d6663], _0x50845a.definition.COLLIDE && _0x1badb6.intersection(_0x50845a.pos, _0x486f5e, _0x471885, this.dim) && (this.pos.y >= _0x50845a.pos.y + _0x486f5e.y && _0x471885.y < _0x50845a.pos.y + _0x486f5e.y ? (_0x471885.y = _0x50845a.pos.y + _0x486f5e.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x50845a.pos.y && _0x471885.y + this.dim.y > _0x50845a.pos.y && (_0x471885.y = _0x50845a.pos.y - this.dim.y, this.jumpTimer = -0x1, this.fallSpeed = 0x0));
    this.pos = _0x26de58.make(_0x85d755.x, _0x471885.y);
};
BowserObject.prototype.sound = _0x3da6cc.prototype.sound;
BowserObject.prototype.attack = function() {
    this.attackAnimTimer = BowserObject.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0x0;
    this.game.createObject(_0x1899b7.ID, this.level, this.zone, _0x26de58.add(this.pos, BowserObject.PROJ_OFFSET), []);
    this.play("sfx/breath.wav", 1.5, 0.04);
};
BowserObject.prototype.playerCollide = function(_0x30ea43) {
    this.dead || this.garbage || _0x30ea43.damage(this);
};
BowserObject.prototype.playerStomp = BowserObject.prototype.playerCollide;
BowserObject.prototype.playerBump = BowserObject.prototype.playerCollide;
BowserObject.prototype.damage = function(_0x25178b) {
    this.dead || 0x0 >= --this.health && this.bonk();
};
BowserObject.prototype.bonk = function() {
    this.dead || (this.setState(BowserObject.STATE.BONK), this.moveSpeed = BowserObject.BONK_IMP.x, this.fallSpeed = BowserObject.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
BowserObject.prototype.kill = function() {};
BowserObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
BowserObject.prototype.destroy = _0x3da6cc.prototype.destroy;
BowserObject.prototype.setState = function(_0x19037e) {
    _0x19037e !== this.state && (this.state = _0x19037e, 0x0 < _0x19037e.SPRITE.length && (this.sprite = _0x19037e.SPRITE[0x0]), this.anim = 0x0);
};
BowserObject.prototype.draw = function(_0xdf4ab3) {
    var _0x21f360;
    _0x21f360 = this.state === BowserObject.STATE.BONK ? 0x3 : 0x0;
    if (this.sprite.INDEX instanceof Array)
        for (var _0x132286 = this.sprite.INDEX, _0x1479b4 = 0x0; _0x1479b4 < _0x132286.length; _0x1479b4++)
            for (var _0x58ee5e = 0x0; _0x58ee5e < _0x132286[_0x1479b4].length; _0x58ee5e++) _0xdf4ab3.push({
                'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x58ee5e, _0x1479b4)),
                'reverse': !this.dir,
                'index': _0x132286[_0x21f360 ? _0x132286.length - 0x1 - _0x1479b4 : _0x1479b4][_0x58ee5e],
                'mode': _0x21f360
            });
    else _0xdf4ab3.push({
        'pos': this.pos,
        'reverse': !this.dir,
        'index': this.sprite.INDEX,
        'mode': _0x21f360
    });
};
BowserObject.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(BowserObject);
"use strict";

function _0x5bbb5e(_0x38f9a7, _0x27f352, _0x55bfab, _0x551362, _0x61ea43, _0x1b085a, _0x1d905f, _0x54af71, _0x46cdb7, _0x151f14, _0x271b52, _0x57f60d) {
    _0x3da6cc.call(this, _0x38f9a7, _0x27f352, _0x55bfab, _0x551362);
    this.oid = _0x61ea43;
    this.setState(_0x5bbb5e.STATE.IDLE);
    this.loc = 0x0 === parseInt(_0x57f60d) ? [_0x551362, _0x26de58.add(_0x551362, _0x26de58.make(parseInt(_0x1d905f), parseInt(_0x54af71)))] : [_0x26de58.add(_0x551362, _0x26de58.make(parseInt(_0x1d905f), parseInt(_0x54af71))), _0x551362];
    this.anim = 0x0;
    this.dim = _0x26de58.make(parseInt(_0x1b085a), 0.5);
    this.speed = parseFloat(_0x46cdb7);
    this.riders = [];
    this.dir = !0x1;
    this.loop = 0x0 === parseInt(_0x151f14) ? !0x1 : !0x0;
    this.delay = parseInt(_0x271b52);
}
_0x5bbb5e.ASYNC = !0x0;
_0x5bbb5e.ID = 0x91;
_0x5bbb5e.NAME = "PLATFORM";
_0x5bbb5e.ANIMATION_RATE = 0x3;
_0x5bbb5e.SPRITE = {};
_0x5bbb5e.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xa0
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5bbb5e.SPRITE_LIST.length; _0x1bec55++) _0x5bbb5e.SPRITE[_0x5bbb5e.SPRITE_LIST[_0x1bec55].NAME] = _0x5bbb5e.SPRITE_LIST[_0x1bec55], _0x5bbb5e.SPRITE[_0x5bbb5e.SPRITE_LIST[_0x1bec55].ID] = _0x5bbb5e.SPRITE_LIST[_0x1bec55];
_0x5bbb5e.STATE = {};
_0x5bbb5e.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x5bbb5e.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5bbb5e.STATE_LIST.length; _0x1bec55++) _0x5bbb5e.STATE[_0x5bbb5e.STATE_LIST[_0x1bec55].NAME] = _0x5bbb5e.STATE_LIST[_0x1bec55], _0x5bbb5e.STATE[_0x5bbb5e.STATE_LIST[_0x1bec55].ID] = _0x5bbb5e.STATE_LIST[_0x1bec55];
_0x5bbb5e.prototype.update = function(_0x1936ee) {};
_0x5bbb5e.prototype.step = function() {
    0x0 < this.delay-- || (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x5bbb5e.ANIMATION_RATE) % this.state.SPRITE.length], this.physics());
};
_0x5bbb5e.prototype.physics = function() {
    var _0x4f56e4 = _0x26de58.normalize(_0x26de58.subtract(this.loc[this.dir ? 0x0 : 0x1], this.pos)),
        _0xa92877 = _0x26de58.distance(this.pos, this.loc[this.dir ? 0x0 : 0x1]);
    if (_0xa92877 < this.speed)
        if (this.loop) this.dir = !this.dir;
        else {
            this.pos = this.loc[0x0];
            this.riders = [];
            return;
        } _0x4f56e4 = _0x26de58.scale(_0x4f56e4, Math.min(this.speed, _0xa92877));
    this.pos = _0x26de58.add(this.pos, _0x4f56e4);
    for (_0xa92877 = 0x0; _0xa92877 < this.riders.length; _0xa92877++) {
        var _0x24c795 = this.riders[0x0];
        _0x24c795.pos = _0x26de58.add(_0x24c795.pos, _0x4f56e4);
    }
    this.riders = [];
};
_0x5bbb5e.prototype.riding = function(_0x3f225a) {
    this.riders.push(_0x3f225a);
};
_0x5bbb5e.prototype.kill = function() {};
_0x5bbb5e.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x5bbb5e.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x5bbb5e.prototype.setState = function(_0x1d8cb4) {
    _0x1d8cb4 !== this.state && (this.state = _0x1d8cb4, this.sprite = _0x1d8cb4.SPRITE[0x0], this.anim = 0x0);
};
_0x5bbb5e.prototype.draw = function(_0x3a5658) {
    if (!(0x0 < this.delay))
        for (var _0x3f7f2b = 0x0; _0x3f7f2b < this.dim.x; _0x3f7f2b++) _0x3a5658.push({
            'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x3f7f2b, 0x0)),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        });
};
_0x3da6cc.REGISTER_OBJECT(_0x5bbb5e);
"use strict";

function _0x4b6e2c(_0x1d4931, _0xe3dc6, _0x10f6a5, _0x3813e7, _0x1e87d2, _0x1f931e, _0x31e281, _0x3347d6, _0x53c646) {
    _0x3da6cc.call(this, _0x1d4931, _0xe3dc6, _0x10f6a5, _0x3813e7);
    this.oid = _0x1e87d2;
    this.setState(_0x4b6e2c.STATE.IDLE);
    this.loc = [_0x3813e7, _0x26de58.add(_0x3813e7, _0x26de58.make(parseInt(_0x31e281), parseInt(_0x3347d6)))];
    this.anim = 0x0;
    this.dim = _0x26de58.make(parseInt(_0x1f931e), 0.5);
    this.speed = parseFloat(_0x53c646);
    this.riders = [];
    this.dir = this.go = !0x1;
}
_0x4b6e2c.ASYNC = !0x1;
_0x4b6e2c.ID = 0x92;
_0x4b6e2c.NAME = "BUS PLATFORM";
_0x4b6e2c.ANIMATION_RATE = 0x3;
_0x4b6e2c.SPRITE = {};
_0x4b6e2c.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xa0
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x4b6e2c.SPRITE_LIST.length; _0x1bec55++) _0x4b6e2c.SPRITE[_0x4b6e2c.SPRITE_LIST[_0x1bec55].NAME] = _0x4b6e2c.SPRITE_LIST[_0x1bec55], _0x4b6e2c.SPRITE[_0x4b6e2c.SPRITE_LIST[_0x1bec55].ID] = _0x4b6e2c.SPRITE_LIST[_0x1bec55];
_0x4b6e2c.STATE = {};
_0x4b6e2c.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x4b6e2c.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x4b6e2c.STATE_LIST.length; _0x1bec55++) _0x4b6e2c.STATE[_0x4b6e2c.STATE_LIST[_0x1bec55].NAME] = _0x4b6e2c.STATE_LIST[_0x1bec55], _0x4b6e2c.STATE[_0x4b6e2c.STATE_LIST[_0x1bec55].ID] = _0x4b6e2c.STATE_LIST[_0x1bec55];
_0x4b6e2c.prototype.update = function(_0x3bfe45) {
    switch (_0x3bfe45) {
        case 0xa1:
            this.start();
    }
};
_0x4b6e2c.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x4b6e2c.ANIMATION_RATE) % this.state.SPRITE.length];
    this.physics();
};
_0x4b6e2c.prototype.physics = function() {
    if (this.go) {
        var _0x48a68f = _0x26de58.normalize(_0x26de58.subtract(this.loc[this.dir ? 0x0 : 0x1], this.pos)),
            _0x2b99c6 = _0x26de58.distance(this.pos, this.loc[this.dir ? 0x0 : 0x1]),
            _0x48a68f = _0x26de58.scale(_0x48a68f, Math.min(this.speed, _0x2b99c6));
        this.pos = _0x26de58.add(this.pos, _0x48a68f);
        for (_0x2b99c6 = 0x0; _0x2b99c6 < this.riders.length; _0x2b99c6++) {
            var _0x565fcd = this.riders[0x0];
            _0x565fcd.pos = _0x26de58.add(_0x565fcd.pos, _0x48a68f);
        }
    }
    this.riders = [];
};
_0x4b6e2c.prototype.start = function() {
    this.go = !0x0;
};
_0x4b6e2c.prototype.riding = function(_0x4a3b82) {
    _0x4a3b82.pid !== this.game.pid || this.go || this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0xa1));
    this.riders.push(_0x4a3b82);
};
_0x4b6e2c.prototype.kill = function() {};
_0x4b6e2c.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x4b6e2c.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x4b6e2c.prototype.setState = function(_0x2cdc10) {
    _0x2cdc10 !== this.state && (this.state = _0x2cdc10, this.sprite = _0x2cdc10.SPRITE[0x0], this.anim = 0x0);
};
_0x4b6e2c.prototype.draw = function(_0x53d78c) {
    if (!(0x0 < this.delay))
        for (var _0x3ce6ce = 0x0; _0x3ce6ce < this.dim.x; _0x3ce6ce++) _0x53d78c.push({
            'pos': _0x26de58.add(this.pos, _0x26de58.make(_0x3ce6ce, 0x0)),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        });
};
_0x3da6cc.REGISTER_OBJECT(_0x4b6e2c);
"use strict";

function SpringObject(_0x9d9b10, _0x5d6af4, _0x14b8a1, _0x25d330, _0x2899a3) {
    _0x3da6cc.call(this, _0x9d9b10, _0x5d6af4, _0x14b8a1, _0x25d330);
    this.oid = _0x2899a3;
    this.setState(SpringObject.STATE.EXTEND);
    this.anim = 0x0;
    this.pos = _0x26de58.add(this.pos, SpringObject.SOFFSET);
    this.dim = _0x26de58.make(0.8, 0x2);
}
SpringObject.ASYNC = !0x0;
SpringObject.ID = 0x95;
SpringObject.NAME = "SPRING";
SpringObject.ANIMATION_RATE = 0x3;
SpringObject.SOFFSET = _0x26de58.make(0.1, 0x0);
SpringObject.THRESHOLD = [0x1, 0.5];
SpringObject.POWER = 0.45;
SpringObject.SPRITE = {};
SpringObject.SPRITE_LIST = [{
    'NAME': "STAGE0",
    'ID': 0x0,
    'INDEX': [
        [0xa1],
        [0x91]
    ]
}, {
    'NAME': "STAGE1",
    'ID': 0x1,
    'INDEX': 0xa2
}, {
    'NAME': "STAGE2",
    'ID': 0x2,
    'INDEX': 0xa3
}];
for (_0x1bec55 = 0x0; _0x1bec55 < SpringObject.SPRITE_LIST.length; _0x1bec55++) SpringObject.SPRITE[SpringObject.SPRITE_LIST[_0x1bec55].NAME] = SpringObject.SPRITE_LIST[_0x1bec55], SpringObject.SPRITE[SpringObject.SPRITE_LIST[_0x1bec55].ID] = SpringObject.SPRITE_LIST[_0x1bec55];
SpringObject.STATE = {};
SpringObject.STATE_LIST = [{
    'NAME': "EXTEND",
    'ID': 0x0,
    'SPRITE': [SpringObject.SPRITE.STAGE0]
}, {
    'NAME': "HALF",
    'ID': 0x1,
    'SPRITE': [SpringObject.SPRITE.STAGE1]
}, {
    'NAME': "COMPRESS",
    'ID': 0x2,
    'SPRITE': [SpringObject.SPRITE.STAGE2]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < SpringObject.STATE_LIST.length; _0x1bec55++) SpringObject.STATE[SpringObject.STATE_LIST[_0x1bec55].NAME] = SpringObject.STATE_LIST[_0x1bec55], SpringObject.STATE[SpringObject.STATE_LIST[_0x1bec55].ID] = SpringObject.STATE_LIST[_0x1bec55];
SpringObject.prototype.update = function(_0x348375) {};
SpringObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / SpringObject.ANIMATION_RATE) % this.state.SPRITE.length];
    this.interaction();
};
SpringObject.prototype.interaction = function() {
    var _0x4c2d7a = this.game.getPlayer();
    if (_0x4c2d7a && _0x4c2d7a.level === this.level && _0x4c2d7a.zone === this.zone && _0x4c2d7a.isTangible() && _0x1badb6.intersection(this.pos, this.dim, _0x4c2d7a.pos, _0x4c2d7a.dim)) {
        var _0x370dd9 = Math.pow(0x1 - 0.5 * Math.min(Math.max(0x0, _0x4c2d7a.pos.y - this.pos.y), 0x2), 0x2);
        _0x4c2d7a.fallSpeed >= 0.75 * PlayerObject.FALL_SPEED_MAX && _0x4c2d7a.btnA && (_0x4c2d7a.jumping = 0x0, _0x4c2d7a.isSpring = !0x0);
        _0x4c2d7a.fallSpeed += Math.min(0x2 * PlayerObject.FALL_SPEED_MAX, _0x370dd9 * SpringObject.POWER);
        _0x4c2d7a.grounded = !0x1;
    }
    _0x4c2d7a = 0x2;
    for (_0x370dd9 = 0x0; _0x370dd9 < this.game.objects.length; _0x370dd9++) {
        var _0x3645c3 = this.game.objects[_0x370dd9];
        _0x3645c3 instanceof PlayerObject && _0x3645c3.level === this.level && _0x3645c3.zone === this.zone && _0x3645c3.isTangible() && _0x1badb6.intersection(this.pos, this.dim, _0x3645c3.pos, _0x3645c3.dim) && (_0x3645c3 = Math.min(Math.max(0x0, _0x3645c3.pos.y - this.pos.y), 0x2), _0x3645c3 < _0x4c2d7a && (_0x4c2d7a = _0x3645c3));
    }
    _0x4c2d7a < SpringObject.THRESHOLD[0x1] ? this.setState(SpringObject.STATE.COMPRESS) : _0x4c2d7a < SpringObject.THRESHOLD[0x0] ? this.setState(SpringObject.STATE.HALF) : this.setState(SpringObject.STATE.EXTEND);
};
SpringObject.prototype.kill = function() {};
SpringObject.prototype.destroy = _0x3da6cc.prototype.destroy;
SpringObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
SpringObject.prototype.setState = function(_0x18377f) {
    _0x18377f !== this.state && (this.state = _0x18377f, this.sprite = _0x18377f.SPRITE[0x0], this.anim = 0x0);
};
SpringObject.prototype.draw = function(_0x132bc0) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x3191ef = this.sprite.INDEX, _0x4714a0 = 0x0; _0x4714a0 < _0x3191ef.length; _0x4714a0++)
            for (var _0x507d31 = 0x0; _0x507d31 < _0x3191ef[_0x4714a0].length; _0x507d31++) _0x132bc0.push({
                'pos': _0x26de58.subtract(_0x26de58.add(this.pos, _0x26de58.make(_0x507d31, _0x4714a0)), SpringObject.SOFFSET),
                'reverse': !0x1,
                'index': _0x3191ef[_0x4714a0][_0x507d31]
            });
    else _0x132bc0.push({
        'pos': _0x26de58.subtract(this.pos, SpringObject.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(SpringObject);
"use strict";

function _0xadcd81(_0x5642ff, _0x3d3a00, _0x34f17d, _0x57e7a3, _0x93cf94) {
    _0x3da6cc.call(this, _0x5642ff, _0x3d3a00, _0x34f17d, _0x57e7a3);
    this.oid = _0x93cf94;
    this.setState(_0xadcd81.STATE.IDLE);
    this.anim = 0x0;
}
_0xadcd81.ASYNC = !0x0;
_0xadcd81.ID = 0xb1;
_0xadcd81.NAME = "FLAG";
_0xadcd81.ANIMATION_RATE = 0x3;
_0xadcd81.OFFSET = _0x26de58.make(-0.5, 0x0);
_0xadcd81.SPRITE = {};
_0xadcd81.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0x90
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xadcd81.SPRITE_LIST.length; _0x1bec55++) _0xadcd81.SPRITE[_0xadcd81.SPRITE_LIST[_0x1bec55].NAME] = _0xadcd81.SPRITE_LIST[_0x1bec55], _0xadcd81.SPRITE[_0xadcd81.SPRITE_LIST[_0x1bec55].ID] = _0xadcd81.SPRITE_LIST[_0x1bec55];
_0xadcd81.STATE = {};
_0xadcd81.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0xadcd81.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0xadcd81.STATE_LIST.length; _0x1bec55++) _0xadcd81.STATE[_0xadcd81.STATE_LIST[_0x1bec55].NAME] = _0xadcd81.STATE_LIST[_0x1bec55], _0xadcd81.STATE[_0xadcd81.STATE_LIST[_0x1bec55].ID] = _0xadcd81.STATE_LIST[_0x1bec55];
_0xadcd81.prototype.update = function(_0x261833) {};
_0xadcd81.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0xadcd81.ANIMATION_RATE) % this.state.SPRITE.length];
};
_0xadcd81.prototype.kill = function() {};
_0xadcd81.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0xadcd81.prototype.destroy = _0x3da6cc.prototype.destroy;
_0xadcd81.prototype.setState = function(_0x2d7e00) {
    _0x2d7e00 !== this.state && (this.state = _0x2d7e00, this.sprite = _0x2d7e00.SPRITE[0x0], this.anim = 0x0);
};
_0xadcd81.prototype.draw = function(_0x33d2c9) {
    _0x33d2c9.push({
        'pos': _0x26de58.add(this.pos, _0xadcd81.OFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(_0xadcd81);
"use strict";

function _0x35ddf4(_0x5067e9, _0x471c11, _0x4c3d45, _0x5b45aa, _0x5f9e08, _0x62b44d, _0x119674) {
    _0x3da6cc.call(this, _0x5067e9, _0x471c11, _0x4c3d45, _0x5b45aa);
    this.oid = _0x5f9e08;
    this.state = _0x35ddf4.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x1 === parseInt(_0x62b44d) ? 0x2 * _0x35ddf4.SPIN_RATE : 0x0;
    this.dim = _0x26de58.make(0.5, 0.5);
    this.size = isNaN(parseInt(_0x119674)) ? _0x35ddf4.PARTS : parseInt(_0x119674);
}
_0x35ddf4.ASYNC = !0x0;
_0x35ddf4.ID = 0x21;
_0x35ddf4.NAME = "FIRE TRAP";
_0x35ddf4.ANIMATION_RATE = 0x2;
_0x35ddf4.OFFSET = _0x26de58.make(0.25, 0.25);
_0x35ddf4.PARTS = 0x6;
_0x35ddf4.SPACING = 0.5;
_0x35ddf4.SPIN_RATE = 0x17;
_0x35ddf4.SPRITE = {};
_0x35ddf4.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xd0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xd1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xd2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xd3
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x35ddf4.SPRITE_LIST.length; _0x1bec55++) _0x35ddf4.SPRITE[_0x35ddf4.SPRITE_LIST[_0x1bec55].NAME] = _0x35ddf4.SPRITE_LIST[_0x1bec55], _0x35ddf4.SPRITE[_0x35ddf4.SPRITE_LIST[_0x1bec55].ID] = _0x35ddf4.SPRITE_LIST[_0x1bec55];
_0x35ddf4.STATE = {};
_0x35ddf4.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x35ddf4.SPRITE.IDLE0, _0x35ddf4.SPRITE.IDLE1, _0x35ddf4.SPRITE.IDLE2, _0x35ddf4.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x35ddf4.STATE_LIST.length; _0x1bec55++) _0x35ddf4.STATE[_0x35ddf4.STATE_LIST[_0x1bec55].NAME] = _0x35ddf4.STATE_LIST[_0x1bec55], _0x35ddf4.STATE[_0x35ddf4.STATE_LIST[_0x1bec55].ID] = _0x35ddf4.STATE_LIST[_0x1bec55];
_0x35ddf4.prototype.update = function() {};
_0x35ddf4.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x35ddf4.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.interaction();
};
_0x35ddf4.prototype.control = function() {
    this.rot += _0x35ddf4.SPIN_RATE;
};
_0x35ddf4.prototype.interaction = function() {
    var _0x7617b0 = _0x26de58.normalize(_0x26de58.make(Math.sin(-this.anim / _0x35ddf4.SPIN_RATE), Math.cos(-this.anim / _0x35ddf4.SPIN_RATE))),
        _0x258ff9 = this.game.getPlayer();
    if (_0x258ff9 && _0x258ff9.isTangible() && _0x258ff9.level === this.level && _0x258ff9.zone === this.zone)
        for (var _0x373060 = 0x0; _0x373060 < this.size; _0x373060++) {
            var _0x2ff265 = _0x26de58.add(_0x26de58.add(this.pos, _0x35ddf4.OFFSET), _0x26de58.scale(_0x7617b0, _0x35ddf4.SPACING * _0x373060));
            _0x1badb6.intersection(_0x258ff9.pos, _0x258ff9.dim, _0x2ff265, this.dim) && _0x258ff9.damage(this);
        }
};
_0x35ddf4.prototype.playerCollide = function(_0x385f5f) {};
_0x35ddf4.prototype.playerStomp = function(_0x4454be) {};
_0x35ddf4.prototype.playerBump = function(_0x4c1cbf) {};
_0x35ddf4.prototype.kill = function() {};
_0x35ddf4.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x35ddf4.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x35ddf4.prototype.setState = function(_0xaf8a26) {
    _0xaf8a26 !== this.state && (this.state = _0xaf8a26, this.sprite = _0xaf8a26.SPRITE[0x0], this.anim = 0x0);
};
_0x35ddf4.prototype.draw = function(_0x4e240c) {
    for (var _0x40d21a = _0x26de58.normalize(_0x26de58.make(Math.sin(-this.anim / _0x35ddf4.SPIN_RATE), Math.cos(-this.anim / _0x35ddf4.SPIN_RATE))), _0x4e0952 = 0x0; _0x4e0952 < this.size; _0x4e0952++) _0x4e240c.push({
        'pos': _0x26de58.add(this.pos, _0x26de58.scale(_0x40d21a, _0x35ddf4.SPACING * _0x4e0952)),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x35ddf4);
"use strict";

function _0x4a8773(_0x23df7f, _0x31f095, _0x2a1fe9, _0x53aba8, _0x3d90ca, _0x213ff9, _0x2d1dbb) {
    _0x3da6cc.call(this, _0x23df7f, _0x31f095, _0x2a1fe9, _0x53aba8);
    this.oid = _0x3d90ca;
    this.setState(_0x4a8773.STATE.IDLE);
    this.delay = isNaN(parseInt(_0x213ff9)) ? _0x4a8773.DELAY_DEFAULT : parseInt(_0x213ff9);
    this.impulse = isNaN(parseFloat(_0x2d1dbb)) ? 0x1 : parseFloat(_0x2d1dbb);
    this.anim = 0x0;
    this.delayTimer = this.delay;
    this.pos.x += _0x4a8773.SOFFSET.x;
    this.loc = _0x26de58.copy(this.pos);
    this.fallSpeed = 0x0;
    this.dim = _0x26de58.make(0.7, 0.7);
}
_0x4a8773.ASYNC = !0x0;
_0x4a8773.ID = 0x22;
_0x4a8773.NAME = "FIRE BLAST";
_0x4a8773.ANIMATION_RATE = 0x3;
_0x4a8773.DELAY_DEFAULT = 0x5a;
_0x4a8773.IMPULSE = 1.35;
_0x4a8773.DRAG = 0.95;
_0x4a8773.FALL_SPEED_ACCEL = 0.055;
_0x4a8773.SOFFSET = _0x26de58.make(0.15, 0.15);
_0x4a8773.SPRITE = {};
_0x4a8773.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xdb
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x4a8773.SPRITE_LIST.length; _0x1bec55++) _0x4a8773.SPRITE[_0x4a8773.SPRITE_LIST[_0x1bec55].NAME] = _0x4a8773.SPRITE_LIST[_0x1bec55], _0x4a8773.SPRITE[_0x4a8773.SPRITE_LIST[_0x1bec55].ID] = _0x4a8773.SPRITE_LIST[_0x1bec55];
_0x4a8773.STATE = {};
_0x4a8773.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x4a8773.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x4a8773.STATE_LIST.length; _0x1bec55++) _0x4a8773.STATE[_0x4a8773.STATE_LIST[_0x1bec55].NAME] = _0x4a8773.STATE_LIST[_0x1bec55], _0x4a8773.STATE[_0x4a8773.STATE_LIST[_0x1bec55].ID] = _0x4a8773.STATE_LIST[_0x1bec55];
_0x4a8773.prototype.update = function(_0x1cfeaa) {};
_0x4a8773.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x4a8773.ANIMATION_RATE) % this.state.SPRITE.length];
    0x0 < this.delayTimer ? this.delayTimer-- : this.blast();
    this.physics();
};
_0x4a8773.prototype.physics = function() {
    if (this.pos.y > this.loc.y || 0x0 < this.fallSpeed) this.fallSpeed = (this.fallSpeed - _0x4a8773.FALL_SPEED_ACCEL) * _0x4a8773.DRAG, this.pos.y += this.fallSpeed;
};
_0x4a8773.prototype.blast = function() {
    this.pos = _0x26de58.copy(this.loc);
    this.fallSpeed = _0x4a8773.IMPULSE * this.impulse;
    this.delayTimer = this.delay;
};
_0x4a8773.prototype.playerCollide = function(_0x14d8e8) {
    this.dead || this.garbage || _0x14d8e8.damage(this);
};
_0x4a8773.prototype.playerStomp = function(_0x4caac0) {
    this.playerCollide(_0x4caac0);
};
_0x4a8773.prototype.playerBump = function(_0xad36f2) {
    this.playerCollide(_0xad36f2);
};
_0x4a8773.prototype.kill = function() {};
_0x4a8773.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x4a8773.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x4a8773.prototype.setState = function(_0x3a217a) {
    _0x3a217a !== this.state && (this.state = _0x3a217a, this.sprite = _0x3a217a.SPRITE[0x0], this.anim = 0x0);
};
_0x4a8773.prototype.draw = function(_0x39c7cf) {
    var _0x5ecf74 = 0x0 <= this.fallSpeed ? 0x0 : 0x3;
    _0x39c7cf.push({
        'pos': _0x26de58.subtract(this.pos, _0x4a8773.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': _0x5ecf74
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x4a8773);
"use strict";

function _0x458a57(_0x278773, _0xa84297, _0x156cd9, _0x3a6374, _0x2a748a, _0x429175) {
    _0x3da6cc.call(this, _0x278773, _0xa84297, _0x156cd9, _0x3a6374);
    this.oid = _0x2a748a;
    this.setState(_0x458a57.STATE.IDLE);
    this.fireTimer = 0x0;
    this.delay = isNaN(parseInt(_0x429175)) ? _0x458a57.FIRE_DELAY_DEFAULT : parseInt(_0x429175);
}
_0x458a57.ASYNC = !0x0;
_0x458a57.ID = 0x23;
_0x458a57.NAME = "LAUNCHER";
_0x458a57.ANIMATION_RATE = 0x3;
_0x458a57.FIRE_DELAY_DEFAULT = 0x96;
_0x458a57.SPRITE = {};
_0x458a57.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xff
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x458a57.SPRITE_LIST.length; _0x1bec55++) _0x458a57.SPRITE[_0x458a57.SPRITE_LIST[_0x1bec55].NAME] = _0x458a57.SPRITE_LIST[_0x1bec55], _0x458a57.SPRITE[_0x458a57.SPRITE_LIST[_0x1bec55].ID] = _0x458a57.SPRITE_LIST[_0x1bec55];
_0x458a57.STATE = {};
_0x458a57.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x458a57.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x458a57.STATE_LIST.length; _0x1bec55++) _0x458a57.STATE[_0x458a57.STATE_LIST[_0x1bec55].NAME] = _0x458a57.STATE_LIST[_0x1bec55], _0x458a57.STATE[_0x458a57.STATE_LIST[_0x1bec55].ID] = _0x458a57.STATE_LIST[_0x1bec55];
_0x458a57.prototype.update = function(_0x5a56fe) {};
_0x458a57.prototype.step = function() {
    ++this.fireTimer > this.delay && this.fire();
    this.sound();
};
_0x458a57.prototype.sound = _0x3da6cc.prototype.sound;
_0x458a57.prototype.fire = function() {
    this.fireTimer = 0x0;
    this.game.createObject(_0x30df09.ID, this.level, this.zone, _0x26de58.copy(this.pos), []);
    this.play("sfx/firework.wav", 0x1, 0.04);
};
_0x458a57.prototype.kill = function() {};
_0x458a57.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x458a57.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x458a57.prototype.setState = function(_0xf1ae11) {
    _0xf1ae11 !== this.state && (this.state = _0xf1ae11, this.sprite = _0xf1ae11.SPRITE[0x0], this.anim = 0x0);
};
_0x458a57.prototype.draw = function(_0x281060) {};
_0x458a57.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x458a57);
"use strict";

function _0x30df09(_0x3877d1, _0x3182b8, _0xa0e13f, _0xe81bce, _0x1d56a5) {
    _0x3da6cc.call(this, _0x3877d1, _0x3182b8, _0xa0e13f, _0xe81bce);
    this.oid = _0x1d56a5;
    this.setState(_0x30df09.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.dim = _0x26de58.make(0.8, 0.8);
    this.fallSpeed = this.moveSpeed = 0x0;
}
_0x30df09.ASYNC = !0x0;
_0x30df09.ID = 0x24;
_0x30df09.NAME = "BULLET";
_0x30df09.ANIMATION_RATE = 0x3;
_0x30df09.SPEED = 0.215;
_0x30df09.BONK_TIME = 0x5a;
_0x30df09.BONK_IMP = _0x26de58.make(0.25, 0.4);
_0x30df09.BONK_DECEL = 0.925;
_0x30df09.BONK_FALL_SPEED = 0.5;
_0x30df09.BONK_FALL_ACCEL = 0.085;
_0x30df09.DELAY_DEFAULT = 0x113;
_0x30df09.IMPULSE = _0x26de58.make(0.225, 0.335);
_0x30df09.DRAG = 0.996;
_0x30df09.FALL_SPEED_ACCEL = 0.0055;
_0x30df09.SOFFSET = _0x26de58.make(0.15, 0.15);
_0x30df09.SPRITE = {};
_0x30df09.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xcd
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x30df09.SPRITE_LIST.length; _0x1bec55++) _0x30df09.SPRITE[_0x30df09.SPRITE_LIST[_0x1bec55].NAME] = _0x30df09.SPRITE_LIST[_0x1bec55], _0x30df09.SPRITE[_0x30df09.SPRITE_LIST[_0x1bec55].ID] = _0x30df09.SPRITE_LIST[_0x1bec55];
_0x30df09.STATE = {};
_0x30df09.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x30df09.SPRITE.IDLE]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x30df09.STATE_LIST.length; _0x1bec55++) _0x30df09.STATE[_0x30df09.STATE_LIST[_0x1bec55].NAME] = _0x30df09.STATE_LIST[_0x1bec55], _0x30df09.STATE[_0x30df09.STATE_LIST[_0x1bec55].ID] = _0x30df09.STATE_LIST[_0x1bec55];
_0x30df09.prototype.update = function(_0xebda49) {};
_0x30df09.prototype.step = function() {
    this.state === _0x30df09.STATE.BONK ? this.bonkTimer++ > _0x30df09.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x30df09.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x30df09.BONK_FALL_ACCEL, -_0x30df09.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x30df09.ANIMATION_RATE) % this.state.SPRITE.length], this.physics(), this.sound());
};
_0x30df09.prototype.physics = function() {
    0x0 < this.pos.x ? this.pos.x -= _0x30df09.SPEED : this.destroy();
};
_0x30df09.prototype.sound = _0x3da6cc.prototype.sound;
_0x30df09.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x30df09.prototype.enable = function() {
    this.disabled = !0x1;
};
_0x30df09.prototype.damage = function(_0x582020) {};
_0x30df09.prototype.bonk = function() {
    this.dead || (this.setState(_0x30df09.STATE.BONK), this.moveSpeed = _0x30df09.BONK_IMP.x, this.fallSpeed = _0x30df09.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x30df09.prototype.playerCollide = function(_0x15f7e9) {
    this.dead || this.garbage || _0x15f7e9.damage(this);
};
_0x30df09.prototype.playerStomp = function(_0x53a4e6) {
    this.dead || this.garbage || (_0x53a4e6.bounce(), this.play("sfx/stomp.wav", 0x1, 0.04), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x30df09.prototype.playerBump = function(_0x5a4a67) {
    this.playerCollide(_0x5a4a67);
};
_0x30df09.prototype.kill = function() {};
_0x30df09.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x30df09.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x30df09.prototype.setState = function(_0x7fea24) {
    _0x7fea24 !== this.state && (this.state = _0x7fea24, 0x0 < _0x7fea24.SPRITE.length && (this.sprite = _0x7fea24.SPRITE[0x0]), this.anim = 0x0);
};
_0x30df09.prototype.draw = function(_0x3d4441) {
    var _0x15ff87;
    _0x15ff87 = this.state === _0x30df09.STATE.BONK ? 0x3 : 0x0;
    _0x3d4441.push({
        'pos': _0x26de58.subtract(this.pos, _0x30df09.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': _0x15ff87
    });
};
_0x30df09.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x30df09);
"use strict";

function _0x6c6f53(_0x36213e, _0xed9c2f, _0xdb3ba1, _0x192895, _0x145ee8, _0x367c0a) {
    _0x3da6cc.call(this, _0x36213e, _0xed9c2f, _0xdb3ba1, _0x192895);
    this.owner = _0x367c0a;
    this.state = _0x6c6f53.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.deadTimer = this.anim = 0x0;
    this.dim = _0x26de58.make(0.5, 0.5);
    this.fallSpeed = -_0x6c6f53.FALL_SPEED_MAX;
    this.dir = _0x145ee8;
}
_0x6c6f53.ASYNC = !0x0;
_0x6c6f53.ID = 0xa1;
_0x6c6f53.NAME = "FIREBALL PROJECTILE";
_0x6c6f53.ANIMATION_RATE = 0x2;
_0x6c6f53.SOFFSET = _0x26de58.make(-0.25, -0.25);
_0x6c6f53.DEAD_ANIM_LENGTH = 0x3;
_0x6c6f53.SPEED = 0.475;
_0x6c6f53.BOUNCE_SPEED = 0.375;
_0x6c6f53.FALL_SPEED_MAX = 0.425;
_0x6c6f53.FALL_SPEED_ACCEL = 0.065;
_0x6c6f53.SPRITE = {};
_0x6c6f53.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xbc
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xbd
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xbe
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xbf
}, {
    'NAME': "DEAD0",
    'ID': 0x4,
    'INDEX': 0xd4
}, {
    'NAME': "DEAD1",
    'ID': 0x5,
    'INDEX': 0xd5
}, {
    'NAME': "DEAD2",
    'ID': 0x6,
    'INDEX': 0xd6
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x6c6f53.SPRITE_LIST.length; _0x1bec55++) _0x6c6f53.SPRITE[_0x6c6f53.SPRITE_LIST[_0x1bec55].NAME] = _0x6c6f53.SPRITE_LIST[_0x1bec55], _0x6c6f53.SPRITE[_0x6c6f53.SPRITE_LIST[_0x1bec55].ID] = _0x6c6f53.SPRITE_LIST[_0x1bec55];
_0x6c6f53.STATE = {};
_0x6c6f53.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x6c6f53.SPRITE.IDLE0, _0x6c6f53.SPRITE.IDLE1, _0x6c6f53.SPRITE.IDLE2, _0x6c6f53.SPRITE.IDLE3]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [_0x6c6f53.SPRITE.DEAD0, _0x6c6f53.SPRITE.DEAD1, _0x6c6f53.SPRITE.DEAD2]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x6c6f53.STATE_LIST.length; _0x1bec55++) _0x6c6f53.STATE[_0x6c6f53.STATE_LIST[_0x1bec55].NAME] = _0x6c6f53.STATE_LIST[_0x1bec55], _0x6c6f53.STATE[_0x6c6f53.STATE_LIST[_0x1bec55].ID] = _0x6c6f53.STATE_LIST[_0x1bec55];
_0x6c6f53.prototype.update = function(_0x244c91) {};
_0x6c6f53.prototype.step = function() {
    this.state === _0x6c6f53.STATE.DEAD ? this.deadTimer < _0x6c6f53.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x6c6f53.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.interaction(), this.sound(), 0x0 > this.pos.y && this.kill());
};
_0x6c6f53.prototype.control = function() {};
_0x6c6f53.prototype.physics = function() {
    var _0x3236a4 = this.dir ? _0x6c6f53.SPEED : -_0x6c6f53.SPEED;
    this.fallSpeed = Math.max(this.fallSpeed - _0x6c6f53.FALL_SPEED_ACCEL, -_0x6c6f53.FALL_SPEED_MAX);
    for (var _0x129f7c = _0x26de58.add(this.pos, _0x26de58.make(_0x3236a4, this.fallSpeed)), _0x42654a = _0x26de58.make(this.pos.x + Math.min(0x0, _0x3236a4), this.pos.y + Math.min(0x0, this.fallSpeed)), _0x3236a4 = _0x26de58.make(this.dim.x + Math.max(0x0, _0x3236a4), this.dim.y + Math.max(0x0, this.fallSpeed)), _0x10832b = this.game.world.getZone(this.level, this.zone).getTiles(_0x42654a, _0x3236a4), _0x42654a = _0x26de58.make(0x1, 0x1), _0x3236a4 = [], _0x564789 = 0x0; _0x564789 < _0x10832b.length; _0x564789++) {
        var _0x1dc741 = _0x10832b[_0x564789];
        _0x1dc741.definition.COLLIDE && (_0x1badb6.intersection(_0x1dc741.pos, _0x42654a, _0x129f7c, this.dim) || _0x1badb6.intersection(_0x1dc741.pos, _0x42654a, this.pos, this.dim)) && _0x3236a4.push(_0x1dc741);
    }
    _0x10832b = _0x26de58.make(_0x129f7c.x, this.pos.y);
    for (_0x564789 = 0x0; _0x564789 < _0x3236a4.length; _0x564789++) _0x1dc741 = _0x3236a4[_0x564789], _0x1badb6.intersection(_0x1dc741.pos, _0x42654a, _0x10832b, this.dim) && (_0x10832b.x = _0x10832b.x + 0.5 * this.dim.x < _0x1dc741.pos.x + 0.5 * _0x42654a.x ? _0x1dc741.pos.x - this.dim.x : _0x1dc741.pos.x + _0x42654a.x, this.kill());
    _0x129f7c.x = _0x10832b.x;
    for (_0x564789 = 0x0; _0x564789 < _0x3236a4.length; _0x564789++) _0x1dc741 = _0x3236a4[_0x564789], _0x1badb6.intersection(_0x1dc741.pos, _0x42654a, _0x129f7c, this.dim) && (this.pos.y >= _0x129f7c.y ? (_0x129f7c.y = _0x1dc741.pos.y + _0x42654a.y, this.fallSpeed = _0x6c6f53.BOUNCE_SPEED) : (_0x129f7c.y = _0x1dc741.pos.y - this.dim.y, this.fallSpeed = -_0x6c6f53.BOUNCE_SPEED));
    this.pos = _0x129f7c;
};
_0x6c6f53.prototype.interaction = function() {
    for (var _0x51d7a3 = 0x0; _0x51d7a3 < this.game.objects.length; _0x51d7a3++) {
        var _0x1f6129 = this.game.objects[_0x51d7a3];
        if (_0x1f6129 !== this && _0x1f6129.pid !== this.owner && _0x1f6129.isTangible() && !(_0x1f6129 instanceof PlayerObject) && _0x1f6129.damage && _0x1f6129.level === this.level && _0x1f6129.zone === this.zone && _0x1badb6.intersection(_0x1f6129.pos, _0x1f6129.dim, this.pos, this.dim)) {
            this.owner === this.game.pid && _0x1f6129.damage(this);
            this.kill();
            break;
        }
    }
};
_0x6c6f53.prototype.sound = _0x3da6cc.prototype.sound;
_0x6c6f53.prototype.playerCollide = function(_0x596050) {};
_0x6c6f53.prototype.playerStomp = function(_0x282b15) {};
_0x6c6f53.prototype.playerBump = function(_0xad5318) {};
_0x6c6f53.prototype.kill = function() {
    this.setState(_0x6c6f53.STATE.DEAD);
    this.play("sfx/firework.wav", 0.7, 0.04);
    this.dead = !0x0;
};
_0x6c6f53.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x6c6f53.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x6c6f53.prototype.setState = function(_0x37987d) {
    _0x37987d !== this.state && (this.state = _0x37987d, this.sprite = _0x37987d.SPRITE[0x0], this.anim = 0x0);
};
_0x6c6f53.prototype.draw = function(_0x12ec20) {
    _0x12ec20.push({
        'pos': _0x26de58.add(this.pos, _0x6c6f53.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x6c6f53.prototype.play = _0x3da6cc.prototype.play;
_0x3da6cc.REGISTER_OBJECT(_0x6c6f53);
"use strict";

function _0x1899b7(_0x5b625c, _0x4b1c85, _0x5d2f9e, _0x337be8) {
    _0x3da6cc.call(this, _0x5b625c, _0x4b1c85, _0x5d2f9e, _0x337be8);
    this.state = _0x1899b7.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.life = _0x1899b7.LIFE_MAX;
    this.deadTimer = 0x0;
    this.dim = _0x26de58.make(0x1, 0.5);
}
_0x1899b7.ASYNC = !0x0;
_0x1899b7.ID = 0xa2;
_0x1899b7.NAME = "FIRE BREATH PROJECTILE";
_0x1899b7.ANIMATION_RATE = 0x2;
_0x1899b7.SOFFSET = _0x26de58.make(-0.5, -0.25);
_0x1899b7.LIFE_MAX = 0xaf;
_0x1899b7.DEAD_ANIM_LENGTH = 0x3;
_0x1899b7.SPEED = 0.175;
_0x1899b7.SPRITE = {};
_0x1899b7.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0xd7, 0xd8]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0xd9, 0xda]
    ]
}, {
    'NAME': "DEAD0",
    'ID': 0x4,
    'INDEX': 0xd4
}, {
    'NAME': "DEAD1",
    'ID': 0x5,
    'INDEX': 0xd5
}, {
    'NAME': "DEAD2",
    'ID': 0x6,
    'INDEX': 0xd6
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1899b7.SPRITE_LIST.length; _0x1bec55++) _0x1899b7.SPRITE[_0x1899b7.SPRITE_LIST[_0x1bec55].NAME] = _0x1899b7.SPRITE_LIST[_0x1bec55], _0x1899b7.SPRITE[_0x1899b7.SPRITE_LIST[_0x1bec55].ID] = _0x1899b7.SPRITE_LIST[_0x1bec55];
_0x1899b7.STATE = {};
_0x1899b7.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x1899b7.SPRITE.IDLE0, _0x1899b7.SPRITE.IDLE1]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [_0x1899b7.SPRITE.DEAD0, _0x1899b7.SPRITE.DEAD1, _0x1899b7.SPRITE.DEAD2]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1899b7.STATE_LIST.length; _0x1bec55++) _0x1899b7.STATE[_0x1899b7.STATE_LIST[_0x1bec55].NAME] = _0x1899b7.STATE_LIST[_0x1bec55], _0x1899b7.STATE[_0x1899b7.STATE_LIST[_0x1bec55].ID] = _0x1899b7.STATE_LIST[_0x1bec55];
_0x1899b7.prototype.update = function(_0x3e423b) {};
_0x1899b7.prototype.step = function() {
    this.state === _0x1899b7.STATE.DEAD ? this.deadTimer < _0x1899b7.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x1899b7.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.interaction(), 0x1 > this.life-- && this.kill());
};
_0x1899b7.prototype.control = function() {};
_0x1899b7.prototype.physics = function() {
    this.pos = _0x26de58.add(this.pos, _0x26de58.make(-_0x1899b7.SPEED, 0x0));
};
_0x1899b7.prototype.interaction = function() {
    for (var _0x554db7 = 0x0; _0x554db7 < this.game.objects.length; _0x554db7++) {
        var _0x43845d = this.game.objects[_0x554db7];
        if (_0x43845d instanceof PlayerObject && _0x43845d.isTangible() && _0x43845d.level === this.level && _0x43845d.zone === this.zone && _0x1badb6.intersection(_0x43845d.pos, _0x43845d.dim, this.pos, this.dim)) {
            _0x43845d.pid === this.game.pid && _0x43845d.damage(this);
            this.kill();
            break;
        }
    }
};
_0x1899b7.prototype.playerCollide = function(_0x4b7e2a) {};
_0x1899b7.prototype.playerStomp = function(_0x2f2ded) {};
_0x1899b7.prototype.playerBump = function(_0xa7f751) {};
_0x1899b7.prototype.kill = function() {
    this.dead = !0x0;
    this.setState(_0x1899b7.STATE.DEAD);
};
_0x1899b7.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x1899b7.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x1899b7.prototype.setState = function(_0x422ff8) {
    _0x422ff8 !== this.state && (this.state = _0x422ff8, this.sprite = _0x422ff8.SPRITE[0x0], this.anim = 0x0);
};
_0x1899b7.prototype.draw = function(_0x215d5f) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x22ac30 = this.sprite.INDEX, _0x1cb97d = 0x0; _0x1cb97d < _0x22ac30.length; _0x1cb97d++)
            for (var _0x5791f1 = 0x0; _0x5791f1 < _0x22ac30[_0x1cb97d].length; _0x5791f1++) _0x215d5f.push({
                'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x1899b7.SOFFSET), _0x26de58.make(_0x5791f1, _0x1cb97d)),
                'reverse': !0x1,
                'index': _0x22ac30[_0x1cb97d][_0x5791f1]
            });
    else _0x215d5f.push({
        'pos': _0x26de58.add(this.pos, _0x1899b7.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x1899b7);
"use strict";

function _0x1bc0ed(_0x33b14c, _0x36a1c4, _0x148c3f, _0x54b3e0, _0x33ad79) {
    _0x3da6cc.call(this, _0x33b14c, _0x36a1c4, _0x148c3f, _0x54b3e0);
    this.owner = _0x33ad79;
    this.setState(_0x1bc0ed.STATE.IDLE);
    this.anim = 0x0;
    this.throwTimer = _0x1bc0ed.THROW_DELAY;
    this.dir = !0x1;
    this.dim = _0x26de58.make(0.5, 0.5);
}
_0x1bc0ed.ASYNC = !0x0;
_0x1bc0ed.ID = 0xa3;
_0x1bc0ed.NAME = "HAMMER PROJECTILE";
_0x1bc0ed.ANIMATION_RATE = 0x2;
_0x1bc0ed.SOFFSET = _0x26de58.make(-0.25, -0.25);
_0x1bc0ed.THROW_DELAY = 0xd;
_0x1bc0ed.IMPULSE = _0x26de58.make(0.48, 0.915);
_0x1bc0ed.DRAG = 0.965;
_0x1bc0ed.FALL_SPEED_MAX = 0.65;
_0x1bc0ed.FALL_SPEED_ACCEL = 0.095;
_0x1bc0ed.SPRITE = {};
_0x1bc0ed.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xdd
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xdc
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xdf
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xde
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1bc0ed.SPRITE_LIST.length; _0x1bec55++) _0x1bc0ed.SPRITE[_0x1bc0ed.SPRITE_LIST[_0x1bec55].NAME] = _0x1bc0ed.SPRITE_LIST[_0x1bec55], _0x1bc0ed.SPRITE[_0x1bc0ed.SPRITE_LIST[_0x1bec55].ID] = _0x1bc0ed.SPRITE_LIST[_0x1bec55];
_0x1bc0ed.STATE = {};
_0x1bc0ed.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x1bc0ed.SPRITE.IDLE0]
}, {
    'NAME': "THROW",
    'ID': 0x1,
    'SPRITE': [_0x1bc0ed.SPRITE.IDLE0, _0x1bc0ed.SPRITE.IDLE1, _0x1bc0ed.SPRITE.IDLE2, _0x1bc0ed.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x1bc0ed.STATE_LIST.length; _0x1bec55++) _0x1bc0ed.STATE[_0x1bc0ed.STATE_LIST[_0x1bec55].NAME] = _0x1bc0ed.STATE_LIST[_0x1bec55], _0x1bc0ed.STATE[_0x1bc0ed.STATE_LIST[_0x1bec55].ID] = _0x1bc0ed.STATE_LIST[_0x1bec55];
_0x1bc0ed.prototype.update = function(_0x2be6f1) {};
_0x1bc0ed.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x1bc0ed.ANIMATION_RATE) % this.state.SPRITE.length];
    0x0 < this.throwTimer ? this.throwTimer-- : (this.state === _0x1bc0ed.STATE.IDLE && this.throw(), this.physics(), this.interaction(), 0x0 > this.pos.y && this.destroy());
};
_0x1bc0ed.prototype.physics = function() {
    this.moveSpeed *= _0x1bc0ed.DRAG;
    this.fallSpeed = Math.max(this.fallSpeed - _0x1bc0ed.FALL_SPEED_ACCEL, -_0x1bc0ed.FALL_SPEED_MAX);
    this.pos = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed));
};
_0x1bc0ed.prototype.interaction = function() {
    if (this.state === _0x1bc0ed.STATE.THROW) {
        var _0xb52b5e = this.game.getPlayer();
        _0xb52b5e && _0xb52b5e.isTangible() && _0xb52b5e.level === this.level && _0xb52b5e.zone === this.zone && _0x1badb6.intersection(_0xb52b5e.pos, _0xb52b5e.dim, this.pos, this.dim) && _0xb52b5e.damage(this);
    }
};
_0x1bc0ed.prototype.throw = function() {
    this.moveSpeed = this.dir ? _0x1bc0ed.IMPULSE.x : -_0x1bc0ed.IMPULSE.x;
    this.fallSpeed = _0x1bc0ed.IMPULSE.y;
    this.setState(_0x1bc0ed.STATE.THROW);
};
_0x1bc0ed.prototype.playerCollide = function(_0x2db29c) {};
_0x1bc0ed.prototype.playerStomp = function(_0xa5f3c4) {};
_0x1bc0ed.prototype.playerBump = function(_0x255468) {};
_0x1bc0ed.prototype.kill = function() {};
_0x1bc0ed.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x1bc0ed.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x1bc0ed.prototype.setState = function(_0x5c3f79) {
    _0x5c3f79 !== this.state && (this.state = _0x5c3f79, this.sprite = _0x5c3f79.SPRITE[0x0], this.anim = 0x0);
};
_0x1bc0ed.prototype.draw = function(_0x4db511) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x452daa = this.sprite.INDEX, _0x4a6d8c = 0x0; _0x4a6d8c < _0x452daa.length; _0x4a6d8c++)
            for (var _0x3a08a0 = 0x0; _0x3a08a0 < _0x452daa[_0x4a6d8c].length; _0x3a08a0++) _0x4db511.push({
                'pos': _0x26de58.add(_0x26de58.add(this.pos, _0x1bc0ed.SOFFSET), _0x26de58.make(_0x3a08a0, _0x4a6d8c)),
                'reverse': !0x1,
                'index': _0x452daa[_0x4a6d8c][_0x3a08a0]
            });
    else _0x4db511.push({
        'pos': _0x26de58.add(this.pos, _0x1bc0ed.SOFFSET),
        'reverse': this.dir,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x1bc0ed);
"use strict";

function _0x2e2bc3(_0x23b738, _0x46c7a3, _0x118fd6, _0xb55197, _0x48d8ac) {
    _0x3da6cc.call(this, _0x23b738, _0x46c7a3, _0x118fd6, _0xb55197);
    this.oid = _0x48d8ac;
    this.anim = 0x0;
    this.dim = _0x26de58.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.rise = this.grounded = !0x1;
    _0x23b738 = _0x26de58.make(0x1, 0x1);
    _0x46c7a3 = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim);
    for (_0x118fd6 = 0x0; _0x118fd6 < _0x46c7a3.length; _0x118fd6++)
        if (_0x1badb6.intersection(_0x46c7a3[_0x118fd6].pos, _0x23b738, this.pos, this.dim)) {
            this.rise = !0x0;
            break;
        } this.dir = !0x1;
    this.jump = -0x1;
}
_0x2e2bc3.ASYNC = !0x0;
_0x2e2bc3.ID = 0x50;
_0x2e2bc3.ANIMATION_RATE = 0x3;
_0x2e2bc3.MOVE_SPEED_MAX = 0.075;
_0x2e2bc3.FALL_SPEED_MAX = 0.45;
_0x2e2bc3.FALL_SPEED_ACCEL = 0.075;
_0x2e2bc3.JUMP_DECEL = 0.015;
_0x2e2bc3.JUMP_LENGTH = 0x3;
_0x2e2bc3.RISE_RATE = 0.15;
_0x2e2bc3.prototype.update = function(_0x210b40) {
    switch (_0x210b40) {
        case 0x0:
            this.kill();
    }
};
_0x2e2bc3.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x2e2bc3.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.physics();
    0x0 > this.pos.y && this.kill();
};
_0x2e2bc3.prototype.control = function() {
    this.jump >= _0x2e2bc3.JUMP_LENGTH && (this.jump = -0x1);
};
_0x2e2bc3.prototype.physics = function() {
    if (this.rise) {
        this.rise = !0x1;
        for (var _0x2d4761 = _0x26de58.make(0x1, 0x1), _0x48762f = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim), _0xae67e5 = 0x0; _0xae67e5 < _0x48762f.length; _0xae67e5++) {
            var _0x323720 = _0x48762f[_0xae67e5];
            if (_0x323720.definition.COLLIDE && _0x1badb6.intersection(_0x323720.pos, _0x2d4761, this.pos, this.dim)) {
                this.rise = !0x0;
                break;
            }
        }
        this.rise && (this.pos.y += _0x2e2bc3.RISE_RATE);
    } else {
        -0x1 !== this.jump ? (this.fallSpeed = _0x2e2bc3.FALL_SPEED_MAX - this.jump * _0x2e2bc3.JUMP_DECEL, this.jump++) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x2e2bc3.FALL_SPEED_ACCEL, -_0x2e2bc3.FALL_SPEED_MAX));
        var _0x17799f = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, 0x0)),
            _0x7b593c = _0x26de58.add(this.pos, _0x26de58.make(this.moveSpeed, this.fallSpeed)),
            _0x2d4761 = _0x26de58.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
            _0x48762f = _0x26de58.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
            _0x48762f = this.game.world.getZone(this.level, this.zone).getTiles(_0x2d4761, _0x48762f),
            _0x2d4761 = _0x26de58.make(0x1, 0x1),
            _0x32139c = !0x1;
        this.grounded = !0x1;
        for (_0xae67e5 = 0x0; _0xae67e5 < _0x48762f.length; _0xae67e5++) _0x323720 = _0x48762f[_0xae67e5], _0x323720.definition.COLLIDE && _0x1badb6.intersection(_0x323720.pos, _0x2d4761, _0x17799f, this.dim) && (this.pos.x <= _0x17799f.x && _0x17799f.x + this.dim.x > _0x323720.pos.x ? (_0x17799f.x = _0x323720.pos.x - this.dim.x, _0x7b593c.x = _0x17799f.x, this.moveSpeed = 0x0, _0x32139c = !0x0) : this.pos.x >= _0x17799f.x && _0x17799f.x < _0x323720.pos.x + _0x2d4761.x && (_0x17799f.x = _0x323720.pos.x + _0x2d4761.x, _0x7b593c.x = _0x17799f.x, this.moveSpeed = 0x0, _0x32139c = !0x0));
        for (_0xae67e5 = 0x0; _0xae67e5 < _0x48762f.length; _0xae67e5++) _0x323720 = _0x48762f[_0xae67e5], _0x323720.definition.COLLIDE && _0x1badb6.intersection(_0x323720.pos, _0x2d4761, _0x7b593c, this.dim) && (this.pos.y >= _0x7b593c.y && _0x7b593c.y < _0x323720.pos.y + _0x2d4761.y ? (_0x7b593c.y = _0x323720.pos.y + _0x2d4761.y, this.grounded = !0x0) : this.pos.y <= _0x7b593c.y && _0x7b593c.y + this.dim.y > _0x323720.pos.y && (_0x7b593c.y = _0x323720.pos.y - this.dim.y, this.jumping = -0x1, this.fallSpeed = 0x0));
        this.pos = _0x26de58.make(_0x17799f.x, _0x7b593c.y);
        _0x32139c && (this.dir = !this.dir);
    }
};
_0x2e2bc3.prototype.bounce = function() {
    this.grounded && (this.dir = !this.dir);
    this.jump = 0x0;
};
_0x2e2bc3.prototype.playerCollide = function(_0x25bc93) {
    this.dead || this.garbage || (_0x25bc93.powerup(this), this.kill(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x0)));
};
_0x2e2bc3.prototype.playerStomp = function(_0x3025ba) {
    this.playerCollide(_0x3025ba);
};
_0x2e2bc3.prototype.playerBump = function(_0x25bf11) {
    this.playerCollide(_0x25bf11);
};
_0x2e2bc3.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
_0x2e2bc3.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x2e2bc3.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x2e2bc3.prototype.setState = function(_0x2a4aec) {
    _0x2a4aec !== this.state && (this.state = _0x2a4aec, this.sprite = _0x2a4aec.SPRITE[0x0], this.anim = 0x0);
};
_0x2e2bc3.prototype.draw = function(_0x2ea1b4) {
    _0x2ea1b4.push({
        'pos': this.pos,
        'reverse': this.reverse,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
"use strict";

function MushroomObject(_0x1d612b, _0x30e50f, _0x5ea008, _0xaa5aa6, _0x2e3285) {
    _0x2e2bc3.call(this, _0x1d612b, _0x30e50f, _0x5ea008, _0xaa5aa6, _0x2e3285);
    this.state = MushroomObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
MushroomObject.ASYNC = !0x1;
MushroomObject.ID = 0x51;
MushroomObject.NAME = "MUSHROOM";
MushroomObject.SPRITE = {};
MushroomObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xe9
}];
for (_0x1bec55 = 0x0; _0x1bec55 < MushroomObject.SPRITE_LIST.length; _0x1bec55++) MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x1bec55].NAME] = MushroomObject.SPRITE_LIST[_0x1bec55], MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x1bec55].ID] = MushroomObject.SPRITE_LIST[_0x1bec55];
MushroomObject.STATE = {};
MushroomObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [MushroomObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < MushroomObject.STATE_LIST.length; _0x1bec55++) MushroomObject.STATE[MushroomObject.STATE_LIST[_0x1bec55].NAME] = MushroomObject.STATE_LIST[_0x1bec55], MushroomObject.STATE[MushroomObject.STATE_LIST[_0x1bec55].ID] = MushroomObject.STATE_LIST[_0x1bec55];
MushroomObject.prototype.update = _0x2e2bc3.prototype.update;
MushroomObject.prototype.step = _0x2e2bc3.prototype.step;
MushroomObject.prototype.control = function() {
    _0x2e2bc3.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x2e2bc3.MOVE_SPEED_MAX : _0x2e2bc3.MOVE_SPEED_MAX;
};
MushroomObject.prototype.physics = _0x2e2bc3.prototype.physics;
MushroomObject.prototype.bounce = _0x2e2bc3.prototype.bounce;
MushroomObject.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
MushroomObject.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
MushroomObject.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
MushroomObject.prototype.kill = _0x2e2bc3.prototype.kill;
MushroomObject.prototype.destroy = _0x3da6cc.prototype.destroy;
MushroomObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
MushroomObject.prototype.setState = _0x2e2bc3.prototype.setState;
MushroomObject.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(MushroomObject);
"use strict";

function FlowerObject(_0x4e64ba, _0x1fe145, _0x5b661a, _0x556dbf, _0x4f6437) {
    _0x2e2bc3.call(this, _0x4e64ba, _0x1fe145, _0x5b661a, _0x556dbf, _0x4f6437);
    this.state = FlowerObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
FlowerObject.ASYNC = !0x1;
FlowerObject.ID = 0x52;
FlowerObject.NAME = "FIRE FLOWER";
FlowerObject.SPRITE = {};
FlowerObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xe4
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xe5
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xe6
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xe7
}];
for (_0x1bec55 = 0x0; _0x1bec55 < FlowerObject.SPRITE_LIST.length; _0x1bec55++) FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x1bec55].NAME] = FlowerObject.SPRITE_LIST[_0x1bec55], FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x1bec55].ID] = FlowerObject.SPRITE_LIST[_0x1bec55];
FlowerObject.STATE = {};
FlowerObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [FlowerObject.SPRITE.IDLE0, FlowerObject.SPRITE.IDLE1, FlowerObject.SPRITE.IDLE2, FlowerObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < FlowerObject.STATE_LIST.length; _0x1bec55++) FlowerObject.STATE[FlowerObject.STATE_LIST[_0x1bec55].NAME] = FlowerObject.STATE_LIST[_0x1bec55], FlowerObject.STATE[FlowerObject.STATE_LIST[_0x1bec55].ID] = FlowerObject.STATE_LIST[_0x1bec55];
FlowerObject.prototype.update = _0x2e2bc3.prototype.update;
FlowerObject.prototype.step = _0x2e2bc3.prototype.step;
FlowerObject.prototype.control = function() {};
FlowerObject.prototype.physics = _0x2e2bc3.prototype.physics;
FlowerObject.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
FlowerObject.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
FlowerObject.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
FlowerObject.prototype.kill = _0x2e2bc3.prototype.kill;
FlowerObject.prototype.destroy = _0x3da6cc.prototype.destroy;
FlowerObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
FlowerObject.prototype.setState = _0x2e2bc3.prototype.setState;
FlowerObject.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(FlowerObject);
"use strict";

function GoldFlowerObject(_0x4e64ba, _0x1fe145, _0x5b661a, _0x556dbf, _0x4f6437) {
    _0x2e2bc3.call(this, _0x4e64ba, _0x1fe145, _0x5b661a, _0x556dbf, _0x4f6437);
    this.state = GoldFlowerObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
GoldFlowerObject.ASYNC = !0x1;
GoldFlowerObject.ID = 0x64;
GoldFlowerObject.NAME = "GOLD FLOWER";
GoldFlowerObject.SPRITE = {};
GoldFlowerObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 184
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 185
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 186
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 187
}];
for (_0x1bec55 = 0x0; _0x1bec55 < GoldFlowerObject.SPRITE_LIST.length; _0x1bec55++) GoldFlowerObject.SPRITE[GoldFlowerObject.SPRITE_LIST[_0x1bec55].NAME] = GoldFlowerObject.SPRITE_LIST[_0x1bec55], GoldFlowerObject.SPRITE[GoldFlowerObject.SPRITE_LIST[_0x1bec55].ID] = GoldFlowerObject.SPRITE_LIST[_0x1bec55];
GoldFlowerObject.STATE = {};
GoldFlowerObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [GoldFlowerObject.SPRITE.IDLE0, GoldFlowerObject.SPRITE.IDLE1, GoldFlowerObject.SPRITE.IDLE2, GoldFlowerObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < GoldFlowerObject.STATE_LIST.length; _0x1bec55++) GoldFlowerObject.STATE[GoldFlowerObject.STATE_LIST[_0x1bec55].NAME] = GoldFlowerObject.STATE_LIST[_0x1bec55], GoldFlowerObject.STATE[GoldFlowerObject.STATE_LIST[_0x1bec55].ID] = GoldFlowerObject.STATE_LIST[_0x1bec55];
GoldFlowerObject.prototype.update = _0x2e2bc3.prototype.update;
GoldFlowerObject.prototype.step = _0x2e2bc3.prototype.step;
GoldFlowerObject.prototype.control = function() {};
GoldFlowerObject.prototype.physics = _0x2e2bc3.prototype.physics;
GoldFlowerObject.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
GoldFlowerObject.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
GoldFlowerObject.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
GoldFlowerObject.prototype.kill = _0x2e2bc3.prototype.kill;
GoldFlowerObject.prototype.destroy = _0x3da6cc.prototype.destroy;
GoldFlowerObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
GoldFlowerObject.prototype.setState = _0x2e2bc3.prototype.setState;
GoldFlowerObject.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(GoldFlowerObject);
"use strict";

function StarObject(_0x375784, _0x5a5c7c, _0xa508b, _0x131d1e, _0x44782e) {
    _0x2e2bc3.call(this, _0x375784, _0x5a5c7c, _0xa508b, _0x131d1e, _0x44782e);
    this.state = StarObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.groundTimer = 0x0;
}
StarObject.ASYNC = !0x1;
StarObject.ID = 0x54;
StarObject.NAME = "STAR";
StarObject.JUMP_LENGTH = 0x6;
StarObject.MOVE_SPEED_MAX = 0.125;
StarObject.JUMP_DELAY = 0x2;
StarObject.SPRITE = {};
StarObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xe0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xe1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xe2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xe3
}];
for (_0x1bec55 = 0x0; _0x1bec55 < StarObject.SPRITE_LIST.length; _0x1bec55++) StarObject.SPRITE[StarObject.SPRITE_LIST[_0x1bec55].NAME] = StarObject.SPRITE_LIST[_0x1bec55], StarObject.SPRITE[StarObject.SPRITE_LIST[_0x1bec55].ID] = StarObject.SPRITE_LIST[_0x1bec55];
StarObject.STATE = {};
StarObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [StarObject.SPRITE.IDLE0, StarObject.SPRITE.IDLE1, StarObject.SPRITE.IDLE2, StarObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < StarObject.STATE_LIST.length; _0x1bec55++) StarObject.STATE[StarObject.STATE_LIST[_0x1bec55].NAME] = StarObject.STATE_LIST[_0x1bec55], StarObject.STATE[StarObject.STATE_LIST[_0x1bec55].ID] = StarObject.STATE_LIST[_0x1bec55];
StarObject.prototype.update = _0x2e2bc3.prototype.update;
StarObject.prototype.step = _0x2e2bc3.prototype.step;
StarObject.prototype.control = function() {
    this.moveSpeed = this.dir ? -StarObject.MOVE_SPEED_MAX : StarObject.MOVE_SPEED_MAX;
    this.grounded && ++this.groundTimer >= StarObject.JUMP_DELAY ? this.jump = 0x0 : this.jump > StarObject.JUMP_LENGTH && (this.jump = -0x1, this.groundTimer = 0x0);
};
StarObject.prototype.physics = _0x2e2bc3.prototype.physics;
StarObject.prototype.bounce = _0x2e2bc3.prototype.bounce;
StarObject.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
StarObject.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
StarObject.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
StarObject.prototype.kill = _0x2e2bc3.prototype.kill;
StarObject.prototype.destroy = _0x3da6cc.prototype.destroy;
StarObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
StarObject.prototype.setState = _0x2e2bc3.prototype.setState;
StarObject.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(StarObject);
"use strict";

function LifeObject(_0x1fd5d8, _0x3fd6ae, _0x16274e, _0x3cab6e, _0x53f924) {
    _0x2e2bc3.call(this, _0x1fd5d8, _0x3fd6ae, _0x16274e, _0x3cab6e, _0x53f924);
    this.state = LifeObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
LifeObject.ASYNC = !0x1;
LifeObject.ID = 0x53;
LifeObject.NAME = "ONEUP";
LifeObject.SPRITE = {};
LifeObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xe8
}];
for (_0x1bec55 = 0x0; _0x1bec55 < LifeObject.SPRITE_LIST.length; _0x1bec55++) LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x1bec55].NAME] = LifeObject.SPRITE_LIST[_0x1bec55], LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x1bec55].ID] = LifeObject.SPRITE_LIST[_0x1bec55];
LifeObject.STATE = {};
LifeObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [LifeObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < LifeObject.STATE_LIST.length; _0x1bec55++) LifeObject.STATE[LifeObject.STATE_LIST[_0x1bec55].NAME] = LifeObject.STATE_LIST[_0x1bec55], LifeObject.STATE[LifeObject.STATE_LIST[_0x1bec55].ID] = LifeObject.STATE_LIST[_0x1bec55];
LifeObject.prototype.update = _0x2e2bc3.prototype.update;
LifeObject.prototype.step = _0x2e2bc3.prototype.step;
LifeObject.prototype.control = function() {
    _0x2e2bc3.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x2e2bc3.MOVE_SPEED_MAX : _0x2e2bc3.MOVE_SPEED_MAX;
};
LifeObject.prototype.physics = _0x2e2bc3.prototype.physics;
LifeObject.prototype.bounce = _0x2e2bc3.prototype.bounce;
LifeObject.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
LifeObject.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
LifeObject.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
LifeObject.prototype.kill = _0x2e2bc3.prototype.kill;
LifeObject.prototype.destroy = _0x3da6cc.prototype.destroy;
LifeObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
LifeObject.prototype.setState = _0x2e2bc3.prototype.setState;
LifeObject.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(LifeObject);
"use strict";

function _0x2aba82(_0x2e51a9, _0x26a37d, _0x357dfc, _0x5ac831, _0x5aad3e) {
    _0x2e2bc3.call(this, _0x2e51a9, _0x26a37d, _0x357dfc, _0x5ac831, _0x5aad3e);
    this.state = _0x2aba82.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.used = !0x1;
    this.dim = _0x26de58.make(0x1, 0x3);
}
_0x2aba82.ASYNC = !0x0;
_0x2aba82.ID = 0x55;
_0x2aba82.NAME = "AXE";
_0x2aba82.SPRITE = {};
_0x2aba82.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xec
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xed
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xee
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xef
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x2aba82.SPRITE_LIST.length; _0x1bec55++) _0x2aba82.SPRITE[_0x2aba82.SPRITE_LIST[_0x1bec55].NAME] = _0x2aba82.SPRITE_LIST[_0x1bec55], _0x2aba82.SPRITE[_0x2aba82.SPRITE_LIST[_0x1bec55].ID] = _0x2aba82.SPRITE_LIST[_0x1bec55];
_0x2aba82.STATE = {};
_0x2aba82.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x2aba82.SPRITE.IDLE0, _0x2aba82.SPRITE.IDLE1, _0x2aba82.SPRITE.IDLE2, _0x2aba82.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x2aba82.STATE_LIST.length; _0x1bec55++) _0x2aba82.STATE[_0x2aba82.STATE_LIST[_0x1bec55].NAME] = _0x2aba82.STATE_LIST[_0x1bec55], _0x2aba82.STATE[_0x2aba82.STATE_LIST[_0x1bec55].ID] = _0x2aba82.STATE_LIST[_0x1bec55];
_0x2aba82.prototype.update = function(_0x13d820) {};
_0x2aba82.prototype.step = _0x2e2bc3.prototype.step;
_0x2aba82.prototype.control = function() {};
_0x2aba82.prototype.physics = _0x2e2bc3.prototype.physics;
_0x2aba82.prototype.playerCollide = function(_0x250479) {
    if (!(this.dead || this.garbage || this.used))
        for (_0x250479.powerup(this), this.used = !0x0, _0x250479 = 0x0; _0x250479 < this.game.objects.length; _0x250479++) {
            var _0x2ea61e = this.game.objects[_0x250479];
            if (_0x2ea61e instanceof BowserObject && _0x2ea61e.level === this.level && _0x2ea61e.zone === _0x2ea61e.zone && !_0x2ea61e.dead) {
                _0x2ea61e.bonk();
                break;
            }
        }
};
_0x2aba82.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
_0x2aba82.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
_0x2aba82.prototype.kill = _0x2e2bc3.prototype.kill;
_0x2aba82.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x2aba82.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x2aba82.prototype.setState = _0x2e2bc3.prototype.setState;
_0x2aba82.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(_0x2aba82);
"use strict";

function _0x5010c8(_0x3b57db, _0x117631, _0x59afa6, _0x252b6f, _0x50c0b4) {
    _0x2e2bc3.call(this, _0x3b57db, _0x117631, _0x59afa6, _0x252b6f, _0x50c0b4);
    this.state = _0x5010c8.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
_0x5010c8.ASYNC = !0x1;
_0x5010c8.ID = 0x56;
_0x5010c8.NAME = "POISON MUSHROOM";
_0x5010c8.SPRITE = {};
_0x5010c8.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xea
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5010c8.SPRITE_LIST.length; _0x1bec55++) _0x5010c8.SPRITE[_0x5010c8.SPRITE_LIST[_0x1bec55].NAME] = _0x5010c8.SPRITE_LIST[_0x1bec55], _0x5010c8.SPRITE[_0x5010c8.SPRITE_LIST[_0x1bec55].ID] = _0x5010c8.SPRITE_LIST[_0x1bec55];
_0x5010c8.STATE = {};
_0x5010c8.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x5010c8.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x5010c8.STATE_LIST.length; _0x1bec55++) _0x5010c8.STATE[_0x5010c8.STATE_LIST[_0x1bec55].NAME] = _0x5010c8.STATE_LIST[_0x1bec55], _0x5010c8.STATE[_0x5010c8.STATE_LIST[_0x1bec55].ID] = _0x5010c8.STATE_LIST[_0x1bec55];
_0x5010c8.prototype.update = _0x2e2bc3.prototype.update;
_0x5010c8.prototype.step = _0x2e2bc3.prototype.step;
_0x5010c8.prototype.control = function() {
    _0x2e2bc3.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x2e2bc3.MOVE_SPEED_MAX : _0x2e2bc3.MOVE_SPEED_MAX;
};
_0x5010c8.prototype.physics = _0x2e2bc3.prototype.physics;
_0x5010c8.prototype.bounce = _0x2e2bc3.prototype.bounce;
_0x5010c8.prototype.playerCollide = _0x2e2bc3.prototype.playerCollide;
_0x5010c8.prototype.playerStomp = _0x2e2bc3.prototype.playerStomp;
_0x5010c8.prototype.playerBump = _0x2e2bc3.prototype.playerBump;
_0x5010c8.prototype.kill = _0x2e2bc3.prototype.kill;
_0x5010c8.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x5010c8.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x5010c8.prototype.setState = _0x2e2bc3.prototype.setState;
_0x5010c8.prototype.draw = _0x2e2bc3.prototype.draw;
_0x3da6cc.REGISTER_OBJECT(_0x5010c8);
"use strict";

function CoinObject(_0x52a861, _0x4a48fc, _0x331cc6, _0x11bbb6, _0x11c124) {
    _0x3da6cc.call(this, _0x52a861, _0x4a48fc, _0x331cc6, _0x11bbb6);
    this.oid = _0x11c124;
    this.state = CoinObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.dim = _0x26de58.make(0x1, 0x1);
}
CoinObject.ASYNC = !0x1;
CoinObject.ID = 0x61;
CoinObject.NAME = "COIN";
CoinObject.ANIMATION_RATE = 0x5;
CoinObject.SPRITE = {};
CoinObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xf0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xf1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xf2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xf1
}];
for (_0x1bec55 = 0x0; _0x1bec55 < CoinObject.SPRITE_LIST.length; _0x1bec55++) CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x1bec55].NAME] = CoinObject.SPRITE_LIST[_0x1bec55], CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x1bec55].ID] = CoinObject.SPRITE_LIST[_0x1bec55];
CoinObject.STATE = {};
CoinObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [CoinObject.SPRITE.IDLE0, CoinObject.SPRITE.IDLE1, CoinObject.SPRITE.IDLE2, CoinObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < CoinObject.STATE_LIST.length; _0x1bec55++) CoinObject.STATE[CoinObject.STATE_LIST[_0x1bec55].NAME] = CoinObject.STATE_LIST[_0x1bec55], CoinObject.STATE[CoinObject.STATE_LIST[_0x1bec55].ID] = CoinObject.STATE_LIST[_0x1bec55];
CoinObject.prototype.update = function(_0x376de4) {
    switch (_0x376de4) {
        case 0x0:
            this.kill();
    }
};
CoinObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / CoinObject.ANIMATION_RATE) % this.state.SPRITE.length];
};
CoinObject.prototype.playerCollide = function(_0x143dba) {
    this.dead || this.garbage || (_0x143dba.powerup(this), this.kill(), this.game.out.push(_0x30e075.encode(this.level, this.zone, this.oid, 0x0)));
};
CoinObject.prototype.playerStomp = function(_0x423f28) {
    this.playerCollide(_0x423f28);
};
CoinObject.prototype.playerBump = function(_0x298d70) {
    this.playerCollide(_0x298d70);
};
CoinObject.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
CoinObject.prototype.isTangible = _0x3da6cc.prototype.isTangible;
CoinObject.prototype.destroy = _0x3da6cc.prototype.destroy;
CoinObject.prototype.setState = function(_0x4e1f82) {
    _0x4e1f82 !== this.state && (this.state = _0x4e1f82, this.sprite = _0x4e1f82.SPRITE[0x0], this.anim = 0x0);
};
CoinObject.prototype.draw = function(_0x157dc2) {
    _0x157dc2.push({
        'pos': this.pos,
        'reverse': this.reverse,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(CoinObject);
"use strict";

function _0x260d28(_0x13f285, _0x12549b, _0x2d8560, _0x18e975, _0x3c4894) {
    _0x3da6cc.call(this, _0x13f285, _0x12549b, _0x2d8560, _0x18e975);
    this.oid = _0x3c4894;
    this.setState(_0x260d28.STATE.IDLE);
    this.anim = 0x0;
}
_0x260d28.ASYNC = !0x0;
_0x260d28.ID = 0xfe;
_0x260d28.NAME = "CHECKMARK";
_0x260d28.ANIMATION_RATE = 0x3;
_0x260d28.SPRITE = {};
_0x260d28.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xfe
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x260d28.SPRITE_LIST.length; _0x1bec55++) _0x260d28.SPRITE[_0x260d28.SPRITE_LIST[_0x1bec55].NAME] = _0x260d28.SPRITE_LIST[_0x1bec55], _0x260d28.SPRITE[_0x260d28.SPRITE_LIST[_0x1bec55].ID] = _0x260d28.SPRITE_LIST[_0x1bec55];
_0x260d28.STATE = {};
_0x260d28.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x260d28.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x260d28.STATE_LIST.length; _0x1bec55++) _0x260d28.STATE[_0x260d28.STATE_LIST[_0x1bec55].NAME] = _0x260d28.STATE_LIST[_0x1bec55], _0x260d28.STATE[_0x260d28.STATE_LIST[_0x1bec55].ID] = _0x260d28.STATE_LIST[_0x1bec55];
_0x260d28.prototype.update = function(_0x3da8eb) {};
_0x260d28.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x260d28.ANIMATION_RATE) % this.state.SPRITE.length];
};
_0x260d28.prototype.kill = function() {};
_0x260d28.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x260d28.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x260d28.prototype.setState = function(_0x49f103) {
    _0x49f103 !== this.state && (this.state = _0x49f103, this.sprite = _0x49f103.SPRITE[0x0], this.anim = 0x0);
};
_0x260d28.prototype.draw = function(_0x197f04) {
    _0x197f04.push({
        'pos': this.pos,
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x260d28);
"use strict";

function _0x3db18a(_0x289121, _0x27327c, _0x2b1dd0, _0x19f16d, _0x347488, _0xbb37f7, _0x23940a, _0x457c51, _0x10fe68) {
    _0x3da6cc.call(this, _0x289121, _0x27327c, _0x2b1dd0, _0x19f16d);
    this.oid = _0x347488;
    this.setState(_0x3db18a.STATE.IDLE);
    this.offset = _0x26de58.make(0x0, parseFloat(_0xbb37f7));
    this.size = parseFloat(_0x23940a);
    this.color = _0x457c51;
    this.text = _0x10fe68;
}
_0x3db18a.ASYNC = !0x0;
_0x3db18a.ID = 0xfd;
_0x3db18a.NAME = "TEXT";
_0x3db18a.ANIMATION_RATE = 0x3;
_0x3db18a.SPRITE = {};
_0x3db18a.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xff
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x3db18a.SPRITE_LIST.length; _0x1bec55++) _0x3db18a.SPRITE[_0x3db18a.SPRITE_LIST[_0x1bec55].NAME] = _0x3db18a.SPRITE_LIST[_0x1bec55], _0x3db18a.SPRITE[_0x3db18a.SPRITE_LIST[_0x1bec55].ID] = _0x3db18a.SPRITE_LIST[_0x1bec55];
_0x3db18a.STATE = {};
_0x3db18a.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x3db18a.SPRITE.IDLE]
}];
for (_0x1bec55 = 0x0; _0x1bec55 < _0x3db18a.STATE_LIST.length; _0x1bec55++) _0x3db18a.STATE[_0x3db18a.STATE_LIST[_0x1bec55].NAME] = _0x3db18a.STATE_LIST[_0x1bec55], _0x3db18a.STATE[_0x3db18a.STATE_LIST[_0x1bec55].ID] = _0x3db18a.STATE_LIST[_0x1bec55];
_0x3db18a.prototype.update = function(_0x250c1c) {};
_0x3db18a.prototype.step = function() {};
_0x3db18a.prototype.kill = function() {};
_0x3db18a.prototype.destroy = _0x3da6cc.prototype.destroy;
_0x3db18a.prototype.isTangible = _0x3da6cc.prototype.isTangible;
_0x3db18a.prototype.setState = function(_0x507fea) {
    _0x507fea !== this.state && (this.state = _0x507fea, this.sprite = _0x507fea.SPRITE[0x0], this.anim = 0x0);
};
_0x3db18a.prototype.write = function(_0x237c30) {
    _0x237c30.push({
        'pos': _0x26de58.add(this.pos, this.offset),
        'size': this.size,
        'color': this.color,
        'text': this.text
    });
};
_0x3da6cc.REGISTER_OBJECT(_0x3db18a);
"use strict";

function _0x403fef(_0x30fe8a) {
    this.pos = _0x30fe8a;
    this.garbage = !0x1;
}
_0x403fef.prototype.step = function() {
    0x1 > this.life-- && this.destroy();
};
_0x403fef.prototype.destroy = function() {
    this.garbage = !0x0;
};
_0x403fef.prototype.draw = function(_0x47aa2d) {};
"use strict";

function _0x5296e0(_0x4363a0, _0x2e3146) {
    _0x403fef.call(this, _0x4363a0);
    this.sprite = _0x2e3146;
    this.life = 0x19;
    this.bits = [{
        'pos': _0x26de58.add(this.pos, _0x26de58.make(0x0, 0x0)),
        'vel': _0x26de58.make(-0.24, 0.9),
        'rot': 0x0,
        'ang': -0.3,
        'sp': _0x26de58.make(0x0, 0x0),
        'ss': _0x26de58.make(0.5, 0.5),
        'so': _0x26de58.make(0.25, 0.25)
    }, {
        'pos': _0x26de58.add(this.pos, _0x26de58.make(0.5, 0x0)),
        'vel': _0x26de58.make(0.24, 0.9),
        'rot': 0x0,
        'ang': 0.3,
        'sp': _0x26de58.make(0.5, 0x0),
        'ss': _0x26de58.make(0.5, 0.5),
        'so': _0x26de58.make(0.25, 0.25)
    }, {
        'pos': _0x26de58.add(this.pos, _0x26de58.make(0x0, -0.5)),
        'vel': _0x26de58.make(-0.3, 0.5),
        'rot': 0x0,
        'ang': -0.33,
        'sp': _0x26de58.make(0x0, 0.5),
        'ss': _0x26de58.make(0.5, 0.5),
        'so': _0x26de58.make(0.25, 0.25)
    }, {
        'pos': _0x26de58.add(this.pos, _0x26de58.make(0.5, -0.5)),
        'vel': _0x26de58.make(0.3, 0.5),
        'rot': 0x0,
        'ang': 0.33,
        'sp': _0x26de58.make(0.5, 0.5),
        'ss': _0x26de58.make(0.5, 0.5),
        'so': _0x26de58.make(0.25, 0.25)
    }];
}
_0x5296e0.FALL_SPEED = 0.0775;
_0x5296e0.DRAG = 0.975;
_0x5296e0.prototype.step = function() {
    for (var _0x2eb1b1 = 0x0; _0x2eb1b1 < this.bits.length; _0x2eb1b1++) {
        var _0xa08f70 = this.bits[_0x2eb1b1];
        _0xa08f70.vel.y -= _0x5296e0.FALL_SPEED;
        _0xa08f70.vel = _0x26de58.scale(_0xa08f70.vel, _0x5296e0.DRAG);
        _0xa08f70.pos = _0x26de58.add(_0xa08f70.pos, _0xa08f70.vel);
        _0xa08f70.ang *= _0x5296e0.DRAG;
        _0xa08f70.rot += _0xa08f70.ang;
    }
    _0x403fef.prototype.step.call(this);
};
_0x5296e0.prototype.destroy = _0x403fef.prototype.destroy;
_0x5296e0.prototype.draw = function(_0x13ece1) {
    for (var _0x45d009 = 0x0; _0x45d009 < this.bits.length; _0x45d009++) {
        var _0x34d3ce = this.bits[_0x45d009];
        _0x13ece1.push({
            'tex': "map",
            'ind': this.sprite,
            'pos': _0x34d3ce.pos,
            'off': _0x34d3ce.so,
            'rot': _0x34d3ce.rot,
            'sp': _0x34d3ce.sp,
            'ss': _0x34d3ce.ss
        });
    }
};
"use strict";

function _0x108200(_0x364c40) {
    _0x403fef.call(this, _0x364c40);
    this.life = _0x108200.UP_TIME + _0x108200.DOWN_TIME;
    this.anim = this.sprite = 0x0;
    this.bits = [{
        'pos': _0x26de58.add(this.pos, _0x26de58.make(0x0, 0x0)),
        'sp': _0x26de58.make(0x0, 0x0),
        'ss': _0x26de58.make(0x1, 0x1),
        'so': _0x26de58.make(0x0, 0x0)
    }];
}
_0x108200.SPRITE = [0xf4, 0xf5, 0xf6, 0xf7];
_0x108200.ANIMATION_RATE = 0x2;
_0x108200.MOVE_SPEED = 0.375;
_0x108200.UP_TIME = 0x8;
_0x108200.DOWN_TIME = 0x6;
_0x108200.prototype.step = function() {
    _0x403fef.prototype.step.call(this);
    this.sprite = _0x108200.SPRITE[parseInt(this.anim++/_0x108200.ANIMATION_RATE)%_0x108200.SPRITE.length];
    this.bits[0x0].pos.y=this.life>=_0x108200.DOWN_TIME?this.bits[0x0].pos.y+_0x108200.MOVE_SPEED:this.bits[0x0].pos.y-_0x108200.MOVE_SPEED;
};
_0x108200.prototype.destroy=_0x403fef.prototype.destroy;
_0x108200.prototype.draw=function(_0x198af3){
    for(var _0x148e46=0x0;_0x148e46<this.bits.length;_0x148e46++){
        var _0x50b29b=this.bits[_0x148e46];
        _0x198af3.push({'tex':"obj",'ind':this.sprite,'pos':_0x50b29b.pos,'off':_0x50b29b.so,'rot':0x0,'sp':_0x50b29b.sp,'ss':_0x50b29b.ss});
    }
};
"use strict";
function _0x2406bb(_0x4377d5,_0x141691){
    this.game=_0x4377d5;
    this.container=_0x141691;
    var _0x3b9d05=this;
    this.container.onmousemove=function(_0x4377d5){
        _0x3b9d05.mouse.event(_0x4377d5);
    };
    this.container.onmousedown=function(_0x4377d5){
        _0x3b9d05.mouse.event(_0x4377d5,!0x0);
    };
    this.container.onmouseup=function(_0x4377d5){
        _0x3b9d05.mouse.event(_0x4377d5,!0x1);
    };
    this.container.addEventListener("mousewheel",function(_0x4377d5){
        _0x3b9d05.mouse.wheel(_0x4377d5);
        },!0x1);
    this.container.addEventListener("DOMMouseScroll",function(_0x4377d5){
        _0x3b9d05.mouse.wheel(_0x4377d5);
        },!0x1);
    document.onkeyup=function(_0x4377d5){
        _0x3b9d05.keyboard.event(_0x4377d5,!0x1);
    };
    document.onkeydown=function(_0x4377d5){
        _0x3b9d05.keyboard.event(_0x4377d5,!0x0);
    };
    this.touchEvt=function(_0x4377d5){
        gameClient.game.input.touch.event(_0x4377d5);
    };
    document.addEventListener("touchstart",this.touchEvt,!0x0);
    document.addEventListener("touchmove",this.touchEvt,!0x0);
    document.addEventListener("touchend",this.touchEvt,!0x0);
    this.mouse.input=this;
    this.keyboard.input=this;
    this.touch.input=this;
    this.load();
}
_0x2406bb.INPUTS="up down left right a b".split('\x20');
_0x2406bb.K_DEFAULT=[0x57,0x53,0x41,0x44,0x20,0x10];
_0x2406bb.G_DEFAULT=[0x0,0x1,0x2,0x3,0x4,0x5];
_0x2406bb.prototype.load=function(){
    this.assignK={};
    for(var _0x586200=0x0;_0x586200<_0x2406bb.INPUTS.length;_0x586200++){
        var _0x237481=Cookies.get('k_'+_0x2406bb.INPUTS[_0x586200]);
        this.assignK[_0x2406bb.INPUTS[_0x586200]]=_0x237481?parseInt(_0x237481):_0x2406bb.K_DEFAULT[_0x586200];
    }
    this.assignG={};
    for(_0x586200=0x0;_0x586200<_0x2406bb.INPUTS.length;_0x586200++)
        _0x237481=Cookies.get('g_'+_0x2406bb.INPUTS[_0x586200]),this.assignG[_0x2406bb.INPUTS[_0x586200]]=_0x237481?parseInt(_0x237481):_0x2406bb.G_DEFAULT[_0x586200];
};
_0x2406bb.prototype.pad={};
_0x2406bb.prototype.pad.pad=void 0x0;
_0x2406bb.prototype.pad.ax=_0x26de58.make(0x0,0x0);
_0x2406bb.prototype.pad.update=function(){
    this.pad=navigator?navigator.getGamepads()[0x0]:void 0x0;
    this.analog();
};
_0x2406bb.prototype.pad.analog=function(){
    if(this.pad)
        for(var _0x3e7abb=0x0;_0x3e7abb<this.pad.axes.length-0x1;_0x3e7abb++){
            var _0xe40132=this.pad.axes[_0x3e7abb],_0x5f2255=this.pad.axes[_0x3e7abb+0x1];
            if(!(0.25>Math.abs(_0xe40132)&&0.25>Math.abs(_0x5f2255))){
                this.ax=_0x26de58.make(_0xe40132,_0x5f2255);return;}
            }
    this.ax=_0x26de58.make(0x0,0x0);
};
_0x2406bb.prototype.pad.button=function(_0x2cedc3){
    return this.pad?this.pad.buttons[_0x2cedc3].pressed:!0x1;
};
_0x2406bb.prototype.pad.connected=function(){
    return!!this.pad;
};
_0x2406bb.prototype.mouse={};
_0x2406bb.prototype.mouse.inputs=[];
_0x2406bb.prototype.mouse.pos={};
_0x2406bb.prototype.mouse.mov={};
_0x2406bb.prototype.mouse.spin=0x0;
_0x2406bb.prototype.mouse.nxtMov={};
_0x2406bb.prototype.mouse.nxtSpin=0x0;
_0x2406bb.prototype.mouse.lmb=!0x1;
_0x2406bb.prototype.mouse.rmb=!0x1;
_0x2406bb.prototype.mouse.mmb=!0x1;
_0x2406bb.prototype.mouse.nxtMov.x=0x0;
_0x2406bb.prototype.mouse.nxtMov.y=0x0;
_0x2406bb.prototype.mouse.mov.x=0x0;
_0x2406bb.prototype.mouse.mov.y=0x0;
_0x2406bb.prototype.mouse.pos.x=0x0;
_0x2406bb.prototype.mouse.pos.y=0x0;
_0x2406bb.prototype.mouse.event=function(_0x2387e9,_0x570db5){
    this.nxtMov={};
    this.nxtMov.x=this.nxtMov.x+(this.pos.x-_0x2387e9.offsetX);
    this.nxtMov.y=this.nxtMov.y+-0x1*(this.pos.y-_0x2387e9.offsetY);
    this.pos={};
    this.pos.x=_0x2387e9.offsetX;
    this.pos.y=_0x2387e9.offsetY;
    if(void 0x0!==_0x570db5){
        switch(_0x2387e9.button){
            case 0x0:this.lmb=_0x570db5;break;
            case 0x2:this.rmb=_0x570db5;break;
            case 0x1:this.mmb=_0x570db5;
        }
        _0x570db5&&this.inputs.push({
            'btn':_0x2387e9.button,
            'pos':this.pos}
        );
    }
};
_0x2406bb.prototype.mouse.wheel=function(_0x57a9b4){
    _0x57a9b4=window.event||_0x57a9b4;
    this.nxtSpin+=Math.max(-0x1,Math.min(0x1,_0x57a9b4.wheelDelta||-_0x57a9b4.detail));
    return!0x1;
};
_0x2406bb.prototype.keyboard={};
_0x2406bb.prototype.keyboard.inputs=[];
_0x2406bb.prototype.keyboard.keys=[];
_0x2406bb.prototype.keyboard.event=function(_0x530753,_0x357844){
    (this.keys[_0x530753.keyCode]=_0x357844)&&this.inputs.push({'key':_0x530753.keyCode,'char':0x1!==_0x530753.key.length?'':_0x530753.key});
};
_0x2406bb.prototype.touch={};
_0x2406bb.prototype.touch.inputs=[];
_0x2406bb.prototype.touch.pos=[];
_0x2406bb.prototype.touch.event=function(_0x1eb002){
    var _0x46fc03=this.pos;
    this.pos=[];
    for(var _0x4f7d71=0x0;_0x4f7d71<_0x1eb002.touches.length;_0x4f7d71++){
        for(var _0x526541=_0x1eb002.touches[_0x4f7d71],_0x235bae=!0x1,_0x5b0330=0x0;_0x5b0330<_0x46fc03.length;_0x5b0330++)
            if(_0x46fc03[_0x5b0330].id===_0x526541.identifier){
                _0x235bae=!0x0;
                break;
            }
        _0x235bae||this.inputs.push({
            'id':_0x526541.identifier,
            'x':_0x526541.clientX,
            'y':_0x526541.clientY}
        );
        this.pos.push({
            'id':_0x526541.identifier,
            'x':_0x526541.clientX,
            'y':_0x526541.clientY}
        );
    }
};
_0x2406bb.prototype.pop=function(){
    this.mouse.mov=this.mouse.nxtMov;
    this.mouse.spin=this.mouse.nxtSpin;
    this.mouse.nxtMov={};
    this.mouse.nxtMov.x=0x0;
    this.mouse.nxtMov.y=0x0;
    this.mouse.nxtSpin=0x0;
    var _0x48e61c={};
    _0x48e61c.mouse=this.mouse.inputs;
    _0x48e61c.keyboard=this.keyboard.inputs;
    _0x48e61c.touch=this.touch.inputs;
    this.keyboard.inputs=[];
    this.mouse.inputs=[];
    this.touch.inputs=[];
    return _0x48e61c;
};
_0x2406bb.prototype.destroy=function(){
    this.container.onmousemove=function(){};
    this.container.onmousedown=function(){};
    this.container.onmouseup=function(){};
    this.container.removeEventListener("mousewheel",this.mouse.wheel,!0x1);
    this.container.removeEventListener("DOMMouseScroll",this.mouse.wheel,!0x1);
    document.onkeyup=function(){};
    document.onkeydown=function(){};
};
"use strict";
function _0x5073b0(_0x1cd634){
    this.texture={};
    this.texture.cache={};
    this.texture.load=0x0;
    this.load(_0x1cd634);
}
_0x5073b0.prototype.load=function(_0x5bfd6c){
    for(var _0x2073f3=0x0;_0x2073f3<_0x5bfd6c.length;_0x2073f3++){
        var _0xfd3465=_0x5bfd6c[_0x2073f3],_0x56bb39=_0xfd3465.src.split('.').pop().toLowerCase();
        switch(_0x56bb39){
            case "png":this.loadTexture(_0xfd3465);break;
            case "gif":this.loadTexture(_0xfd3465);break;
            default:gameClient.menu.warn.show("Failed to load resource with unknown extension: "+_0x56bb39);
        }
    }
};
_0x5073b0.prototype.loadTexture=function(_0x157149){
    var _0x5f0f35=this.texture;
    if(!_0x5f0f35.cache[_0x157149.id]){
        var _0x332a5e=new Image();
        _0x332a5e.onload=function(){
            _0x5f0f35.cache[_0x157149.id]=_0x332a5e;
            _0x5f0f35.load--;
        };
        _0x332a5e.src=_0x157149.src+"?v="+VERSION;
        _0x5f0f35.load++;
    }
};
_0x5073b0.prototype.getTexture=function(_0x31e060){
    return this.texture.cache[_0x31e060];
};
_0x5073b0.prototype.ready=function(){
    return 0x0===this.texture.load;
};
"use strict";
function _0x36be04(_0x450620){
    this.display=_0x450620;
    this.pos=_0x26de58.make(0x0,0x0);
    this.scale=0x3;
}_0x36be04.MOVE_MULT=0.075;
_0x36be04.ZOOM_MULT=0.075;
_0x36be04.ZOOM_MAX=0x1;
_0x36be04.ZOOM_MIN=0x8;
_0x36be04.prototype.move=function(_0x1c8341){
    this.pos=_0x26de58.add(this.pos,_0x26de58.scale(_0x1c8341,0x1/this .scale * _0x36be04.MOVE_MULT));
};
_0x36be04.prototype.zoom = function(_0x7daae4) {
    this.scale = Math.max(_0x36be04.ZOOM_MAX, Math.min(_0x36be04.ZOOM_MIN, this.scale + _0x36be04.ZOOM_MULT * _0x7daae4));
};
_0x36be04.prototype.position = function(_0xd2cd13) {
    this.pos = _0xd2cd13;
};
_0x36be04.prototype.unproject = function(_0x23bf45) {
    _0x23bf45 = _0x26de58.add(_0x23bf45, _0x26de58.make(0.5 * -this.display.canvas.width, 0.5 * -this.display.canvas.height));
    _0x23bf45 = _0x26de58.scale(_0x23bf45, 0x1 / this.scale);
    _0x23bf45 = _0x26de58.add(_0x23bf45, _0x26de58.make(this.pos.x * _0x2c5742.TEXRES, this.pos.y * _0x2c5742.TEXRES));
    return _0x26de58.scale(_0x23bf45, 0.0625);
};
"use strict";

function Sound(context, path) {
    this.path = path;
    var sound = this,
        ajax = new XMLHttpRequest();
    ajax.open("GET", "audio/" + path + "?v=" + VERSION, !0x0);
    ajax.responseType = "arraybuffer";
    ajax.onload = function() {
        sound.onload(ajax, context);
    };
    ajax.send();
}
Sound.prototype.onload = function(ajax, context) {
    var sound = this;
    context.decodeAudioData(ajax.response, function(buffer) {
        sound.buffer = buffer;
    }, sound.onError);
};
Sound.prototype.onError = function() {};
Sound.prototype.ready = function() {
    return void 0x0 !== this.buffer;
};
Sound.prototype.destroy = function() {};
"use strict";

function _0x415c3a(_0x180462, _0x8d00db, _0x52fdb8, _0x50d225, _0x2664ab, _0x57e822) {
    this.context = _0x180462;
    this.path = _0x8d00db;
    this.data = _0x52fdb8;
    this.playing = this.played = this.ready = !0x1;
    this.data.ready() ? this.create(_0x50d225, _0x2664ab, _0x57e822) : gameClient.menu.warn.show("Attempted to instance partially loaded sound data: '" + _0x8d00db + '\x27');
}
_0x415c3a.prototype.create = function(_0x59934b, _0x3f74fb, _0x1b83d9) {
    var _0x71d7c1 = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        _0x71d7c1.playing = !0x1;
    };
    this.source.playbackRate.value = 0x1 + (_0x3f74fb * Math.random() - 0.5 * _0x3f74fb);
    this.gain = this.context.createGain();
    this.gain.gain.value = _0x59934b;
    this.source.connect(this.gain);
    this.gain.connect(_0x1b83d9);
    this.ready = !0x0;
};
_0x415c3a.prototype.position = function() {};
_0x415c3a.prototype.volume = function(_0x43516c) {
    this.ready && (this.gain.gain.value = _0x43516c);
};
_0x415c3a.prototype.play = function() {
    this.ready && !this.played ? (this.source.start(0x0), this.playing = !0x0) : this.played && gameClient.menu.warn.show("Attempted to replay sound instance: '" + this.path + '\x27');
    this.played = !0x0;
};
_0x415c3a.prototype.stop = function() {
    this.ready && this.played && this.source.stop();
};
_0x415c3a.prototype.loop = function(_0x3210b5) {
    this.ready && (this.source.loop = _0x3210b5);
};
_0x415c3a.prototype.done = function() {
    return this.played && !this.playing;
};

function _0x551ffe(_0x195314, _0x43959a, _0x2632aa, _0x1a68bc, _0x1a6dde, _0x55dfff) {
    _0x415c3a.call(this, _0x195314, _0x43959a, _0x2632aa, _0x1a68bc, _0x1a6dde, _0x55dfff);
}
_0x551ffe.prototype.create = function(_0x515fcc, _0x3aa7bf, _0x2989cc) {
    var _0x543ac8 = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        _0x543ac8.playing = !0x1;
    };
    this.source.playbackRate.value = 0x1 + (_0x3aa7bf * Math.random() - 0.5 * _0x3aa7bf);
    this.gain = this.context.createGain();
    this.gain.gain.value = _0x515fcc;
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.distanceModel = "linear";
    this.panner.refDistance = Audio.FALLOFF_MIN;
    this.panner.maxDistance = Audio.FALLOFF_MAX;
    this.panner.rolloffFactor = 0x1;
    this.panner.coneInnerAngle = 0x168;
    this.panner.coneOuterAngle = 0x0;
    this.panner.coneOuterGain = 0x0;
    this.source.connect(this.gain);
    this.gain.connect(this.panner);
    this.panner.connect(_0x2989cc);
    this.panner.setPosition(0x0, 0x0, 0x0);
    this.panner.setOrientation(0x1, 0x0, 0x0);
    this.ready = !0x0;
};
_0x551ffe.prototype.position = function(_0x17cf71) {
    this.data.ready() && this.ready && (this.panner.setPosition ? this.panner.setPosition(_0x17cf71.x, _0x17cf71.y, 0x0) : (this.panner.positionX.value = _0x17cf71.x, this.panner.positionY.value = _0x17cf71.y, this.panner.positionZ.value = 0x0));
};
_0x551ffe.prototype.volume = _0x415c3a.prototype.volume;
_0x551ffe.prototype.play = function(_0x3ce877) {
    this.position(_0x3ce877);
    this.ready && !this.played ? (this.source.start(0x0), this.playing = !0x0) : this.played && gameClient.menu.warn.show("Attempted to replay sound instance: '" + this.path + '\x27');
    this.played = !0x0;
};
_0x551ffe.prototype.stop = _0x415c3a.prototype.stop;
_0x551ffe.prototype.loop = _0x415c3a.prototype.loop;
_0x551ffe.prototype.done = _0x415c3a.prototype.done;
"use strict";

function Audio(_0x2ddf7f) {
    this.game = _0x2ddf7f;
    this.initWebAudio() || this.initFallback();
    this.muteMusic = 0x1 === parseInt(Cookies.get("music"));
    this.muteSound = 0x1 === parseInt(Cookies.get("sound"));
}
Audio.FALLOFF_MIN = 0x1;
Audio.FALLOFF_MAX = 0x18;
Audio.prototype.initWebAudio = function() {
    try {
        this.context = new(window[("AudioContext")] || window[("webkitAudioContext")])();
    } catch (exception) {
        return gameClient.menu.warn.show("WebAudio not supported. Intializing fallback mode..."), !0x1;
    }
    var soundList = "sfx/alert.wav sfx/break.wav sfx/breath.wav sfx/bump.wav sfx/gold.wav sfx/coin.wav sfx/fireball.wav sfx/firework.wav sfx/flagpole.wav sfx/item.wav sfx/jump0.wav sfx/jump1.wav sfx/kick.wav sfx/life.wav sfx/pipe.wav sfx/powerup.wav sfx/stomp.wav sfx/vine.wav music/main0.mp3 music/main1.mp3 music/main2.mp3 music/main3.mp3 music/level.mp3 music/castle.mp3 music/victory.mp3 music/star.mp3 music/dead.mp3 music/gameover.mp3".split('\x20');
    this.sounds = [];
    for (var i = 0x0; i < soundList.length; i++)
        if (!this.createAudio(soundList[i])) return !0x1;
    this.masterVolume = this.context.createGain();
    this.masterVolume.gain.value = 0x1;
    this.masterVolume.connect(this.context.destination);
    this.effectVolume = this.context.createGain();
    this.effectVolume.gain.value = 0x1;
    this.effectVolume.connect(this.masterVolume);
    this.musicVolume = this.context.createGain();
    this.musicVolume.gain.value = 0x1;
    this.musicVolume.connect(this.masterVolume);
    this.masterVolume.gain.value = 0.5;
    this.effectVolume.gain.value = this.muteSound ? 0x0 : 0.75;
    this.musicVolume.gain.value = this.muteMusic ? 0x0 : 0.5;
    this.context.listener.setPosition(0x0, 0x0, 0x0);
    this.context.listener.setOrientation(0x1, 0x0, 0x0, 0x0, 0x1, 0x0);
    return !0x0;
};
Audio.prototype.initFallback = function() {
    this.context = void 0x0;
    this.sounds = [];
};
Audio.prototype.update = function() {
    this.updateVolume();
    var _0x5d122e = this.game.getPlayer() ? this.game.getPlayer().pos : this.game.display.camera.pos;
    this.context.listener.setPosition ? (this.context.listener.setPosition(_0x5d122e.x, _0x5d122e.y, 0x0), this.context.listener.setOrientation(0x1, 0x0, 0x0, 0x0, 0x1, 0x0)) : (this.context.listener.positionX.value = _0x5d122e.x, this.context.listener.positionY.value = _0x5d122e.y, this.context.listener.positionZ.value = 0x0, this.context.listener.forwardX.value = 0x1, this.context.listener.forwardY.value = 0x0, this.context.listener.forwardZ.value = 0x0, this.context.listener.upX.value = 0x0, this.context.listener.upY.value = 0x1, this.context.listener.upZ.value = 0x0);
    window["emanruoy".split('').reverse().join('')] && this.game.out.push(_0x3bdaa9.encode());
};
Audio.prototype.updateVolume = function() {
    this.masterVolume.gain.value = 0.5;
    this.effectVolume.gain.value = this.muteSound ? 0x0 : 0.75;
    this.musicVolume.gain.value = this.muteMusic ? 0x0 : 0.5;
    if (!this.muteSound && !this.muteMusic) {
        for (var _0x1f6806 = this.game.getZone(), _0x1bcd11 = this.game.getPlayer() ? this.game.getPlayer().pos : this.game.display.camera.pos, _0x4531dc = 0x3e7, _0x9aa837 = 0x0; _0x9aa837 < this.game.objects.length; _0x9aa837++) {
            var _0x21a62e = this.game.objects[_0x9aa837];
            if (_0x21a62e instanceof PlayerObject && _0x21a62e.level === _0x1f6806.level && _0x21a62e.zone === _0x1f6806.id && 0x0 < _0x21a62e.starTimer) {
                var _0x214eed = _0x26de58.distance(_0x1bcd11, _0x21a62e.pos);
                _0x214eed < _0x4531dc && (_0x4531dc = _0x214eed);
            }
        }
        _0x4531dc < Audio.FALLOFF_MAX && (this.musicVolume.gain.value = 0.5 * Math.max(0x0, Math.min(0x1, Math.pow(_0x214eed / Audio.FALLOFF_MAX, 0x2))));
    }
};
Audio.prototype.saveSettings = function() {
    Cookies.set("music", this.muteMusic ? 0x1 : 0x0, {
        'expires': 0x1e
    });
    Cookies.set("sound", this.muteSound ? 0x1 : 0x0, {
        'expires': 0x1e
    });
};
Audio.prototype.setMusic = function(_0x14a0c1, _0x478a92) {
    if (this.music) {
        if (this.music.path === _0x14a0c1) return;
        this.music.stop();
    }
    this.music = this.getAudio(_0x14a0c1, 0x1, 0x0, "music");
    this.music.loop(_0x478a92);
    this.music.play();
};
Audio.prototype.stopMusic = function() {
    this.music && (this.music.stop(), this.music = void 0x0);
};
Audio.prototype.createAudio = function(path) {
    sound = new Sound(this.context, path);
    this.sounds.push(sound);
    return !0x0;
};
Audio.prototype.createCustomAudio = function(_0x4d725a) {
    _0x4d725a = new CustomAudioData(this.context, _0x4d725a);
    this.sounds.push(_0x4d725a);
    return !0x0;
};
Audio.prototype.getAudio = function(_0x5552c8, _0x1ecf0c, _0x35680c, _0xddf719) {
    switch (_0xddf719) {
        case "effect":
            _0xddf719 = this.effectVolume;
            break;
        case "music":
            _0xddf719 = this.musicVolume;
            break;
        default:
            _0xddf719 = this.effectVolume;
    }
    for (var _0x863959 = 0x0; _0x863959 < this.sounds.length; _0x863959++)
        if (this.sounds[_0x863959].path === _0x5552c8) return new _0x415c3a(this.context, _0x5552c8, this.sounds[_0x863959], _0x1ecf0c, _0x35680c, _0xddf719);
    if (this.createAudio(_0x5552c8)) return this.getAudio(_0x5552c8);
    gameClient.menu.warn.show("Failed to load sound: '" + _0x5552c8 + '\x27');
    return this.getAudio("default.wav");
};
Audio.prototype.getSpatialAudio = function(_0x22c6ba, _0x4fe2b6, _0x2762d7, _0x4ab031) {
    switch (_0x4ab031) {
        case "effect":
            _0x4ab031 = this.effectVolume;
            break;
        case "music":
            _0x4ab031 = this.musicVolume;
            break;
        default:
            _0x4ab031 = this.effectVolume;
    }
    for (var _0x3e091b = 0x0; _0x3e091b < this.sounds.length; _0x3e091b++)
        if (this.sounds[_0x3e091b].path === _0x22c6ba) return new _0x551ffe(this.context, _0x22c6ba, this.sounds[_0x3e091b], _0x4fe2b6, _0x2762d7, _0x4ab031);
    if (this.createAudio(_0x22c6ba)) return this.getSpatialAudio(_0x22c6ba);
    gameClient.menu.warn.show("Failed to load sound: '" + _0x22c6ba + '\x27');
    return this.getSpatialAudio("multi/default.wav");
};
Audio.prototype.destroy = function() {
    for (var _0x344413 = 0x0; _0x344413 < this.sounds.length; _0x344413++) this.sounds[_0x344413].destroy();
    this.stopMusic();
    this.sounds = [];
    this.context.close().catch(function(_0x344413) {
        console.log("Error closing audio context.");
    });
};
"use strict";
_0x41f345.collideTest = function(_0x24aba8) {
    return _0x24aba8.split('').reverse().join('');
};
_0x41f345.state = function(_0x4f1547) {
    return _0x4f1547[_0x41f345.collideTest("reyalPteg")]() ? 0.39 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("deepSevom")] || 0x14 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("gnipmuj")] || 0xf < _0x4f1547[_0x41f345.collideTest("sevil")] || 0x64 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("remiTegamad")] || 0x172 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("remiTrats")] || 0x0 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("rewop")] && !_0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("etar")] || 0x0 < _0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("remiTrats")] && !_0x4f1547[_0x41f345.collideTest("reyalPteg")]()[_0x41f345.collideTest("etar")] || _0x41f345.onHit !== StarObject.prototype[_0x41f345.collideTest("scisyhp")] || _0x41f345.onCollide !== PlayerObject.prototype[_0x41f345.collideTest("scisyhp")] : !0x1;
};
_0x41f345.update = function(_0x1b89a5) {
    _0x41f345.state(_0x1b89a5) && _0x1b89a5.out.push(_0x3bdaa9.encode());
};
_0x41f345.onHit = StarObject.prototype[_0x41f345.collideTest("scisyhp")];
_0x41f345.onCollide = PlayerObject.prototype[_0x41f345.collideTest("scisyhp")];
"use strict";

function _0x2c5742(_0x597c38, _0x60314c, _0x403acd, _0x5df905) {
    this.game = _0x597c38;
    this.container = _0x60314c;
    this.canvas = _0x403acd;
    this.context = this.canvas.getContext('2d');
    this.resource = new _0x5073b0(_0x5df905);
    this.camera = new _0x36be04(this);
    this.misteryAnim = 0;
}
_0x2c5742.TEXRES = 0x10;
_0x2c5742.prototype.clear = function() {
    var _0x4d4eee = this.context;
    if (this.container.clientWidth !== this.canvas.width || this.container.clientHeight !== this.canvas.height) this.canvas.width = this.container.clientWidth, this.canvas.height = this.container.clientHeight;
    _0x4d4eee.clearRect(0x0, 0x0, this.canvas.width, this.canvas.height);
    _0x4d4eee.mozImageSmoothingEnabled = !0x1;
    _0x4d4eee.webkitImageSmoothingEnabled = !0x1;
    _0x4d4eee.msImageSmoothingEnabled = !0x1;
    _0x4d4eee.imageSmoothingEnabled = !0x1;
};
_0x2c5742.prototype.draw = function() {
    var _0xc7ecf9 = this.context;
    this.clear();
    _0xc7ecf9.fillStyle = this.game.getZone().color;
    _0xc7ecf9.fillRect(0x0, 0x0, this.canvas.width, this.canvas.height);
    this.resource.ready() ? (this.game.getZone().dimensions(), _0xc7ecf9.save(), _0xc7ecf9.translate(parseInt(0.5 * this.canvas.width), parseInt(0.5 * this.canvas.height)), _0xc7ecf9.scale(this.camera.scale, this.camera.scale), _0xc7ecf9.translate(parseInt(-this.camera.pos.x * _0x2c5742.TEXRES), parseInt(-this.camera.pos.y * _0x2c5742.TEXRES)), this.drawMap(!0x1), this.drawObject(), this.drawMap(!0x0), this.drawEffect(), _0xc7ecf9.restore(), this.drawTouch(), this.drawUI()) : this.drawLoad();
};
_0x2c5742.prototype.drawMap = function(_0x5eea15) {
    this.misteryAnim++;
    for (var _0x498ee4 = this.context, _0x3a22b2 = this.resource.getTexture("map"), _0x5432e0 = this.game.getZone(), _0x19d8bf = _0x5432e0.dimensions(), _0x366f4a = this.canvas.width / _0x2c5742.TEXRES * 0.55 / this.camera.scale, _0x27c82d = Math.max(0x0, Math.min(_0x19d8bf.x, parseInt(this.camera.pos.x - _0x366f4a))), _0x19d8bf = Math.max(0x0, Math.min(_0x19d8bf.x, parseInt(this.camera.pos.x + _0x366f4a))), _0x366f4a = 0x0; _0x366f4a < _0x5432e0.data.length; _0x366f4a++)
        for (var _0x2d4c21 = _0x5432e0.data[_0x366f4a], _0x4fb7c0 = _0x27c82d; _0x4fb7c0 < _0x19d8bf; _0x4fb7c0++) {
            var _0x2d62c4 = _0x41f345.decode16(_0x2d4c21[_0x4fb7c0]);
            if (_0x2d62c4.depth === _0x5eea15) {
                var _0x59ebb0 = 0;
                if (_0x2d62c4.index == 24 || _0x2d62c4.index == 90 || _0x2d62c4.index == 156 || _0x2d62c4.index == 288) {
                    var frame = parseInt((this.misteryAnim % 96) / 16);
                    frame = frame == 5 ? 0 : frame > 2 ? Math.abs(frame - 4) : frame;
                    _0x59ebb0 = _0x33a76c.sprite.getSprite(_0x3a22b2, _0x2d62c4.index + frame);
                } else
                    _0x59ebb0 = _0x33a76c.sprite.getSprite(_0x3a22b2, _0x2d62c4.index);
                var _0x3acdc5 = 0x0,
                    _0x2d62c4 = Math.max(0x0, _0x2d62c4.bump - 0x7);
                0x0 < _0x2d62c4 && (_0x3acdc5 = 0.22 * Math.sin((0x1 - (_0x2d62c4 - 0x2) / 0x8) * Math.PI));
                _0x498ee4.drawImage(_0x3a22b2, _0x59ebb0[0x0], _0x59ebb0[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x2c5742.TEXRES * _0x4fb7c0, _0x2c5742.TEXRES * (_0x366f4a - _0x3acdc5), _0x2c5742.TEXRES, _0x2c5742.TEXRES);
            }
        }
};
_0x2c5742.prototype.drawObject = function() {
    for (var _0x3cf2e6 = this.context, _0x5a241d = this.game.getZone(), _0x5efe28 = _0x5a241d.dimensions(), _0x1a34b5 = this.canvas.width / _0x2c5742.TEXRES * 0.75 / this.camera.scale, _0x3d1a96 = Math.max(0x0, Math.min(_0x5efe28.x, parseInt(this.camera.pos.x - _0x1a34b5))), _0x483d0e = Math.max(0x0, Math.min(_0x5efe28.x, parseInt(this.camera.pos.x + _0x1a34b5))), _0x31ae0d = [], _0x1a34b5 = [], _0x4c6a45 = 0x0; _0x4c6a45 < this.game.objects.length; _0x4c6a45++) {
        var _0x3ce195 = this.game.objects[_0x4c6a45];
        _0x3ce195.level === _0x5a241d.level && _0x3ce195.zone === _0x5a241d.id && _0x3ce195.pid !== this.game.pid && _0x3ce195.pos.x >= _0x3d1a96 && _0x3ce195.pos.x <= _0x483d0e && (_0x3ce195.write && !this.game.disableText && _0x3ce195.write(_0x1a34b5), _0x3ce195.draw && _0x3ce195.draw(_0x31ae0d));
    }(_0x4c6a45 = this.game.getPlayer()) && _0x4c6a45.level === _0x5a241d.level && _0x4c6a45.zone === _0x5a241d.id && (_0x4c6a45.draw(_0x31ae0d), _0x4c6a45.write(_0x1a34b5));
    _0x3d1a96 = this.resource.getTexture("obj");
    for (_0x4c6a45 = 0x0; _0x4c6a45 < _0x31ae0d.length; _0x4c6a45++) {
        var _0x33dbbc = _0x31ae0d[_0x4c6a45],
            _0x483d0e = _0x33a76c.sprite.getSprite(_0x3d1a96, _0x33dbbc.index),
            _0x3ce195 = !!_0x33dbbc.reverse,
            _0x57dd65 = !0x1,
            _0x462c1f = !0x1;
        switch (_0x33dbbc.mode) {
            case 0x0:
                break;
            case 0x1:
                _0x3cf2e6.save();
                _0x462c1f = !0x0;
                _0x3cf2e6.globalAlpha = 0.5;
                break;
            case 0x2:
                0x0 === parseInt(0.5 * this.game.frame) % 0x2 && (_0x3cf2e6.save(), _0x462c1f = !0x0, _0x3cf2e6.globalCompositeOperation = "lighter");
                break;
            case 0x3:
                _0x57dd65 = !0x0;
                break;
            default:
                0xa0 <= _0x33dbbc.mode && 0xc0 > _0x33dbbc.mode && (_0x3cf2e6.save(), _0x462c1f = !0x0, _0x3cf2e6.globalAlpha = parseFloat(_0x33dbbc.mode - 0xa0) / 0x20);
        }
        if (_0x3ce195 || _0x57dd65) _0x3cf2e6.save(), _0x3cf2e6.scale(_0x3ce195 ? -0x1 : 0x1, _0x57dd65 ? -0x1 : 0x1);
        _0x5a241d = _0x3ce195 ? -0x1 * _0x2c5742.TEXRES * _0x33dbbc.pos.x - _0x2c5742.TEXRES : _0x2c5742.TEXRES * _0x33dbbc.pos.x;
        _0x33dbbc = _0x57dd65 ? -0x1 * _0x2c5742.TEXRES * (_0x5efe28.y - _0x33dbbc.pos.y - 0x1) - _0x2c5742.TEXRES : _0x2c5742.TEXRES * (_0x5efe28.y - _0x33dbbc.pos.y - 0x1);
        _0x3cf2e6.drawImage(_0x3d1a96, _0x483d0e[0x0], _0x483d0e[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x5a241d, _0x33dbbc, _0x2c5742.TEXRES, _0x2c5742.TEXRES);
        (_0x3ce195 || _0x57dd65) && _0x3cf2e6.restore();
        _0x462c1f && _0x3cf2e6.restore();
    }
    for (_0x4c6a45 = 0x0; _0x4c6a45 < _0x1a34b5.length; _0x4c6a45++) _0x31ae0d = _0x1a34b5[_0x4c6a45], _0x5a241d = _0x2c5742.TEXRES * _0x31ae0d.pos.x + 0.5 * _0x2c5742.TEXRES, _0x33dbbc = _0x2c5742.TEXRES * (_0x5efe28.y - _0x31ae0d.pos.y - 0x1) + 0.5 * _0x2c5742.TEXRES, _0x3cf2e6.fillStyle = _0x31ae0d.color, _0x3cf2e6.font = _0x31ae0d.size * _0x2c5742.TEXRES + "px SmbWeb", _0x3cf2e6.textAlign = "center", _0x3cf2e6.fillText(_0x31ae0d.text, _0x5a241d, _0x33dbbc);
};
_0x2c5742.prototype.drawEffect = function() {
    var _0x237ab1 = this.context,
        _0x4635f2 = this.game.getZone(),
        _0x53436c = _0x4635f2.dimensions(),
        _0x126d2a = this.resource.getTexture("map"),
        _0x29ce32 = this.resource.getTexture("obj"),
        _0x5cb570 = [];
    _0x4635f2.getEffects(_0x5cb570);
    for (_0x4635f2 = 0x0; _0x4635f2 < _0x5cb570.length; _0x4635f2++) {
        var _0x3e945c = _0x5cb570[_0x4635f2],
            _0x168b34;
        switch (_0x3e945c.tex) {
            case "map":
                _0x168b34 = _0x126d2a;
                break;
            case "obj":
                _0x168b34 = _0x29ce32;
        }
        var _0x8bc3a5 = _0x33a76c.sprite.getSprite(_0x168b34, _0x3e945c.ind);
        _0x8bc3a5[0x0] = parseInt(_0x8bc3a5[0x0] + _0x3e945c.sp.x * _0x2c5742.TEXRES);
        _0x8bc3a5[0x1] = parseInt(_0x8bc3a5[0x1] + _0x3e945c.sp.y * _0x2c5742.TEXRES);
        _0x237ab1.save();
        _0x237ab1.translate(parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.x * 0.5), parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.y * 0.5));
        _0x237ab1.translate(_0x2c5742.TEXRES * _0x3e945c.pos.x, _0x2c5742.TEXRES * (_0x53436c.y - _0x3e945c.pos.y - 0x1));
        _0x237ab1.rotate(_0x3e945c.rot);
        _0x237ab1.translate(-parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.x * 0.5), -parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.y * 0.5));
        _0x237ab1.drawImage(_0x168b34, _0x8bc3a5[0x0], _0x8bc3a5[0x1], parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.x), parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.y), 0x0, 0x0, parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.x), parseInt(_0x2c5742.TEXRES * _0x3e945c.ss.y));
        _0x237ab1.restore();
    }
};
_0x2c5742.prototype.drawUI = function() {
    var _0x427ed3 = this.context,
        _0x32b833 = this.canvas.width,
        _0x52cf2c = this.canvas.height,
        _0x4501e0 = [0xf0, 0xf1, 0xf2, 0xf1],
        _0x14ff97 = [0xfc, 0xfa],
        _0x35e95d = [0xfb, 0xf9],
        _0x4580f2 = [0xcb, 0xca],
        _0x383ae4 = _0x4501e0[parseInt(this.game.frame / 0x3) % _0x4501e0.length],
        _0x4501e0 = this.resource.getTexture("obj"),
        _0x5d8ba1 = this.game.getPlayerInfo(this.game.pid),
        _0x55dbef;
    void 0x0 !== this.game.levelWarpId ? _0x55dbef = this.game.world.getLevel(this.game.levelWarpId) : void 0x0 === this.game.startDelta && (_0x55dbef = this.game.world.getInitialLevel());
    this.game.gameOver ? (_0x427ed3.fillStyle = "black", _0x427ed3.fillRect(0x0, 0x0, _0x32b833, _0x52cf2c), _0x427ed3.fillStyle = "white", _0x427ed3.font = "32px SmbWeb", _0x427ed3.textAlign = "center", _0x427ed3.fillText("GAME OVER", 0.5 * _0x32b833, 0.5 * _0x52cf2c)) : _0x55dbef && (_0x427ed3.fillStyle = "black", _0x427ed3.fillRect(0x0, 0x0, _0x32b833, _0x52cf2c), _0x427ed3.fillStyle = "white", _0x427ed3.font = "32px SmbWeb", _0x427ed3.textAlign = "center", _0x427ed3.fillText(_0x55dbef.name, 0.5 * _0x32b833, 0.5 * _0x52cf2c), 0x0 <= this.game.startTimer && (_0x427ed3.font = "24px SmbWeb", _0x427ed3.textAlign = "center", _0x427ed3.fillText("GAME STARTS IN: " + parseInt(this.game.startTimer / 0x1e), 0.5 * _0x32b833, 0.5 * _0x52cf2c + 0x28)));
    0x0 < this.game.victory ? (_0x427ed3.fillStyle = "white", _0x427ed3.font = "32px SmbWeb", _0x427ed3.textAlign = "center", _0x427ed3.fillText((0x3 >= this.game.victory ? "VICTORY ROYALE #" : "TOO BAD #") + this.game.victory, 0.5 * _0x32b833, 0x28)) : (_0x427ed3.fillStyle = "white", _0x427ed3.font = "24px SmbWeb", _0x427ed3.textAlign = "left", _0x427ed3.fillText(_0x5d8ba1 ? _0x5d8ba1.name : "INFRINGIO", 0x8, 0x20), _0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, _0x383ae4), _0x55dbef = 'x' + (0x9 >= this.game.coins ? '0' + this.game.coins : this.game.coins), _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, 0x4, 0x28, 0x18, 0x18), _0x427ed3.fillText(_0x55dbef, 0x1e, 0x40), _0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, 0xd), _0x55dbef = _0x427ed3.measureText(_0x55dbef).width + 0x1e, _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, 0x4 + _0x55dbef + 0x10, 0x28, 0x18, 0x18), _0x427ed3.fillText('x' + (0x9 >= this.game.lives ? '0' + this.game.lives : this.game.lives), 0x4 + _0x55dbef + 0x10 + 0x1a, 0x40), this.game instanceof _0x642743 ? (_0x55dbef = this.game.remain + " PLAYERS REMAIN", _0x52cf2c = _0x427ed3.measureText(_0x55dbef).width, _0x427ed3.fillText(_0x55dbef, _0x32b833 - _0x52cf2c - 0x8, 0x20)) : this.game instanceof _0x2a0e1a && (_0x55dbef = this.game.players.length + (this.game.touchMode ? '' : " / 25 PLAYERS"), _0x52cf2c = _0x427ed3.measureText(_0x55dbef).width, _0x427ed3.fillText(_0x55dbef, _0x32b833 - _0x52cf2c - 0x8, 0x20)), _0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, _0x35e95d[this.game.audio.muteMusic ? 0x1 : 0x0]), _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x32b833 - 0x18 - 0x8, 0x28, 0x18, 0x18), _0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, _0x14ff97[this.game.audio.muteSound ? 0x1 : 0x0]), _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x32b833 - 0x18 - 0x8 - 0x18 - 0x8, 0x28, 0x18, 0x18), _0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, _0x4580f2[this.game.disableText ? 0x1 : 0x0]), _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x32b833 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28, 0x18, 0x18), this.game.input.pad.connected() && (_0x52cf2c = _0x33a76c.sprite.getSprite(_0x4501e0, 0xf8), _0x427ed3.drawImage(_0x4501e0, _0x52cf2c[0x0], _0x52cf2c[0x1], _0x2c5742.TEXRES, _0x2c5742.TEXRES, _0x32b833 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28, 0x18, 0x18)));
};
_0x2c5742.prototype.drawTouch = function() {
    if (this.game.touchMode) {
        var _0x5a1070 = this.context,
            _0x15192f = this.canvas.width,
            _0x957a9e = this.canvas.height;
        this.game.thumbOrigin && (_0x5a1070.fillStyle = "rgba(0,0,0,0.5)", _0x5a1070.fillRect(this.game.thumbOrigin.x - 42.5, this.game.thumbOrigin.y - 42.5, 0x55, 0x55), _0x5a1070.fillStyle = "rgba(255,255,255,1.0)", _0x5a1070.fillRect(this.game.thumbPos.x - 32.5, this.game.thumbPos.y - 32.5, 0x41, 0x41));
        _0x5a1070.fillStyle = "rgba(0,0,0,0.5)";
        _0x5a1070.fillRect(_0x15192f - 0x55, _0x957a9e - 0x55, 0x55, 0x55);
        _0x5a1070.fillRect(_0x15192f - 0x55, _0x957a9e - 0xaa, 0x55, 0x55);
        _0x5a1070.fillStyle = this.game.touchRun ? "rgba(255,255,255,0.75)" : "rgba(0,0,0,0.5)";
        _0x5a1070.fillRect(_0x15192f - 0x55, _0x957a9e - 0xff, 0x55, 0x55);
        _0x5a1070.fillStyle = "white";
        _0x5a1070.font = "65px SmbWeb";
        _0x5a1070.textAlign = "left";
        var _0x8a9ba4 = 'A',
            _0x8278d8 = _0x5a1070.measureText(_0x8a9ba4).width;
        _0x5a1070.fillText(_0x8a9ba4, _0x15192f - _0x8278d8 - 0xa, _0x957a9e - 0xa);
        _0x8a9ba4 = 'B';
        _0x8278d8 = _0x5a1070.measureText(_0x8a9ba4).width;
        _0x5a1070.fillText(_0x8a9ba4, _0x15192f - _0x8278d8 - 7.5, _0x957a9e - 0x55 - 0xa);
        _0x5a1070.fillStyle = this.game.touchRun ? "black" : "white";
        _0x8a9ba4 = 'R';
        _0x8278d8 = _0x5a1070.measureText(_0x8a9ba4).width;
        _0x5a1070.fillText(_0x8a9ba4, _0x15192f - _0x8278d8 - 7.5, _0x957a9e - 0xaa - 0xa);
    }
};
_0x2c5742.prototype.drawLoad = function() {
    var _0x37f267 = this.context,
        _0x8de60e = this.canvas.width,
        _0x131b2f = this.canvas.height;
    _0x37f267.fillStyle = "black";
    _0x37f267.fillRect(0x0, 0x0, _0x8de60e, _0x131b2f);
    _0x37f267.font = "32px SmbWeb";
    _0x37f267.fillStyle = "white";
    _0x37f267.textAlign = "center";
    _0x37f267.fillText("Loading Resources...", 0.5 * _0x8de60e, 0.5 * _0x131b2f);
};
_0x2c5742.prototype.destroy = function() {};
"use strict";

function _0x4ef14c(_0x4cda29, _0x46f74e) {
    this.game = _0x4cda29;
    this.initial = _0x46f74e.initial;
    this.levels = [];
    for (var _0x5678fd = 0x0; _0x5678fd < _0x46f74e.world.length; _0x5678fd++) this.levels.push(new _0x1433a4(_0x4cda29, _0x46f74e.world[_0x5678fd]));
}
_0x4ef14c.prototype.step = function() {
    for (var _0x1351b3 = 0x0; _0x1351b3 < this.levels.length; _0x1351b3++) this.levels[_0x1351b3].step();
};
_0x4ef14c.prototype.getInitialLevel = function() {
    return this.getLevel(this.initial);
};
_0x4ef14c.prototype.getInitialZone = function() {
    var _0x2b561d = this.getLevel(this.initial);
    return this.getZone(_0x2b561d.id, _0x2b561d.initial);
};
_0x4ef14c.prototype.getLevel = function(_0x444ae4) {
    for (var _0x46de22 = 0x0; _0x46de22 < this.levels.length; _0x46de22++) {
        var _0x8a2d62 = this.levels[_0x46de22];
        if (_0x8a2d62.id === _0x444ae4) return _0x8a2d62;
    }
};
_0x4ef14c.prototype.getZone = function(_0x525a15, _0x36f94d) {
    for (var _0x4ae1ed = 0x0; _0x4ae1ed < this.levels.length; _0x4ae1ed++) {
        var _0x5282f6 = this.levels[_0x4ae1ed];
        if (_0x5282f6.id === _0x525a15)
            for (var _0x5102b4 = 0x0; _0x5102b4 < _0x5282f6.zones.length; _0x5102b4++) {
                var _0x1308b7 = _0x5282f6.zones[_0x5102b4];
                if (_0x1308b7.id === _0x36f94d) return _0x1308b7;
            }
    }
};

function _0x1433a4(_0xc37451, _0xf21ec7) {
    this.game = _0xc37451;
    this.id = _0xf21ec7.id;
    this.name = _0xf21ec7.name;
    this.initial = _0xf21ec7.initial;
    this.zones = [];
    for (var _0x344d78 = 0x0; _0x344d78 < _0xf21ec7.zone.length; _0x344d78++) this.zones.push(new _0x5e1ced(_0xc37451, this.id, _0xf21ec7.zone[_0x344d78]));
}
_0x1433a4.prototype.step = function() {
    for (var _0x5d732a = 0x0; _0x5d732a < this.zones.length; _0x5d732a++) this.zones[_0x5d732a].step();
};
_0x1433a4.prototype.getInitial = function() {
    for (var _0x42edaf = 0x0; _0x42edaf < this.zones.length; _0x42edaf++) {
        var _0x2a836d = this.zones[_0x42edaf];
        if (_0x2a836d.id === this.initial) return _0x2a836d;
    }
};
_0x1433a4.prototype.getWarp = function(_0x35fc72) {
    for (var _0x4295f4 = 0x0; _0x4295f4 < this.zones.length; _0x4295f4++)
        for (var _0x1ed606 = this.zones[_0x4295f4], _0x891844 = 0x0; _0x891844 < _0x1ed606.warp.length; _0x891844++) {
            var _0x5c0899 = _0x1ed606.warp[_0x891844];
            if (_0x5c0899.id === _0x35fc72) return {
                'level': this.id,
                'zone': _0x1ed606.id,
                'pos': _0xdd5628.decode(_0x5c0899.pos),
                'data': _0x5c0899.data
            };
        }
};

function _0x5e1ced(_0x4ec59c, _0x22aa6b, _0x42b6c1) {
    this.game = _0x4ec59c;
    this.id = _0x42b6c1.id;
    this.level = _0x22aa6b;
    this.initial = _0x42b6c1.initial;
    this.color = _0x42b6c1.color;
    this.music = _0x42b6c1.music ? _0x42b6c1.music : '';
    this.data = _0x42b6c1.data;
    this.obj = _0x42b6c1.obj;
    this.warp = _0x42b6c1.warp;
    this.bumped = [];
    this.effects = [];
    this.vines = [];
    this.sounds = [];
}
_0x5e1ced.prototype.update = function(_0x56c974, _0x203ebe, _0x453702, _0x9efab7, _0x1f768e, _0x1478c6, _0x16a842) {
    var _0x14b697 = this.dimensions().y - 0x1 - _0x1478c6,
        _0x14b697 = _0x41f345.decode(this.data[_0x14b697][_0x1f768e]);
    _0x14b697.definition.TRIGGER(_0x56c974, _0x203ebe, _0x14b697, _0x453702, _0x9efab7, _0x1f768e, _0x1478c6, _0x16a842);
};
_0x5e1ced.prototype.step = function() {
    for (var _0x4a391d = 0x0; _0x4a391d < this.bumped.length; _0x4a391d++) {
        var _0x4b09c3 = this.bumped[_0x4a391d],
            _0x2c42b4 = _0x41f345.decode(this.data[_0x4b09c3.y][_0x4b09c3.x]);
        0x0 < _0x2c42b4.bump ? this.data[_0x4b09c3.y][_0x4b09c3.x] = _0x41f345.bump(this.data[_0x4b09c3.y][_0x4b09c3.x], _0x2c42b4.bump - 0x1) : this.bumped.splice(_0x4a391d--, 0x1);
    }
    for (_0x4a391d = 0x0; _0x4a391d < this.effects.length; _0x4a391d++) _0x4b09c3 = this.effects[_0x4a391d], _0x4b09c3.garbage ? this.effects.splice(_0x4a391d--, 0x1) : _0x4b09c3.step();
    for (_0x4a391d = 0x0; _0x4a391d < this.vines.length; _0x4a391d++) _0x4b09c3 = this.vines[_0x4a391d], 0x0 > _0x4b09c3.y ? this.vines.splice(_0x4a391d--, 0x1) : this.data[_0x4b09c3.y--][_0x4b09c3.x] = _0x4b09c3.td;
    for (_0x4a391d = 0x0; _0x4a391d < this.sounds.length; _0x4a391d++) this.sounds[_0x4a391d].done() && this.sounds.splice(_0x4a391d--, 0x1);
    _0x41f345.update(this.game);
};
_0x5e1ced.prototype.tile = function(_0x3d68a7, _0x43d1f3) {
    _0x43d1f3 = this.dimensions().y - 0x1 - _0x43d1f3;
    return this.data[_0x43d1f3][_0x3d68a7];
};
_0x5e1ced.prototype.bump = function(_0x711a6b, _0x38eb82) {
    var _0x9935da = this.dimensions().y - 0x1 - _0x38eb82;
    this.data[_0x9935da][_0x711a6b] = _0x41f345.bump(this.data[_0x9935da][_0x711a6b], 0xf);
    this.bumped.push({
        'x': _0x711a6b,
        'y': _0x9935da
    });
    this.play(_0x711a6b, _0x38eb82, "sfx/bump.wav", 0.5, 0.04);
};
_0x5e1ced.prototype.replace = function(_0x139748, _0x19c939, _0x2533dc) {
    _0x19c939 = this.dimensions().y - 0x1 - _0x19c939;
    this.data[_0x19c939][_0x139748] = _0x2533dc;
};
_0x5e1ced.prototype.grow = function(_0x34397d, _0x27a117, _0x5e09da) {
    _0x27a117 = this.dimensions().y - 0x1 - _0x27a117;
    this.vines.push({
        'x': _0x34397d,
        'y': _0x27a117,
        'td': _0x5e09da
    });
};
_0x5e1ced.prototype.break = function(_0x4aded4, _0x3d82ec, _0x544718) {
    var _0x415636 = this.dimensions().y - 0x1 - _0x3d82ec,
        _0x1aa33b = _0x41f345.decode16(this.data[_0x415636][_0x4aded4]);
    this.data[_0x415636][_0x4aded4] = _0x544718;
    this.effects.push(new _0x5296e0(_0x26de58.make(_0x4aded4, _0x3d82ec), _0x1aa33b.index));
    this.play(_0x4aded4, _0x3d82ec, "sfx/break.wav", 1.5, 0.04);
};
_0x5e1ced.prototype.coin = function(_0x18c8cf, _0x32068f) {
    this.dimensions();
    this.effects.push(new _0x108200(_0x26de58.make(_0x18c8cf, _0x32068f)));
};
_0x5e1ced.prototype.play = function(_0x2b2620, _0xc0aea9, _0x4929f8, _0x50094d, _0x1de44d) {
    this.game.getZone() === this && (_0x4929f8 = this.game.audio.getSpatialAudio(_0x4929f8, _0x50094d, _0x1de44d, "effect"), _0x4929f8.play(_0x26de58.make(_0x2b2620, _0xc0aea9)), this.sounds.push(_0x4929f8));
};
_0x5e1ced.prototype.dimensions = function() {
    return _0x26de58.make(this.data[0x0].length, this.data.length);
};
_0x5e1ced.prototype.getTile = function(_0x5712b7) {
    var _0x5eee6f = this.dimensions();
    _0x5712b7 = _0x26de58.copy(_0x5712b7);
    _0x5712b7.y = _0x5eee6f.y - _0x5712b7.y - 0x1;
    return _0x41f345.decode(this.data[Math.max(0x0, Math.min(_0x5eee6f.y, Math.floor(_0x5712b7.y)))][Math.max(0x0, Math.min(_0x5eee6f.x, Math.floor(_0x5712b7.x)))]);
};
_0x5e1ced.prototype.getTiles = function(_0x3ce841, _0x4afc27) {
    var _0x525d97 = this.dimensions(),
        _0x51d112 = _0x26de58.copy(_0x3ce841);
    _0x51d112.y = _0x525d97.y - _0x51d112.y;
    _0x3ce841 = parseInt(Math.max(Math.min(Math.floor(_0x51d112.x) - 0x1, _0x525d97.x), 0x0));
    var _0x5daf64 = parseInt(Math.max(Math.min(Math.ceil(_0x51d112.x + _0x4afc27.x) + 0x1, _0x525d97.x), 0x0)),
        _0x5f4edb = parseInt(Math.max(Math.min(Math.floor(_0x51d112.y - _0x4afc27.y) - 0x1, _0x525d97.y), 0x0));
    _0x4afc27 = parseInt(Math.max(Math.min(Math.ceil(_0x51d112.y) + 0x1, _0x525d97.y), 0x0));
    for (_0x51d112 = []; _0x5f4edb < _0x4afc27; _0x5f4edb++)
        for (var _0x5e6b1b = _0x3ce841; _0x5e6b1b < _0x5daf64; _0x5e6b1b++) {
            var _0x556c14 = _0x41f345.decode(this.data[_0x5f4edb][_0x5e6b1b]);
            _0x556c14.pos = _0x26de58.make(_0x5e6b1b, _0x525d97.y - 0x1 - _0x5f4edb);
            _0x556c14.ind = [_0x5f4edb, _0x5e6b1b];
            _0x51d112.push(_0x556c14);
        }
    return _0x51d112;
};
_0x5e1ced.prototype.getEffects = function(_0x28bee8) {
    for (var _0x559764 = 0x0; _0x559764 < this.effects.length; _0x559764++) this.effects[_0x559764].draw(_0x28bee8);
};
"use strict";

function _0x642743(_0x1d9201) {
    this.container = document.getElementById("game");
    this.canvas = document.getElementById("game-canvas");
    this.input = new _0x2406bb(this, this.canvas);
    this.display = new _0x2c5742(this, this.container, this.canvas, _0x1d9201.resource);
    this.audio = new Audio(this);
    this.objects = [];
    this.team = this.pid = void 0x0;
    this.players = [];
    this.sounds = [];
    this.load(_0x1d9201);
    this.lastDraw = this.frame = 0x0;
    this.delta = _0x33a76c.time.now();
    this.buffer = [
        [],
        []
    ];
    this.out = [];
    this.ready = !0x1;
    this.startTimer = -0x1;
    this.touchFull = this.touchMode = !0x1;
    this.thumbPos = this.thumbOrigin = this.thumbId = void 0x0;
    this.touchRun = !0x1;
    this.fillSS = this.cullSS = void 0x0;
    this.disableText = 0x1 === parseInt(Cookies.get("text"));
    this.victory = this.coins = this.lives = this.remain = 0x0;
    this.victoryMusic = !0x1;
    this.gameOverTimer = this.rate = 0x0;
    this.gameOver = !0x1;
    _0x1d9201 = this.getZone().dimensions();
    this.display.camera.position(_0x26de58.scale(_0x1d9201, 0.5));
    this.levelWarpTimer = 0x0;
    this.levelWarpId = void 0x0;
    var _0x5962c4 = this;
    this.frameReq = _0x5a9d86.call(window, function() {
        _0x5962c4.draw();
    });
    this.loopReq = setTimeout(function() {
        _0x5962c4.loop();
    }, 0x2);
}
_0x642743.TICK_RATE = 0x21;
_0x642743.FDLC_TARGET = 0x3;
_0x642743.FDLC_MAX = _0x642743.FDLC_TARGET + 0x2;
_0x642743.LEVEL_WARP_TIME = 0x64;
_0x642743.GAME_OVER_TIME = 0xc8;
_0x642743.COINS_TO_LIFE = 0x1e;
_0x642743.prototype.load = function(_0x4c8127) {
    gameClient.menu.load.show();
    this.world = new _0x4ef14c(this, _0x4c8127);
    for (_0x4c8127 = 0x0; _0x4c8127 < this.world.levels.length; _0x4c8127++)
        for (var _0x28220e = this.world.levels[_0x4c8127], _0x5e8cfc = 0x0; _0x5e8cfc < _0x28220e.zones.length; _0x5e8cfc++)
            for (var _0x465811 = _0x28220e.zones[_0x5e8cfc], _0x48681b = 0x0; _0x48681b < _0x465811.obj.length; _0x48681b++) {
                for (var _0x33c03b = _0x465811.obj[_0x48681b], _0x161759 = [_0x33c03b.pos], _0x233fee = 0x0; _0x233fee < _0x33c03b.param.length; _0x233fee++) _0x161759.push(_0x33c03b.param[_0x233fee]);
                this.createObject(_0x33c03b.type, _0x28220e.id, _0x465811.id, _0xdd5628.decode(_0x33c03b.pos), _0x161759);
            }
};
_0x642743.prototype.send = function(_0xeccb43) {
    gameClient.net.send(_0xeccb43);
};
_0x642743.prototype.handlePacket = function(_0x1adc15) {
    switch (_0x1adc15.type) {
        case "g12":
            return this.updatePlayerList(_0x1adc15), !0x0;
        case "g13":
            return this.gameStartTimer(_0x1adc15), !0x0;
        default:
            return !0x1;
    }
};
_0x642743.prototype.updatePlayerList = function(_0x407394) {
    this.players = _0x407394.players;
    void 0x0 !== this.pid && this.updateTeam();
};
_0x642743.prototype.gameStartTimer = function(_0x1effd6) {
    0x0 > this.startTimer && this.play("sfx/alert.wav", 0x1, 0x0);
    0x0 < _0x1effd6.time ? (this.startTimer = _0x1effd6.time, this.remain = this.players.length) : this.doStart();
};
_0x642743.prototype.updateTeam = function() {
    var playerInfo = this.getPlayerInfo(this.pid);
    if (playerInfo === undefined) return;
    if (this.team = playerInfo.team)
        for (var _0x1f801c = 0x0; _0x1f801c < this.players.length; _0x1f801c++) {
            var _0x1d518b = this.players[_0x1f801c];
            if (_0x1d518b.id !== this.pid && _0x1d518b.team === this.team) {
                var _0x249619 = this.getGhost(_0x1d518b.id);
                _0x249619 && (_0x249619.name = _0x1d518b.name);
            }
        }
};
_0x642743.prototype.handleBinary = function(_0x189360) {
    _0x189360 = _0x2204de.decode(_0x189360);
    this.ready ? this.updatePacket(_0x189360) : this.doUpdate(_0x189360);
};
_0x642743.prototype.updatePacket = function(_0x3ed2d2) {
    for (this.buffer.push(_0x3ed2d2); this.buffer.length > _0x642743.FDLC_MAX;) _0x3ed2d2 = this.buffer.shift(), this.doUpdate(_0x3ed2d2);
};
_0x642743.prototype.doUpdate = function(_0x277b92) {
    for (var _0x47b82c = 0x0; _0x47b82c < _0x277b92.length; _0x47b82c++) {
        var _0x59a4c2 = _0x277b92[_0x47b82c];
        switch (_0x59a4c2.designation) {
            case 0x2:
                this.doNET001(_0x59a4c2);
                break;
            case 0x10:
                this.doNET010(_0x59a4c2);
                break;
            case 0x11:
                this.doNET011(_0x59a4c2);
                break;
            case 0x12:
                this.doNET012(_0x59a4c2);
                break;
            case 0x13:
                this.doNET013(_0x59a4c2);
                break;
            case 0x17:
                this.doNET017(_0x59a4c2);
                break;
            case 0x18:
                this.doNET018(_0x59a4c2);
                break;
            case 0x20:
                this.doNET020(_0x59a4c2);
                break;
            case 0x30:
                this.doNET030(_0x59a4c2);
        }
    }
};
_0x642743.prototype.doNET001 = function(_0xf7e5ad) {
    this.pid = _0xf7e5ad.pid;
    this.ready = !0x0;
    gameClient.menu.game.show();
};
_0x642743.prototype.doNET010 = function(_0x48cbe4) {
    if (_0x48cbe4.pid !== this.pid) {
        var _0x5c28cd = this.createObject(PlayerObject.ID, _0x48cbe4.level, _0x48cbe4.zone, _0xdd5628.decode(_0x48cbe4.pos), [_0x48cbe4.pid]);
        _0x5c28cd.setState(PlayerObject.SNAME.GHOST);
        this.team && (_0x48cbe4 = this.getPlayerInfo(_0x48cbe4.pid)) && _0x48cbe4.id !== this.pid && _0x48cbe4.team === this.team && (_0x5c28cd = this.getGhost(_0x48cbe4.id)) && (_0x5c28cd.name = _0x48cbe4.name);
    }
};
_0x642743.prototype.doNET011 = function(_0x331ef5) {
    _0x331ef5.pid !== this.pid && ((_0x331ef5 = this.getGhost(_0x331ef5.pid)) && _0x331ef5.kill(), this.remain = this.getRemain());
};
_0x642743.prototype.doNET012 = function(_0x4eb1fd) {
    if (_0x4eb1fd.pid !== this.pid) {
        var _0x498b38 = this.getGhost(_0x4eb1fd.pid);
        _0x498b38 && _0x498b38.update(_0x4eb1fd);
    }
};
_0x642743.prototype.doNET013 = function(_0x3c0ee3) {
    _0x3c0ee3.pid !== this.pid && this.getGhost(_0x3c0ee3.pid).trigger(_0x3c0ee3.type);
};
_0x642743.prototype.doNET017 = function(_0x17186e) {
    _0x17186e = Cookies.get("heated_gamer_moments");
    !gameClient.net.isPrivate && Cookies.set("heated_gamer_moments", _0x17186e ? parseInt(_0x17186e) + 0x1 : 0x1, {
        'expires': 0x16d
    });
};
_0x642743.prototype.doNET018 = function(_0xb678cc) {
    if (!(0x0 >= _0xb678cc.result)) {
        _0xb678cc.pid === this.pid ? this.rate = _0xb678cc.extra : 0x0 !== this.rate && _0xb678cc.result++;
        var _0x11f856 = this.getGhost(_0xb678cc.pid);
        if (_0x11f856 && (_0x11f856 = this.getText(_0x11f856.level, _0x11f856.zone, _0xb678cc.result.toString()))) {
            var _0x36fadc = this.getPlayerInfo(_0xb678cc.pid).name;
            this.createObject(_0x3db18a.ID, _0x11f856.level, _0x11f856.zone, _0x26de58.add(_0x11f856.pos, _0x26de58.make(0x0, -0x3)), [void 0x0, -0.1, 0.25, "#FFFFFF", _0x36fadc]);
        }
        _0xb678cc.pid === this.pid && ((_0x11f856 = this.getPlayer()) && _0x11f856.axe(_0xb678cc.result), this.victory = _0xb678cc.result, 0x1 === _0xb678cc.result && (_0xb678cc = Cookies.get("epic_gamer_moments"), !gameClient.net.isPrivate && Cookies.set("epic_gamer_moments", _0xb678cc ? parseInt(_0xb678cc) + 0x1 : 0x1, {
            'expires': 0x16d
        })));
        document.getElementById('return').style.display = "block";
    }
};
_0x642743.prototype.doNET020 = function(_0x279410) {
    if (!(_0x279410.pid === this.pid && 0xa0 > _0x279410.type)) {
        var _0x3f57fe = this.getObject(_0x279410.level, _0x279410.zone, _0x279410.oid);
        _0x3f57fe && _0x3f57fe.update(_0x279410.type);
    }
};
_0x642743.prototype.doNET030 = function(_0x31e1c0) {
    _0x31e1c0.pid !== this.pid && this.world.getZone(_0x31e1c0.level, _0x31e1c0.zone).update(this, _0x31e1c0.pid, _0x31e1c0.level, _0x31e1c0.zone, _0x31e1c0.pos.x, _0x31e1c0.pos.y, _0x31e1c0.type);
};
_0x642743.prototype.doStart = function() {
    this.startTimer = -0x1;
    this.startDelta = _0x33a76c.time.now();
    this.doSpawn();
};
_0x642743.prototype.doDetermine = function() {
    var _0xfab5c9 = this.input.pop();
    0x0 < _0xfab5c9.touch.length ? this.touchMode = !0x0 : 0x0 < _0xfab5c9.keyboard.length && (this.touchMode = !0x1);
    this.touchMode ? this.doTouch(_0xfab5c9) : this.doInput(_0xfab5c9);
};
_0x642743.prototype.doTouch = function(_0x52fc25) {
    var _0x258db7 = this.input,
        _0x330893 = this.getPlayer();
    this.display.camera.scale = 0x2;
    if (!this.touchFull) {
        var _0x597311 = document.documentElement;
        _0x597311.requestFullscreen ? this.container.requestFullscreen() : _0x597311.mozRequestFullScreen ? _0x597311.mozRequestFullScreen() : _0x597311.webkitRequestFullscreen ? _0x597311.webkitRequestFullscreen() : _0x597311.msRequestFullscreen && _0x597311.msRequestFullscreen();
        this.touchFull = !0x0;
    }
    for (var _0x1429a6 = this, _0x597311 = this.display.canvas.width, _0x174be8 = this.display.canvas.height, _0x1e64f1 = !0x1, _0x34471a = !0x1, _0x597311 = [{
            'pos': _0x26de58.make(_0x597311 - 0x55, _0x174be8 - 0x55),
            'dim': _0x26de58.make(0x55, 0x55),
            'press': function() {
                _0x1e64f1 = !0x0;
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x55, _0x174be8 - 0xaa),
            'dim': _0x26de58.make(0x55, 0x55),
            'press': function() {
                _0x34471a = !0x0;
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x55, _0x174be8 - 0xff),
            'dim': _0x26de58.make(0x55, 0x55),
            'click': function() {
                _0x1429a6.touchRun = !_0x1429a6.touchRun;
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x18 - 0x8, 0x28),
            'dim': _0x26de58.make(0x18, 0x18),
            'click': function() {
                _0x1429a6.audio.muteMusic = !_0x1429a6.audio.muteMusic;
                if (gameClient.audioElement !== undefined)
                    if (_0x1429a6.audio.muteMusic)
                        gameClient.audioElement.pause();
                    else
                        gameClient.audioElement.play();
                _0x1429a6.audio.saveSettings();
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
            'dim': _0x26de58.make(0x18, 0x18),
            'click': function() {
                _0x1429a6.audio.muteSound = !_0x1429a6.audio.muteSound;
                _0x1429a6.audio.saveSettings();
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
            'dim': _0x26de58.make(0x18, 0x18),
            'click': function() {
                this.disableText = !this.disableText;
                Cookies.set("text", _0x1429a6.disableText ? 0x1 : 0x0, {
                    'expires': 0x1e
                });
            }
        }, {
            'pos': _0x26de58.make(_0x597311 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
            'dim': _0x26de58.make(0x18, 0x18),
            'click': function() {
                gameClient.net.send({
                    'code': (location.search.split('mcode=')[1] || '').split('&')[0],
                    'type': "g51"
                });
            }
        }], _0x3308c9, _0x174be8 = 0x0; _0x174be8 < _0x258db7.touch.pos.length; _0x174be8++) {
        var _0x182f56 = _0x258db7.touch.pos[_0x174be8];
        if (this.thumbId === _0x182f56.id) _0x3308c9 = _0x182f56, this.thumbId = _0x182f56.id, this.thumbPos = _0x182f56;
        else
            for (_0x174be8 = 0x0; _0x174be8 < _0x597311.length; _0x174be8++) {
                var _0x287903 = _0x597311[_0x174be8];
                _0x1badb6.inside(_0x182f56, _0x287903.pos, _0x287903.dim) && _0x287903.press && _0x287903.press();
            }
    }
    for (_0x174be8 = 0x0; _0x174be8 < _0x52fc25.touch.length; _0x174be8++) {
        _0x182f56 = _0x52fc25.touch[_0x174be8];
        _0x258db7 = !0x1;
        for (_0x174be8 = 0x0; _0x174be8 < _0x597311.length; _0x174be8++)
            if (_0x287903 = _0x597311[_0x174be8], _0x1badb6.inside(_0x182f56, _0x287903.pos, _0x287903.dim)) {
                _0x258db7 = !0x0;
                _0x287903.click && _0x287903.click();
                break;
            } _0x3308c9 || _0x258db7 || (_0x3308c9 = _0x182f56, this.thumbId = _0x182f56.id, this.thumbPos = this.thumbOrigin = _0x182f56);
    }
    var _0x36041a;
    if (_0x3308c9) {
        _0x52fc25 = Math.min(0x40, _0x26de58.distance(this.thumbPos, this.thumbOrigin));
        var _0x3d0185 = _0x26de58.normalize(_0x26de58.subtract(this.thumbPos, this.thumbOrigin));
        _0x36041a = _0x26de58.scale(_0x3d0185, _0x52fc25 / 0x40);
        this.thumbPos = _0x26de58.add(this.thumbOrigin, _0x26de58.scale(_0x3d0185, _0x52fc25));
    } else this.thumbPos = this.thumbOrigin = this.thumbId = void 0x0;
    _0x330893 && _0x3d0185 ? (_0x3d0185 = [0x0, 0x0], 0.33 < _0x36041a.x && _0x3d0185[0x0]++, -0.33 > _0x36041a.x && _0x3d0185[0x0]--, 0.33 < _0x36041a.y && _0x3d0185[0x1]--, -0.33 > _0x36041a.y && _0x3d0185[0x1]++, _0x330893.input(_0x3d0185, _0x1e64f1, this.touchRun ? !_0x34471a : _0x34471a)) : _0x330893 && _0x330893.input([0x0, 0x0], _0x1e64f1, this.touchRun ? !_0x34471a : _0x34471a);
};
_0x642743.prototype.doInput = function(_0x585e08) {
    this.input.pad.update();
    var _0xa25dbe = this.input,
        _0x42b147 = this.input.mouse,
        _0x136d36 = this.input.keyboard.keys,
        _0x2ffe7f = this.input.pad;
    this.inx27 = _0x136d36[0x1b];
    var _0x5b7c6b = this.getPlayer();
    if (_0x5b7c6b) {
        var _0x133972 = [0x0, 0x0];
        (_0x136d36[_0xa25dbe.assignK.up] || _0x2ffe7f.button(_0xa25dbe.assignG.up) || -0.1 > _0x2ffe7f.ax.y) && _0x133972[0x1]++;
        (_0x136d36[_0xa25dbe.assignK.down] || _0x2ffe7f.button(_0xa25dbe.assignG.down) || 0.1 < _0x2ffe7f.ax.y) && _0x133972[0x1]--;
        (_0x136d36[_0xa25dbe.assignK.left] || _0x2ffe7f.button(_0xa25dbe.assignG.left) || -0.1 > _0x2ffe7f.ax.x) && _0x133972[0x0]--;
        (_0x136d36[_0xa25dbe.assignK.right] || _0x2ffe7f.button(_0xa25dbe.assignG.right) || 0.1 < _0x2ffe7f.ax.x) && _0x133972[0x0]++;
        var _0x306656 = _0x136d36[_0xa25dbe.assignK.a] || _0x2ffe7f.button(_0xa25dbe.assignG.a),
            _0xa25dbe = _0x136d36[_0xa25dbe.assignK.b] || _0x2ffe7f.button(_0xa25dbe.assignG.b);
        _0x42b147.spin && this.display.camera.zoom(_0x42b147.spin);
        _0x5b7c6b.input(_0x133972, _0x306656, _0xa25dbe);
        for (var _0x533a33 = this, _0xa25dbe = this.display.canvas.width, _0x42b147 = [{
                'pos': _0x26de58.make(_0xa25dbe - 0x18 - 0x8, 0x28),
                'dim': _0x26de58.make(0x18, 0x18),
                'click': function() {
                    _0x533a33.audio.muteMusic = !_0x533a33.audio.muteMusic;
                    if (gameClient.audioElement !== undefined)
                        if (_0x533a33.audio.muteMusic)
                            gameClient.audioElement.pause();
                        else
                            gameClient.audioElement.play();
                    _0x533a33.audio.saveSettings();
                }
            }, {
                'pos': _0x26de58.make(_0xa25dbe - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
                'dim': _0x26de58.make(0x18, 0x18),
                'click': function() {
                    _0x533a33.audio.muteSound = !_0x533a33.audio.muteSound;
                    _0x533a33.audio.saveSettings();
                }
            }, {
                'pos': _0x26de58.make(_0xa25dbe - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
                'dim': _0x26de58.make(0x18, 0x18),
                'click': function() {
                    _0x533a33.disableText = !_0x533a33.disableText;
                    Cookies.set("text", _0x533a33.disableText ? 0x1 : 0x0, {
                        'expires': 0x1e
                    });
                }
            }, {
                'pos': _0x26de58.make(_0xa25dbe - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
                'dim': _0x26de58.make(0x18, 0x18),
                'click': function() {
                    gameClient.net.send({
                        'code': (location.search.split('mcode=')[1] || '').split('&')[0],
                        'type': "g51"
                    });
                }
            }], _0x5b7c6b = 0x0; _0x5b7c6b < _0x585e08.mouse.length; _0x5b7c6b++)
            for (_0x133972 = _0x585e08.mouse[_0x5b7c6b], _0x306656 = 0x0; _0x306656 < _0x42b147.length; _0x306656++) _0xa25dbe = _0x42b147[_0x306656], 0x0 === _0x133972.btn && _0x1badb6.inside(_0x133972.pos, _0xa25dbe.pos, _0xa25dbe.dim) && _0xa25dbe.click();
    }
};
_0x642743.prototype.doStep = function() {
    var _0x504fb1 = this.getPlayer();
    if (_0x504fb1 && void 0x0 !== this.levelWarpId && 0x0 < this.levelWarpTimer && 0x1 > --this.levelWarpTimer) {
        var _0x427bdb = this.world.getLevel(this.levelWarpId).getInitial();
        _0x504fb1.level = _0x427bdb.level;
        _0x504fb1.zone = _0x427bdb.id;
        _0x504fb1.pos = _0xdd5628.decode(_0x427bdb.initial);
        _0x504fb1.autoTarget = void 0x0;
        _0x504fb1.grounded = !0x1;
        _0x504fb1.show();
        _0x504fb1.invuln();
        this.levelWarpId = void 0x0;
    }
    _0x504fb1 && this.cullSS && !_0x26de58.equals(_0x504fb1.pos, this.cullSS) && this.out.push(_0x4152f4.encode());
    _0x504fb1 && this.fillSS && this.fillSS !== _0x504fb1.fallSpeed && this.out.push(_0x4152f4.encode());
    for (_0x427bdb = 0x0; _0x427bdb < this.objects.length; _0x427bdb++) {
        var _0x617df4 = this.objects[_0x427bdb];
        _0x617df4.step();
        _0x617df4.garbage && this.objects.splice(_0x427bdb--, 0x1);
    }
    this.cullSS = _0x504fb1 ? _0x26de58.copy(_0x504fb1.pos) : void 0x0;
    this.fillSS = _0x504fb1 ? _0x504fb1.fallSpeed : void 0x0;
    _0x427bdb = this.getZone();
    _0x504fb1 && !_0x504fb1.dead && this.display.camera.position(_0x26de58.make(_0x504fb1.pos.x, 0.5 * _0x427bdb.dimensions().y));
    this.world.step();
    for (_0x427bdb = 0x0; _0x427bdb < this.sounds.length; _0x427bdb++) this.sounds[_0x427bdb].done() && this.sounds.splice(_0x427bdb--, 0x1);
    this.doMusic();
    this.audio.update();
    void 0x0 === this.startDelta || this.gameOver || _0x504fb1 ? this.gameOver ? /*++this.gameOverTimer > _0x642743.GAME_OVER_TIME && gameClient.close()*/(document.getElementById('return').style.display = "block") : this.gameOverTimer = 0x0 : 0x0 < this.lives && 0x0 >= this.victory ? (_0x504fb1 = this.getZone().level, this.doSpawn(), this.levelWarp(_0x504fb1), this.lives--) : 0x2d < ++this.gameOverTimer && (this.gameOver = !0x0, this.gameOverTimer = 0x0);
    this.lastDraw = this.frame;
    this.frame++;
};
_0x642743.prototype.doSpawn = function() {
    if (!this.getPlayer()) {
        var _0x305400 = this.getZone(),
            _0xfcde23 = _0x305400.initial;
        this.createObject(PlayerObject.ID, _0x305400.level, _0x305400.id, _0xdd5628.decode(_0xfcde23), [this.pid]);
        this.out.push(_0x591d63.encode(_0x305400.level, _0x305400, _0xfcde23));
    }
    this.updateTeam();
};
_0x642743.prototype.doMusic = function() {
    var _0x1844d9 = this.getPlayer(),
        _0x180f62 = this.getZone();
    this.gameOver ? this.audio.setMusic("music/gameover.mp3", !0x1) : _0x1844d9 && _0x1844d9.dead ? this.audio.setMusic("music/dead.mp3", !0x1) : _0x1844d9 && _0x1844d9.autoTarget && 0x0 >= this.victory ? this.audio.setMusic("music/level.mp3", !0x1) : 0x0 < this.victory && !this.victoryMusic ? (this.audio.setMusic("music/castle.mp3", !0x1), this.victoryMusic = !0x0) : 0x0 < this.victory && 0x4 > this.victory && this.victoryMusic && !this.audio.music.playing ? this.audio.setMusic("music/victory.mp3", !0x1) : _0x1844d9 && 0x0 >= this.levelWarpTimer && void 0x0 !== this.startDelta && !this.victoryMusic && ('' !== _0x180f62.music ? this.audio.setMusic(_0x180f62.music, !0x0) : this.audio.stopMusic());
};
_0x642743.prototype.doPush = function() {
    var _0x47ddfe = this.getPlayer();
    _0x47ddfe && !_0x47ddfe.dead && this.out.push(_0x1ea040.encode(_0x47ddfe.level, _0x47ddfe.zone, _0x47ddfe.pos, _0x47ddfe.sprite.ID, _0x47ddfe.reverse));
    _0x47ddfe = _0x1be292(this.out);
    this.out = [];
    gameClient.net.sendBinary(_0x47ddfe);
};
_0x642743.prototype.createObject = function(_0x578f4f, _0x59db44, _0x195e9b, _0x282413, _0x1827f9) {
    _0x59db44 = [void 0x0, this, _0x59db44, _0x195e9b, _0x282413];
    for (_0x195e9b = 0x0; _0x195e9b < _0x1827f9.length; _0x195e9b++) _0x59db44.push(_0x1827f9[_0x195e9b]);
    _0x3da6cc.OBJECT(_0x578f4f);
    _0x578f4f = new(Function.prototype.bind.apply(_0x3da6cc.OBJECT(_0x578f4f), _0x59db44))();
    this.objects.push(_0x578f4f);
    return _0x578f4f;
};
_0x642743.prototype.getObject = function(_0x3a86a9, _0x3ba0b6, _0x5b861b) {
    for (var _0x3ffb90 = 0x0; _0x3ffb90 < this.objects.length; _0x3ffb90++) {
        var _0x27bd94 = this.objects[_0x3ffb90];
        if (void 0x0 !== _0x27bd94.oid && _0x27bd94.level === _0x3a86a9 && _0x27bd94.zone === _0x3ba0b6 && _0x27bd94.oid === _0x5b861b) return _0x27bd94;
    }
};
_0x642743.prototype.getFlag = function(_0x43af60, _0x365d33) {
    for (var _0x183430 = 0x0; _0x183430 < this.objects.length; _0x183430++) {
        var _0x5819ce = this.objects[_0x183430];
        if (_0x5819ce.level === _0x43af60 && _0x5819ce.zone === _0x365d33 && _0x5819ce instanceof _0xadcd81) return _0x5819ce;
    }
};
_0x642743.prototype.getText = function(_0x684bab, _0x1988a8, _0x26b734) {
    for (var _0x124934 = 0x0; _0x124934 < this.objects.length; _0x124934++) {
        var _0x3c3b26 = this.objects[_0x124934];
        if (_0x3c3b26 && _0x3c3b26.level === _0x684bab && _0x3c3b26.zone === _0x1988a8 && _0x3c3b26 instanceof _0x3db18a && _0x3c3b26.text === _0x26b734.toString()) return _0x3c3b26;
    }
};
_0x642743.prototype.getPlatforms = function() {
    for (var _0x224f04 = this.getZone(), _0x4bb33b = [], _0x26e8ba = 0x0; _0x26e8ba < this.objects.length; _0x26e8ba++) {
        var _0x510c40 = this.objects[_0x26e8ba];
        (_0x510c40 instanceof _0x5bbb5e || _0x510c40 instanceof _0x4b6e2c) && _0x510c40.level === _0x224f04.level && _0x510c40.zone === _0x224f04.id && _0x4bb33b.push(_0x510c40);
    }
    return _0x4bb33b;
};
_0x642743.prototype.getGhost = function(_0x449d8f) {
    for (var _0x2ff3b4 = 0x0; _0x2ff3b4 < this.objects.length; _0x2ff3b4++) {
        var _0x506bb6 = this.objects[_0x2ff3b4];
        if (void 0x0 !== _0x506bb6.pid && _0x506bb6.pid === _0x449d8f) return _0x506bb6;
    }
};
_0x642743.prototype.getPlayer = function() {
    for (var _0x317331 = 0x0; _0x317331 < this.objects.length; _0x317331++) {
        var _0x46cfbf = this.objects[_0x317331];
        if (void 0x0 !== _0x46cfbf.pid && _0x46cfbf.pid === this.pid) return _0x46cfbf;
    }
};
_0x642743.prototype.getZone = function() {
    var _0x215d79 = this.getPlayer();
    return _0x215d79 ? this.lastZone = this.world.getZone(_0x215d79.level, _0x215d79.zone) : this.lastZone ? this.lastZone : this.world.getInitialZone();
};
_0x642743.prototype.getPlayerInfo = function(_0x45814e) {
    for (var _0x1227f7 = 0x0; _0x1227f7 < this.players.length; _0x1227f7++) {
        var _0x2e3a60 = this.players[_0x1227f7];
        if (_0x2e3a60.id === _0x45814e) return _0x2e3a60;
    }
};
_0x642743.prototype.getRemain = function() {
    for (var _0x5ca02b = 0x0, _0x4d40d7 = 0x0; _0x4d40d7 < this.players.length; _0x4d40d7++) {
        var _0xbb8caf = this.getGhost(this.players[_0x4d40d7].id);
        _0xbb8caf && !_0xbb8caf.dead && _0x5ca02b++;
    }
    return _0x5ca02b;
};
_0x642743.prototype.play = function(_0x5b2be8, _0x2c74b6, _0x4f5b18) {
    _0x5b2be8 = this.audio.getAudio(_0x5b2be8, _0x2c74b6, _0x4f5b18, "effect");
    _0x5b2be8.play();
    this.sounds.push(_0x5b2be8);
};
_0x642743.prototype.levelWarp = function(_0x4fb258) {
    this.levelWarpId = _0x4fb258;
    this.levelWarpTimer = _0x642743.LEVEL_WARP_TIME;
    this.getPlayer().hide();
};
_0x642743.prototype.coinage = function(jackpot) {
    if (jackpot) {
        this.play("sfx/gold.wav", 1, 0x0);
        var _0x27d445 = Cookies.get("dosh");
        !gameClient.net.isPrivate && Cookies.set("dosh", _0x27d445 ? parseInt(_0x27d445) + 50000 : 50000, {
            'expires': 0x16d
        });
        return;
    }
    this.coins = Math.min(0x63, this.coins + 0x1);
    this.coins >= _0x642743.COINS_TO_LIFE && (this.lifeage(), this.coins = 0x0);
    this.play("sfx/coin.wav", 0.4, 0x0);
    var _0x27d445 = Cookies.get("dosh");
    !gameClient.net.isPrivate && Cookies.set("dosh", _0x27d445 ? parseInt(_0x27d445) + 0x1 : 0x1, {
        'expires': 0x16d
    });
};
_0x642743.prototype.lifeage = function() {
    this.lives = Math.min(0x63, this.lives + 0x1);
    this.play("sfx/life.wav", 0x1, 0x0);
};
_0x642743.prototype.loop = function() {
    try {
        if (this.ready && void 0x0 !== this.startDelta) {
            var _0x441773 = _0x33a76c.time.now(),
                _0x3b488d = parseInt((_0x441773 - this.startDelta) / _0x642743.TICK_RATE);
            if (_0x3b488d > this.frame) {
                for (var _0x32cb4e = !0x0; this.buffer.length > _0x642743.FDLC_TARGET || _0x32cb4e && 0x0 < this.buffer.length;) {
                    var _0x6b0a25 = this.buffer.shift();
                    this.doUpdate(_0x6b0a25);
                    _0x32cb4e = !0x1;
                }
                for (this.doDetermine(); _0x3b488d > this.frame;) this.doStep();
                this.doPush();
                this.delta = _0x441773;
            }
        }
    } catch (_0x3d79b4) {}
    var _0x13c007 = this;
    this.loopReq = setTimeout(function() {
        _0x13c007.loop();
    }, 0x2);
};
_0x642743.prototype.draw = function() {
    this.lastDraw === this.frame && void 0x0 !== this.startDelta || this.display.draw();
    var _0x19f533 = this;
    this.frameReq = _0x5a9d86.call(window, function() {
        _0x19f533.draw();
    });
};
_0x642743.prototype.destroy = function() {
    _0x2a6b41.call(window, this.frameReq);
    clearTimeout(this.loopReq);
    this.input.destroy();
    this.display.destroy();
    this.audio.destroy();
};
"use strict";

function _0x2a0e1a(_0x5a8616) {
    _0x642743.call(this, _0x5a8616);
    this.lobbyTimer = 0x5a;
    if (gameClient.audioElement !== undefined) {
        gameClient.audioElement.setAttribute('src', LOBBY_MUSIC_URL);
        gameClient.audioElement.load;
        gameClient.audioElement.volume = 0.18;
        gameClient.audioElement.loop = true;
        if (!this.audio.muteMusic)
            gameClient.audioElement.play();
    }
}
_0x2a0e1a.prototype.load = _0x642743.prototype.load;
_0x2a0e1a.prototype.send = _0x642743.prototype.send;
_0x2a0e1a.prototype.handlePacket = _0x642743.prototype.handlePacket;
_0x2a0e1a.prototype.updatePlayerList = _0x642743.prototype.updatePlayerList;
_0x2a0e1a.prototype.gameStartTimer = function() {};
_0x2a0e1a.prototype.updateTeam = _0x642743.prototype.updateTeam;
_0x2a0e1a.prototype.handleBinary = _0x642743.prototype.handleBinary;
_0x2a0e1a.prototype.updatePacket = _0x642743.prototype.updatePacket;
_0x2a0e1a.prototype.doUpdate = _0x642743.prototype.doUpdate;
_0x2a0e1a.prototype.doNET001 = _0x642743.prototype.doNET001;
_0x2a0e1a.prototype.doNET010 = _0x642743.prototype.doNET010;
_0x2a0e1a.prototype.doNET011 = _0x642743.prototype.doNET011;
_0x2a0e1a.prototype.doNET012 = _0x642743.prototype.doNET012;
_0x2a0e1a.prototype.doNET013 = _0x642743.prototype.doNET013;
_0x2a0e1a.prototype.doNET020 = _0x642743.prototype.doNET020;
_0x2a0e1a.prototype.doNET030 = _0x642743.prototype.doNET030;
_0x2a0e1a.prototype.doStart = _0x642743.prototype.doStart;
_0x2a0e1a.prototype.doDetermine = _0x642743.prototype.doDetermine;
_0x2a0e1a.prototype.doInput = _0x642743.prototype.doInput;
_0x2a0e1a.prototype.doTouch = _0x642743.prototype.doTouch;
_0x2a0e1a.prototype.doStep = function() {
    this.doSpawn();
    _0x642743.prototype.doStep.call(this);
};
_0x2a0e1a.prototype.doSpawn = _0x642743.prototype.doSpawn;
_0x2a0e1a.prototype.doMusic = _0x642743.prototype.doMusic;
_0x2a0e1a.prototype.doPush = _0x642743.prototype.doPush;
_0x2a0e1a.prototype.createObject = _0x642743.prototype.createObject;
_0x2a0e1a.prototype.getObject = _0x642743.prototype.getObject;
_0x2a0e1a.prototype.getFlag = _0x642743.prototype.getFlag;
_0x2a0e1a.prototype.getPlatforms = _0x642743.prototype.getPlatforms;
_0x2a0e1a.prototype.getGhost = _0x642743.prototype.getGhost;
_0x2a0e1a.prototype.getPlayer = _0x642743.prototype.getPlayer;
_0x2a0e1a.prototype.getZone = _0x642743.prototype.getZone;
_0x2a0e1a.prototype.getPlayerInfo = _0x642743.prototype.getPlayerInfo;
_0x2a0e1a.prototype.getRemain = _0x642743.prototype.getRemain;
_0x2a0e1a.prototype.play = _0x642743.prototype.play;
_0x2a0e1a.prototype.levelWarp = _0x642743.prototype.levelWarp;
_0x2a0e1a.prototype.coinage = _0x642743.prototype.coinage;
_0x2a0e1a.prototype.lifeage = _0x642743.prototype.lifeage;
_0x2a0e1a.prototype.loop = function() {
    0x0 < this.lobbyTimer ? this.lobbyTimer-- : void 0x0 === this.startDelta && this.doStart();
    _0x642743.prototype.loop.call(this);
};
_0x2a0e1a.prototype.draw = _0x642743.prototype.draw;
_0x2a0e1a.prototype.destroy = function() {
    _0x642743.prototype.destroy.call(this);
    if (gameClient.audioElement !== undefined) {
        gameClient.audioElement.pause();
        gameClient.audioElement.remove();
        gameClient.audioElement = undefined;
    }
}
"use strict";

function _0x1040cd(_0x1425f8) {
    _0x642743.call(this, _0x1425f8);
    this.lobbyTimer = 0x5a;
}
_0x1040cd.prototype.load = _0x642743.prototype.load;
_0x1040cd.prototype.send = _0x642743.prototype.send;
_0x1040cd.prototype.handlePacket = _0x642743.prototype.handlePacket;
_0x1040cd.prototype.updatePlayerList = _0x642743.prototype.updatePlayerList;
_0x1040cd.prototype.gameStartTimer = function() {};
_0x1040cd.prototype.updateTeam = _0x642743.prototype.updateTeam;
_0x1040cd.prototype.handleBinary = _0x642743.prototype.handleBinary;
_0x1040cd.prototype.updatePacket = _0x642743.prototype.updatePacket;
_0x1040cd.prototype.doUpdate = _0x642743.prototype.doUpdate;
_0x1040cd.prototype.doNET001 = _0x642743.prototype.doNET001;
_0x1040cd.prototype.doNET010 = _0x642743.prototype.doNET010;
_0x1040cd.prototype.doNET011 = _0x642743.prototype.doNET011;
_0x1040cd.prototype.doNET012 = _0x642743.prototype.doNET012;
_0x1040cd.prototype.doNET013 = _0x642743.prototype.doNET013;
_0x1040cd.prototype.doNET020 = _0x642743.prototype.doNET020;
_0x1040cd.prototype.doNET030 = _0x642743.prototype.doNET030;
_0x1040cd.prototype.doStart = _0x642743.prototype.doStart;
_0x1040cd.prototype.doDetermine = _0x642743.prototype.doDetermine;
_0x1040cd.prototype.doInput = _0x642743.prototype.doInput;
_0x1040cd.prototype.doTouch = _0x642743.prototype.doTouch;
_0x1040cd.prototype.doStep = function() {
    _0x642743.prototype.doStep.call(this);
};
_0x1040cd.prototype.doSpawn = function() {};
_0x1040cd.prototype.doMusic = _0x642743.prototype.doMusic;
_0x1040cd.prototype.doPush = _0x642743.prototype.doPush;
_0x1040cd.prototype.createObject = _0x642743.prototype.createObject;
_0x1040cd.prototype.getObject = _0x642743.prototype.getObject;
_0x1040cd.prototype.getFlag = _0x642743.prototype.getFlag;
_0x1040cd.prototype.getPlatforms = _0x642743.prototype.getPlatforms;
_0x1040cd.prototype.getGhost = _0x642743.prototype.getGhost;
_0x1040cd.prototype.getPlayer = _0x642743.prototype.getPlayer;
_0x1040cd.prototype.getZone = _0x642743.prototype.getZone;
_0x1040cd.prototype.getPlayerInfo = _0x642743.prototype.getPlayerInfo;
_0x1040cd.prototype.getRemain = _0x642743.prototype.getRemain;
_0x1040cd.prototype.play = _0x642743.prototype.play;
_0x1040cd.prototype.levelWarp = _0x642743.prototype.levelWarp;
_0x1040cd.prototype.coinage = _0x642743.prototype.coinage;
_0x1040cd.prototype.lifeage = _0x642743.prototype.lifeage;
_0x1040cd.prototype.loop = function() {
    0x0 < this.lobbyTimer ? this.lobbyTimer-- : void 0x0 === this.startDelta && this.doStart();
    _0x642743.prototype.loop.call(this);
};
_0x1040cd.prototype.draw = _0x642743.prototype.draw;
_0x1040cd.prototype.destroy = _0x642743.prototype.destroy;
"use strict";

function GameClient() {
    this.menu = new Menu();
    this.net = new Net();
    this.goToLobby = Cookies.get("go_to_lobby") === "1";
    if (this.goToLobby)
        Cookies.remove("go_to_lobby");
    this.audioElement = document.createElement('audio');
    this.audioElement.setAttribute('src', MENU_MUSIC_URL);
    this.audioElement.load;
    this.audioElement.volume = 0.2;
    this.audioElement.loop = true;
    this.audioElement.play();
}
GameClient.prototype.init = function() {
    var _0x210c2d = this;
    document.getElementById("log").style.display = "none";
    document.getElementById("link-patch").style.display = "";
    document.getElementById("main-number").style.display = "";
    if (!this.goToLobby)
        this.menu.disclaim.show();
    setTimeout(function() {
        _0x210c2d.menu.load.show();
        $.ajax({
            'url': "/royale/status",
            'type': "GET",
            'timeout': 0xbb8,
            'success': function(_0x497cbd) {
                if (_0x497cbd.result) {
                    _0x210c2d.menu.error.show(_0x497cbd.result);
                    
                } else {
                    if (gameClient.goToLobby) {
                        var name = Cookies.get("name");
                        var team = Cookies.get("team");
                        var priv = Cookies.get("priv");
                        gameClient.join(name ? name : "", team ? team : "", priv === "true");
                        return;
                    }
                    
                    _0x210c2d.menu.main.show(_0x497cbd.active);
                }
            },
            'error': function() {
                _0x210c2d.menu.error.show("An unknown error occured while connecting to the game server...");
            },
            cache: false
        });
    }, this.goToLobby ? 100 : 5000);
};
GameClient.prototype.load = function(_0x252dc7) {
    if (this.game instanceof _0x642743) this.menu.error.show("State error. Game already loaded.");
    else switch (this.game instanceof _0x2a0e1a && this.game.destroy(), _0x252dc7.type) {
        case "game":
            this.game = new _0x642743(_0x252dc7);
            break;
        case "lobby":
            this.game = new _0x2a0e1a(_0x252dc7);
            break;
        case "jail":
            this.game = new _0x1040cd(_0x252dc7);
            break;
        default:
            this.menu.error.show("Critical error! Game file missing type!");
    }
};
GameClient.prototype.ingame = function() {
    return !!this.game;
};
GameClient.prototype.join = function(name, team, priv) {
    this.ingame() ? this.menu.error.show("An error occured while starting game...") : (this.menu.load.show(), this.net.connect(name, team, priv));
};
GameClient.prototype.close = function() {
    this.menu.load.show();
    this.ingame() && this.net.close();
    location.reload();
};
var gameClient = new GameClient();
print("loading game.min.js finished");
gameClient.init();
